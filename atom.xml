<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[I'm Tiger,一个有理想爱折腾的程序员!]]></title>
  <link href="http://imtiger.github.io/atom.xml" rel="self"/>
  <link href="http://imtiger.github.io/"/>
  <updated>2013-11-09T12:09:50+08:00</updated>
  <id>http://imtiger.github.io/</id>
  <author>
    <name><![CDATA[imtiger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tomcat 设计模式总结(Tomcat源代码阅读系列之八)]]></title>
    <link href="http://imtiger.github.io/blog/2013/11/08/tomcat-design-pattern/"/>
    <updated>2013-11-08T10:38:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/11/08/tomcat-design-pattern</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第八篇文章，本系列前七篇文章如下：<br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>     <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>    <br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/28/tomcat-class-loader/">Tomcat类加载器机制（Tomcat源代码阅读系列之六）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage/">Tomcat Session管理机制（Tomcat源代码阅读系列之七）</a></p>

<p>本篇我们将来分析一下Tomcat中所涉及到设计模式，本文我们将主要来分析<code>外观模式</code>，<code>观察者模式</code>，<code>责任链模式</code>，<code>模板方法模式</code>,<code>命令模式</code>。  <br/>
在开始本文之前，笔者先说明一下对于设计模式的一点看法。笔者曾经经常看到网上有人讨论设计模式，也偶尔会遇到有人非要严格按照GOF设计模式的类图以及其中的角色去套用别人的设计，只要类图不一样，或者角色多了或者少了就会觉得怎么和官方定义的模式不一样，其实这都是对设计模式的误解。设计模式其实不仅仅存在软件行业，各行各业其实都有模式，它是所在行业对一些通用问题解决方案的总结和抽象，是一种对常见问题的抽象的解决方案，不是一种具体的实现，所以我们在讨论设计模式的时候，千万别一个劲的套用GOF设计模式中的类图以及其中所涉及到的角色，而是要理解设计模式的思维，理解设计模式的使用场景，只有理解了设计模式中所蕴含的思维以及具体的使用场景以后，你才算是真正的掌握了它。ok,小扯了一下淡，接下来我们进入主题吧。</p>

<!-- more -->


<h1>外观模式</h1>

<h2>定义</h2>

<p>外观模式封装了子系统的具体实现，提供统一的外观类给外部系统，这样当子系统内部实现发生变化的时候，不会影响到外部系统。</p>

<h2>外观模式在Tomcat的应用</h2>

<p>在Tomcat中对于Request,Response,StandardSession,ApplicationContext,StandardWrapper都采用了外观模式，它的类图如下：
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-facade.png"></p>

<p>通过上图，我们可以看到RequestFacade包装了Request，它们都实现了HttpServletRequest，当传递Request对象给应用的时候，其实是返回了RequestFacade对象，而RequestFacade内部可以根据是否自定义了安全管理器来进行相应的操作。</p>

<p>对于Response,StandardSession等处理是类似的，这里就不赘述了。</p>

<h1>观察者模式</h1>

<h2>定义</h2>

<p>观察者模式是一种非常常用的模式，比如大家熟悉的发布-订阅模式，客户端应用中的事件监听器，以及通知等其实都属于观察者模式。观察者模式主要是在当系统中发生某个状态变更或者事件的时候，有另外一些组件或者对象对此次变化有兴趣，这个时候那些对变化感兴趣的对象就可以做为观察者对象来监听变化，而被观察对象要负责发生变化的时候触发通知操作。</p>

<h2>观察者模式在Tomcat的应用</h2>

<p>Tomcat中需要对很多组件进行生命周期管理，为此Tomcat抽象了统一的生命周期管理骨架，通过这个骨架将所有需要进行生命周期管理的类都纳入进来管理，而这里的骨架的类图如下：
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-observer.png"></p>

<p>通过上图我们可以看出Tomcat抽象了一个LifecycleSupport的类，而所有需要生命周期管理的组件通过LifecycleSupport类通知对某个生命周期事件感兴趣的观察者，而所有的观察者都需要实现LifecycleListener。<br/>
另外我们需要关注一下EventObject对象，它里面定义了一个事件源对象，所谓事件源就是事件发生的地方，而在Tomcat的设计中，事件源就是实现了LifeCycle接口的各个需要管理生命周期的组件，这里LifecycleSupport和LifeCycleBase之间是双向的关联，LifeCycleSupport关联LifeCycle对象就是为了实现事件源的传递，这样在LifeCycleSupport触发事件的时候，可以通过事件源构建EventObject.这样以来LifecycleListener就可以通过事件对象获取到事件源，从而做一些与事件源相关的操作。</p>

<h1>责任链模式</h1>

<h2>定义</h2>

<p>通过名称我们应该就能知道责任链模式是解决啥问题的？当我们系统在处理某个请求的时候，请求需要经过很多个节点进行处理，每个节点只关注自己的应该做的工作，做完自己的工作以后，将工作转给下一个节点进行处理，直到所有节点都处理完毕。责任链模式在日常生活中例子挺多，比如快递，当你发一个从深圳到北京的快递的时候，你的包裹会从一个分拨中心传递到下一个分拨中心，直到目的地，这里面每个分拨中心都是链路上的一个节点，它做完自己的工作，然后将工作传递到下一个节点，还比如路由器中传递某个数据包其实也是同样的思路。</p>

<h2>责任链模式在Tomcat的应用</h2>

<p>Tomcat中请求的处理流程其实就是采用了责任链模式，关于Tomcat请求处理，大家可以参考下<a href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a>,Tomcat中责任链模式的实现的类图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-chain-of-responsiblity.png"></p>

<p>从上图中，我们可以看到每一个容器都会有一个Pipeline，而一个Pipeline又会具有多个Valve阀门，其中StandardEngine对应的阀门是StandardEngineValve，StandardHost对应的阀门是StandardHostValve，StandardContext对应的阀门是StandardContextValve，StandardWrapper对应的阀门是StandardWrapperValve。这里每一Pipeline就好比一个管道，而每一Valve就相当于一个阀门，一个管道可以有多个阀门，而对于阀门来说有两种，一种阀门在处理完自己的事情以后，只需要将工作委托给下一个和自己在同一管道的阀门即可，第二种阀门是负责衔接各个管道的，它负责将请求传递给下个管道的第一个阀门处理，而这种阀门叫Basic阀门，它是每个管道中最后一个阀门，上面的Standard*Valve都属于第二种阀门。我们可以形象的通过下图来描述上面的过程:
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-pipeline.png"></p>

<p>通过上图，我们可以很清楚的了解到Tomcat的请求处理流程。当用户请求服务器的时候，Connector会接受请求，从Socket连接中根据http协议解析出对应的数据，构造Request和Response对象，然后传递给后面的容器处理，顶层容器是StandardEngine，StandardEngine处理请求其实是通过容器的Pipeline进行的，而Pipeline其实最终是通过管道上的各个阀门进行的，当请求到达StandardEngineValve的时候，此阀门会将请求转发给对应StandardHost的Pipeline的第一个阀门处理，然后以此最终到达StandardHostValve阀门，它又会将请求转发给StandardContext的Pipeline的第一个阀门，这样以此类推，最后到达StandardWrapperValve，此阀门会根据Request来构建对应的Servelt，并将请求转发给对应的HttpServlet处理。从这里我们可以看出其实Tomcat核心处理流程就是通过责任链一步步的组装起来的。</p>

<h1>模板方法模式</h1>

<h2>定义</h2>

<p>模板方法模式抽象出某个业务操作公共的流程，将流程分为几个步骤，其中有一些步骤是固定不变的，有一些步骤是变化的，固定不变的步骤通过一个基类来实现，而变化的部分通过钩子方法让子类去实现，这样就实现了对系统中流程的统一化规范化管理。其实日常生活中也有这样的例子，比如</p>

<h2>模板方法模式在Tomcat的应用</h2>

<p>Tomcat中关于生命周期管理的地方很好应用了模板方法模式，在一个组件的生命周期中都会涉及到init(初始化)，start（启动），stop(停止)，destory（销毁），而对于每一个生命周期阶段其实都有固定一些事情要做，比如判断前置状态，设置后置状态，以及通知状态变更事件的监听者等，而这些工作其实是可以固化的，所以Tomcat中就将每个生命周期阶段公共的部分固化，然后通过initInternal,startInternal,stopInternal,destoryInternal这几个钩子方法开放给子类去实现具体的逻辑。Tomcat中关于模板方法模式的实现如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/LifeCycleBase.png"></p>

<h1>命令模式</h1>

<h2>定义</h2>

<p>命令模式将请求封装为一个命令，将命令发送者和命令接受者解耦，并且所有命令对客户端来说都有统一的调用接口，使用命令模式还可以支持命令的撤销操作，在很多GUI程序中大量使用了此模式。<br/>
接下来我们来说一个场景大家感受下，我们有时候可能会遇到接口方法参数过多的问题，这样的接口不仅看起来丑陋而且不方便阅读，对客户端不友好。遇到这种情况我们可能选择将各种参数打包为一个参数对象，接口只需要一个参数对象即可，但是在具体的接口实现中，我们又要做条件判断根据参数值的不同做出不同的响应操作，这个时候其实就可以考虑将不同的逻辑实现和各种参数通过命令打包，然后提供一个命令工厂，客户端通过工厂生产出命令，然后直接调用即可。<br/>
其实在日常生活中，命令模式也很常见，比如公司老大给你分配了个任务，让你去做，他可能不关心你具体怎么做的，你做完了以后告诉他结果即可。</p>

<h2>命令模式在Tomcat的应用</h2>

<p>命令模式在Tomcat中主要是应用在对请求的处理过程中，Tomcat的实现中，根据它支持两种协议AJP和Http,而在具体的IO实现中，又分为Java同步阻赛IO,Java同步非祖塞IO，以及采用APR<a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">Apache Portable Runtime </a>支持库,因此Tomcat统一了<code>org.apache.coyote.Processor</code>接口，根据协议和IO实现的不同通过不同的Process子类去实现，Connector作为客户端每次只需要根据具体的协议和IO实现创建对应的Process执行即可。下面我们来看一下命令模式在Tomcat中实现的相关类图:
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-command-pattern.png"></p>

<p>通过上图我们可以清楚的看到，Tomcat首先根据协议的不同将Processor分为了Ajp和Http两组，然后又根据具体的IO实现方式的不同，将每一组都会实现同步祖塞IO,同步非祖塞IO，以及APR的Processor。
接下来我们再来看一个类图，我们就可以更加清楚的看到Tomcat中是如何利用命令模式来根据不同的协议以及IO实现方式来处理请求的。我们来看一下Tomcat中关于ProtocolHandler的类图。
<img class="center" src="http://imtiger.github.io/images/2013/11/08/tomcat-protocol.png"></p>

<p>通过上图我们可以看到针对每一种协议和IO实现方式的组合，都会有相应的协议处理类，而每个协议处理类都会有一个Handler，而每一个Handler在运行的时候就会创建出对应的Processor，比如AjpProtocol.AjpConnectionHandler创建AjpProcessor处理器，其它的类似。</p>

<p>通过上面的描述，我们可以看出Tomcat接受请求的处理流程如下：<br/>
Connector通过对应的Endpint监听Socket连接，当对应的端口有连接进来的时候，对应的Endpoint就会通过对应的Handler类处理，而Handler处理的时候，又会创建对应的Processor处理,而对应的Processor命令对象会解析Socket流的数据，然后生成Request和Response对象，最终通过上面说的责任链模式一步步的通过各个容器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat Session管理机制（Tomcat源代码阅读系列之七）]]></title>
    <link href="http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage/"/>
    <updated>2013-11-05T15:39:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第七篇文章，本系列前六篇文章如下：  <br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>   <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>  <br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/28/tomcat-class-loader/">Tomcat类加载器机制（Tomcat源代码阅读系列之六）</a></p>

<p>前面几篇我们分析了Tomcat的启动，关闭，请求处理的流程，tomcat的classloader机制，本篇将接着分析Tomcat的session管理方面的内容。</p>

<!-- more -->


<p>在开始之前，我们先来看一下总体上的结构，熟悉了总体结构以后，我们在一步步的去分析源代码。Tomcat session相光的类图如下：
<img class="center" src="http://imtiger.github.io/images/2013/11/06/tomcat-session.jpg">
通过上图，我们可以看出每一个StandardContext会关联一个Manager,默认情况下Manager的实现类是StandardManager，而StandardManager内部会聚合多个Session，其中StandardSession是Session的默认实现类，当我们调用Request.getSession的时候，Tomcat通过StandardSessionFacade这个外观类将StandardSession包装以后返回。</p>

<p>上面清楚了总体的结构以后，我们来进一步的通过源代码来分析一下。咋们首先从Request的getSession方法看起。</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.Request#getSession</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">HttpSession</span> <span class="nf">getSession</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">doGetSession</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">.</span><span class="na">getSession</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码，我们可以看出首先首先调用doGetSession方法获取Session，然后再调用Session的getSession方法返回HttpSession，那接下来我们再来看看doGetSession方法：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.Request#doGetSession</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Session</span> <span class="nf">doGetSession</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">create</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// There cannot be a session if no context has been assigned yet</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Return the current session if it exists and is valid</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">session</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">session</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Return the requested session if it exists and is valid</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="n">Manager</span> <span class="n">manager</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">manager</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getManager</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">manager</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>     <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kc">null</span><span class="o">);</span>      <span class="c1">// Sessions are not supported</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">requestedSessionId</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">session</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">findSession</span><span class="o">(</span><span class="n">requestedSessionId</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">session</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">session</span><span class="o">.</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">session</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">session</span><span class="o">.</span><span class="na">access</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">session</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Create a new session if requested and the response is not committed</span>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">create</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">context</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">response</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">context</span><span class="o">.</span><span class="na">getServletContext</span><span class="o">().</span><span class="na">getEffectiveSessionTrackingModes</span><span class="o">().</span>
</span><span class='line'>                <span class="n">contains</span><span class="o">(</span><span class="n">SessionTrackingMode</span><span class="o">.</span><span class="na">COOKIE</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">getResponse</span><span class="o">().</span><span class="na">isCommitted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span>
</span><span class='line'>          <span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;coyoteRequest.sessionCreateCommitted&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Attempt to reuse session id if one was submitted in a cookie</span>
</span><span class='line'>    <span class="c1">// Do not reuse the session id if it is from a URL, to prevent possible</span>
</span><span class='line'>    <span class="c1">// phishing attacks</span>
</span><span class='line'>    <span class="c1">// Use the SSL session ID if one is present.</span>
</span><span class='line'>    <span class="c1">// 4</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="s">&quot;/&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getSessionCookiePath</span><span class="o">())</span>
</span><span class='line'>            <span class="o">&amp;&amp;</span> <span class="n">isRequestedSessionIdFromCookie</span><span class="o">())</span> <span class="o">||</span> <span class="n">requestedSessionSSL</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">session</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="n">getRequestedSessionId</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">session</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="na">createSession</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Creating a new session cookie based on that session</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">session</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">getContext</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>           <span class="o">&amp;&amp;</span> <span class="n">getContext</span><span class="o">().</span><span class="na">getServletContext</span><span class="o">().</span>
</span><span class='line'>                   <span class="n">getEffectiveSessionTrackingModes</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span>
</span><span class='line'>                           <span class="n">SessionTrackingMode</span><span class="o">.</span><span class="na">COOKIE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 5 </span>
</span><span class='line'>        <span class="n">Cookie</span> <span class="n">cookie</span> <span class="o">=</span>
</span><span class='line'>            <span class="n">ApplicationSessionCookieConfig</span><span class="o">.</span><span class="na">createSessionCookie</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">context</span><span class="o">,</span> <span class="n">session</span><span class="o">.</span><span class="na">getIdInternal</span><span class="o">(),</span> <span class="n">isSecure</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">addSessionCookieInternal</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">session</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">session</span><span class="o">.</span><span class="na">access</span><span class="o">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们就来重点分析一下，上面代码中标注了数字的地方：</p>

<ol>
<li>标注1（第17行）首先从StandardContext中获取对应的Manager对象，缺省情况下，这个地方获取的其实就是StandardManager的实例。</li>
<li>标注2（第26行）从Manager中根据requestedSessionId获取session，如果session已经失效了，则将session置为null以便下面创建新的session,如果session不为空则通过调用session的access方法标注session的访问时间，然后返回。</li>
<li>标注3（第43行）判断传递的参数，如果为false，则直接返回空，这其实就是对应的Request.getSession(true/false)的情况，当传递false的时候，如果不存在session，则直接返回空，不会新建。</li>
<li>标注4 （第59行）调用Manager来创建一个新的session，这里默认会调用到StandardManager的方法，而StandardManager继承了ManagerBase，那么默认其实是调用了了ManagerBase的方法。</li>
<li>标注5 (第72行)创建了一个Cookie，而Cookie的名称就是大家熟悉的JSESSIONID，另外JSESSIONID其实也是可以配置的，这个可以通过context节点的sessionCookieName来修改。比如<Context sessionCookieName="yoursessionId">&hellip;</Context>.</li>
</ol>


<p>通过doGetSession获取到Session了以后，我们发现调用了session.getSession方法，而Session的实现类是StandardSession，那么我们再来看下StandardSession的getSession方法。</p>

<figure class='code'><figcaption><span>org.apache.catalina.session.StandardSession#getSession</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">HttpSession</span> <span class="nf">getSession</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">facade</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">SecurityUtil</span><span class="o">.</span><span class="na">isPackageProtectionEnabled</span><span class="o">()){</span>
</span><span class='line'>            <span class="kd">final</span> <span class="n">StandardSession</span> <span class="n">fsession</span> <span class="o">=</span> <span class="k">this</span><span class="o">;</span>
</span><span class='line'>            <span class="n">facade</span> <span class="o">=</span> <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="n">PrivilegedAction</span><span class="o">&lt;</span><span class="n">StandardSessionFacade</span><span class="o">&gt;(){</span>
</span><span class='line'>                <span class="nd">@Override</span>
</span><span class='line'>                <span class="kd">public</span> <span class="n">StandardSessionFacade</span> <span class="nf">run</span><span class="o">(){</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">new</span> <span class="nf">StandardSessionFacade</span><span class="o">(</span><span class="n">fsession</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">});</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">facade</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StandardSessionFacade</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="n">facade</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看到通过StandardSessionFacade的包装类将StandardSession包装以后返回。到这里我想大家应该熟悉了Session创建的整个流程。</p>

<p>接着我们再来看看，Sesssion是如何被销毁的。我们在<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a>中之处，在容器启动以后会启动一个ContainerBackgroundProcessor线程，这个线程是在Container启动的时候启动的，这条线程就通过后台周期性的调用org.apache.catalina.core.ContainerBase#backgroundProcess，而backgroundProcess方法最终又会调用org.apache.catalina.session.ManagerBase#backgroundProcess，接下来我们就来看看Manger的backgroundProcess方法。</p>

<figure class='code'><figcaption><span>org.apache.catalina.session.ManagerBase#backgroundProcess </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">backgroundProcess</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">count</span> <span class="o">=</span> <span class="o">(</span><span class="n">count</span> <span class="o">+</span> <span class="mi">1</span><span class="o">)</span> <span class="o">%</span> <span class="n">processExpiresFrequency</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>        <span class="n">processExpires</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码里，需要注意一下，默认情况下backgroundProcess是每10秒运行一次（StandardEngine构造的时候，将backgroundProcessorDelay设置为了10），而这里我们通过processExpiresFrequency来控制频率，例如processExpiresFrequency的值默认为6，那么相当于没一分钟运行一次processExpires方法。接下来我们再来看看processExpires。</p>

<figure class='code'><figcaption><span>org.apache.catalina.session.ManagerBase#processExpires</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">processExpires</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">long</span> <span class="n">timeNow</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Session</span> <span class="n">sessions</span><span class="o">[]</span> <span class="o">=</span> <span class="n">findSessions</span><span class="o">();</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">expireHere</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Start expire sessions &quot;</span> <span class="o">+</span> <span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; at &quot;</span> <span class="o">+</span> <span class="n">timeNow</span> <span class="o">+</span> <span class="s">&quot; sessioncount &quot;</span> <span class="o">+</span> <span class="n">sessions</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">sessions</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sessions</span><span class="o">[</span><span class="n">i</span><span class="o">]!=</span><span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">sessions</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">isValid</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">expireHere</span><span class="o">++;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">timeEnd</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>         <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;End expire sessions &quot;</span> <span class="o">+</span> <span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; processingTime &quot;</span> <span class="o">+</span> <span class="o">(</span><span class="n">timeEnd</span> <span class="o">-</span> <span class="n">timeNow</span><span class="o">)</span> <span class="o">+</span> <span class="s">&quot; expired sessions: &quot;</span> <span class="o">+</span> <span class="n">expireHere</span><span class="o">);</span>
</span><span class='line'>    <span class="n">processingTime</span> <span class="o">+=</span> <span class="o">(</span> <span class="n">timeEnd</span> <span class="o">-</span> <span class="n">timeNow</span> <span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码比较简单，首先查找出当前context的所有的session，然后调用session的isValid方法，接下来我们在看看Session的isValid方法。</p>

<figure class='code'><figcaption><span>org.apache.catalina.session.StandardSession#isValid</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isValid</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">expiring</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="k">this</span><span class="o">.</span><span class="na">isValid</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ACTIVITY_CHECK</span> <span class="o">&amp;&amp;</span> <span class="n">accessCount</span><span class="o">.</span><span class="na">get</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">maxInactiveInterval</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">timeNow</span> <span class="o">=</span> <span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">timeIdle</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">LAST_ACCESS_AT_START</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">timeIdle</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">timeNow</span> <span class="o">-</span> <span class="n">lastAccessedTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1000L</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">timeIdle</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="o">((</span><span class="n">timeNow</span> <span class="o">-</span> <span class="n">thisAccessedTime</span><span class="o">)</span> <span class="o">/</span> <span class="mi">1000L</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">timeIdle</span> <span class="o">&gt;=</span> <span class="n">maxInactiveInterval</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">expire</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isValid</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>查看上面的代码，主要就是通过对比当前时间和上次访问的时间差是否大于了最大的非活动时间间隔，如果大于就会调用expire(true)方法对session进行超期处理。这里需要注意一点，默认情况下LAST_ACCESS_AT_START为false，读者也可以通过设置系统属性的方式进行修改，而如果采用LAST_ACCESS_AT_START的时候，那么请求本身的处理时间将不算在内。比如一个请求处理开始的时候是10:00,请求处理花了1分钟，那么如果LAST_ACCESS_AT_START为true，则算是否超期的时候，是从10:00算起，而不是10:01。</p>

<p>接下来我们再来看看expire方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.session.StandardSession#expire</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">expire</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">notify</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Check to see if expire is in progress or has previously been called</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">expiring</span> <span class="o">||</span> <span class="o">!</span><span class="n">isValid</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Check again, now we are inside the sync so this code only runs once</span>
</span><span class='line'>        <span class="c1">// Double check locking - expiring and isValid need to be volatile</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">expiring</span> <span class="o">||</span> <span class="o">!</span><span class="n">isValid</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">manager</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Mark this session as &quot;being expired&quot;</span>
</span><span class='line'>        <span class="c1">// 1         </span>
</span><span class='line'>        <span class="n">expiring</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Notify interested application event listeners</span>
</span><span class='line'>        <span class="c1">// FIXME - Assumes we call listeners in reverse order</span>
</span><span class='line'>        <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="o">(</span><span class="n">Context</span><span class="o">)</span> <span class="n">manager</span><span class="o">.</span><span class="na">getContainer</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// The call to expire() may not have been triggered by the webapp.</span>
</span><span class='line'>        <span class="c1">// Make sure the webapp&#39;s class loader is set when calling the</span>
</span><span class='line'>        <span class="c1">// listeners</span>
</span><span class='line'>        <span class="n">ClassLoader</span> <span class="n">oldTccl</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getLoader</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">context</span><span class="o">.</span><span class="na">getLoader</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">oldTccl</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">IS_SECURITY_ENABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">PrivilegedAction</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">pa</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrivilegedSetTccl</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">context</span><span class="o">.</span><span class="na">getLoader</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">());</span>
</span><span class='line'>                <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">pa</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">context</span><span class="o">.</span><span class="na">getLoader</span><span class="o">().</span><span class="na">getClassLoader</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 2</span>
</span><span class='line'>            <span class="n">Object</span> <span class="n">listeners</span><span class="o">[]</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="na">getApplicationLifecycleListeners</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">notify</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">listeners</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">HttpSessionEvent</span> <span class="n">event</span> <span class="o">=</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">HttpSessionEvent</span><span class="o">(</span><span class="n">getSession</span><span class="o">());</span>
</span><span class='line'>                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">listeners</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="o">(</span><span class="n">listeners</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">-</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(!(</span><span class="n">listeners</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="k">instanceof</span> <span class="n">HttpSessionListener</span><span class="o">))</span>
</span><span class='line'>                        <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">HttpSessionListener</span> <span class="n">listener</span> <span class="o">=</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">HttpSessionListener</span><span class="o">)</span> <span class="n">listeners</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">context</span><span class="o">.</span><span class="na">fireContainerEvent</span><span class="o">(</span><span class="s">&quot;beforeSessionDestroyed&quot;</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">listener</span><span class="o">.</span><span class="na">sessionDestroyed</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">context</span><span class="o">.</span><span class="na">fireContainerEvent</span><span class="o">(</span><span class="s">&quot;afterSessionDestroyed&quot;</span><span class="o">,</span>
</span><span class='line'>                                <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                            <span class="n">context</span><span class="o">.</span><span class="na">fireContainerEvent</span><span class="o">(</span>
</span><span class='line'>                                    <span class="s">&quot;afterSessionDestroyed&quot;</span><span class="o">,</span> <span class="n">listener</span><span class="o">);</span>
</span><span class='line'>                        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                            <span class="c1">// Ignore</span>
</span><span class='line'>                        <span class="o">}</span>
</span><span class='line'>                        <span class="n">manager</span><span class="o">.</span><span class="na">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">().</span><span class="na">error</span>
</span><span class='line'>                            <span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardSession.sessionEvent&quot;</span><span class="o">),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">oldTccl</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">IS_SECURITY_ENABLED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">PrivilegedAction</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">pa</span> <span class="o">=</span>
</span><span class='line'>                        <span class="k">new</span> <span class="nf">PrivilegedSetTccl</span><span class="o">(</span><span class="n">oldTccl</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">pa</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">oldTccl</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">ACTIVITY_CHECK</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">accessCount</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">setValid</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Remove this session from our manager&#39;s active sessions</span>
</span><span class='line'>        <span class="c1">// 3 </span>
</span><span class='line'>        <span class="n">manager</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="kc">true</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Notify interested session event listeners</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">notify</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">fireSessionEvent</span><span class="o">(</span><span class="n">Session</span><span class="o">.</span><span class="na">SESSION_DESTROYED_EVENT</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Call the logout method</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">principal</span> <span class="k">instanceof</span> <span class="n">GenericPrincipal</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">GenericPrincipal</span> <span class="n">gp</span> <span class="o">=</span> <span class="o">(</span><span class="n">GenericPrincipal</span><span class="o">)</span> <span class="n">principal</span><span class="o">;</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">gp</span><span class="o">.</span><span class="na">logout</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">manager</span><span class="o">.</span><span class="na">getContainer</span><span class="o">().</span><span class="na">getLogger</span><span class="o">().</span><span class="na">error</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardSession.logoutfail&quot;</span><span class="o">),</span>
</span><span class='line'>                        <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// We have completed expire of this session</span>
</span><span class='line'>        <span class="n">expiring</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Unbind any objects associated with this session</span>
</span><span class='line'>        <span class="c1">// 4</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">keys</span><span class="o">[]</span> <span class="o">=</span> <span class="n">keys</span><span class="o">();</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">keys</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
</span><span class='line'>            <span class="n">removeAttributeInternal</span><span class="o">(</span><span class="n">keys</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">notify</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码的主流程我已经标注了数字，我们来逐一分析一下：</p>

<ol>
<li>标注1（第18行）标记当前的session为超期</li>
<li>标注2（第41行）出发HttpSessionListener监听器的方法。</li>
<li>标注3（第89行）从Manager里面移除当前的session</li>
<li>标注4（第113行）将session中保存的属性移除。</li>
</ol>


<p>到这里我们已经清楚了Tomcat中对与StandardSession的创建以及销毁的过程，其实StandardSession仅仅是实现了内存中Session的存储，而Tomcat还支持将Session持久化，以及Session集群节点间的同步。这些内容我们以后再来分析。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat类加载器机制（Tomcat源代码阅读系列之六）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/28/tomcat-class-loader/"/>
    <updated>2013-10-28T14:06:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/28/tomcat-class-loader</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第六篇文章，本系列前五篇文章如下：  <br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>   <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>  <br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a></p>

<p>前面几篇我们分析了Tomcat的启动，关闭以及请求处理的流程，本篇将接着分析Tomcat的类加载器机制，如果大家对Java的类加载器机制不熟悉的话，建议首先熟悉一下Java的类加载器机制后再来查看本篇文章，对于Java的类加载器机制，大家可以参考自行Google或者参考笔者的另外一篇文章：<a href="http://imtiger.github.io/blog/2009/11/09/java-classloader/">Java Classloader机制解析</a>.</p>

<!-- more -->


<p>要说Tomcat的Classloader机制，我们还得从Bootstrap开始。在BootStrap初始化的时候，调用了<code>org.apache.catalina.startup.Bootstrap#initClassLoaders</code>方法，这个方法里面创建了3个ClassLoader,它们分别是commonLoader,catalinaLoader,sharedLoader，其中catalinaLoader,sharedLoader的父亲加载器是commonLoader，initClassLoaders执行的过程中会执行createClassLoader，而createClassLoader是根据conf/catalina.properties文件中common.loader，server.loader，shared.loader的值来初始化，它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#createClassLoader</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">ClassLoader</span> <span class="nf">createClassLoader</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">ClassLoader</span> <span class="n">parent</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">value</span> <span class="o">=</span> <span class="n">CatalinaProperties</span><span class="o">.</span><span class="na">getProperty</span><span class="o">(</span><span class="n">name</span> <span class="o">+</span> <span class="s">&quot;.loader&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="k">if</span> <span class="o">((</span><span class="n">value</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">||</span> <span class="o">(</span><span class="n">value</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;&quot;</span><span class="o">)))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">parent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">value</span> <span class="o">=</span> <span class="n">replace</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Repository</span><span class="o">&gt;</span> <span class="n">repositories</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Repository</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">StringTokenizer</span> <span class="n">tokenizer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringTokenizer</span><span class="o">(</span><span class="n">value</span><span class="o">,</span> <span class="s">&quot;,&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="o">(</span><span class="n">tokenizer</span><span class="o">.</span><span class="na">hasMoreElements</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">repository</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">trim</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">repository</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Check for a JAR URL repository</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">&quot;unused&quot;</span><span class="o">)</span>
</span><span class='line'>            <span class="n">URL</span> <span class="n">url</span> <span class="o">=</span> <span class="k">new</span> <span class="n">URL</span><span class="o">(</span><span class="n">repository</span><span class="o">);</span>
</span><span class='line'>            <span class="n">repositories</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Repository</span><span class="o">(</span><span class="n">repository</span><span class="o">,</span> <span class="n">RepositoryType</span><span class="o">.</span><span class="na">URL</span><span class="o">));</span>
</span><span class='line'>            <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">MalformedURLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Ignore</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Local repository</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">repository</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;*.jar&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">repository</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">substring</span>
</span><span class='line'>                <span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">repository</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="s">&quot;*.jar&quot;</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
</span><span class='line'>            <span class="n">repositories</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Repository</span><span class="o">(</span><span class="n">repository</span><span class="o">,</span> <span class="n">RepositoryType</span><span class="o">.</span><span class="na">GLOB</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">repository</span><span class="o">.</span><span class="na">endsWith</span><span class="o">(</span><span class="s">&quot;.jar&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">repositories</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Repository</span><span class="o">(</span><span class="n">repository</span><span class="o">,</span> <span class="n">RepositoryType</span><span class="o">.</span><span class="na">JAR</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">repositories</span><span class="o">.</span><span class="na">add</span><span class="o">(</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">Repository</span><span class="o">(</span><span class="n">repository</span><span class="o">,</span> <span class="n">RepositoryType</span><span class="o">.</span><span class="na">DIR</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="n">ClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="n">ClassLoaderFactory</span><span class="o">.</span><span class="na">createClassLoader</span>
</span><span class='line'>        <span class="o">(</span><span class="n">repositories</span><span class="o">,</span> <span class="n">parent</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">classLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>以上代码删除了与本篇无关的代码，下面我们分别来分析一下标注的地方：</p>

<ol>
<li>标注1的代码（第5行）判断如果catalina.properties中没有配置对应的loader属性的话，直接返回父加载器，而默认情况下，server.loader,shared.loader为空，那么此时的catalinaLoader,sharedLoader其实是同一个ClassLoader.</li>
<li>标注2（第9行）的地方根据环境变量的配置替换字符串中的值.默认情况下，common.loader的值为common.loader=${catalina.base}/lib,${catalina.base}/lib/<em>.jar,${catalina.home}/lib,${catalina.home}/lib/</em>.jar,这里会将catalina.base和catalina.home用环境变量的值替换。</li>
<li>标注3（第46行）的代码最终调用<code>org.apache.catalina.startup.ClassLoaderFactory#createClassLoader</code>静态工厂方法创建了URLClassloader的实例，而具体的URL其实就是*.loader属性配置的内容，此外如果parent为null的话，则直接用系统类加载器。</li>
</ol>


<p>上面分析了Tomcat在启动的时候，初始化的几个ClassLoader，接下来我们再来继续看看，这些ClassLoader具体都用在什么地方。</p>

<p>我们接着来看org.apache.catalina.startup.Bootstrap#init方法，在初始化完3个classLoader以后，接下来首先通过catalinaLoader加载了<code>org.apache.catalina.startup.Catalina</code>l类，然后通过放射调用了org.apache.catalina.startup.Catalina#setParentClassLoader,具体代码片段如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#init</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">startupClass</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">catalinaLoader</span><span class="o">.</span><span class="na">loadClass</span>
</span><span class='line'>    <span class="o">(</span><span class="s">&quot;org.apache.catalina.startup.Catalina&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Object</span> <span class="n">startupInstance</span> <span class="o">=</span> <span class="n">startupClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;setParentClassLoader&quot;</span><span class="o">;</span>
</span><span class='line'><span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">paramTypes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="n">paramTypes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.ClassLoader&quot;</span><span class="o">);</span>
</span><span class='line'><span class="n">Object</span> <span class="n">paramValues</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'><span class="n">paramValues</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sharedLoader</span><span class="o">;</span>
</span><span class='line'><span class="n">Method</span> <span class="n">method</span> <span class="o">=</span>
</span><span class='line'>    <span class="n">startupInstance</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="n">methodName</span><span class="o">,</span> <span class="n">paramTypes</span><span class="o">);</span>
</span><span class='line'><span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">startupInstance</span><span class="o">,</span> <span class="n">paramValues</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以清楚的看到调用了Catalina的setParentClassLoader放，那么到这里我们可能又要想知道，设置了parentClassLoader以后，sharedLoader又是在哪里使用的呢？这就需要我们接着来分析容器启动的代码。我们通过查看<code>org.apache.catalina.startup.Catalina#getParentClassLoader</code>调用栈，我们看到在StandardContext的startInternal方法中调用了它，那么我们查看一下它的代码，包含了如下代码片段：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.StandardContext#startInternal </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="k">if</span> <span class="o">(</span><span class="n">getLoader</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">WebappLoader</span> <span class="n">webappLoader</span> <span class="o">=</span> <span class="k">new</span> <span class="n">WebappLoader</span><span class="o">(</span><span class="n">getParentClassLoader</span><span class="o">());</span>
</span><span class='line'>            <span class="n">webappLoader</span><span class="o">.</span><span class="na">setDelegate</span><span class="o">(</span><span class="n">getDelegate</span><span class="o">());</span>
</span><span class='line'>            <span class="n">setLoader</span><span class="o">(</span><span class="n">webappLoader</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">ok</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Start our subordinate components, if any</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">loader</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">loader</span> <span class="k">instanceof</span> <span class="n">Lifecycle</span><span class="o">))</span>
</span><span class='line'>            <span class="o">((</span><span class="n">Lifecycle</span><span class="o">)</span> <span class="n">loader</span><span class="o">).</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="c1">//other code    </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查看上面的代码，我们看到在StandardContext启动的时候，会创建webapploader，创建webapploader的时候会将getParentClassLoader方法返回的结果（这里返回的其实就是sharedLoader）赋值给自己的parentClassLoader变量,接着又会调用到Webapploader的start方法，因为WebappLoader符合Tomcat组件生命周期管理的模板方法模式，因此会调用到它的startInternal方法。我们接下来就来看看WebappLoader的startInternal，我们摘取一部分与本篇相关的代码片段如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.loader.WebappLoader#startInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">classLoader</span> <span class="o">=</span> <span class="n">createClassLoader</span><span class="o">();</span>
</span><span class='line'><span class="n">classLoader</span><span class="o">.</span><span class="na">setResources</span><span class="o">(</span><span class="n">container</span><span class="o">.</span><span class="na">getResources</span><span class="o">());</span>
</span><span class='line'><span class="n">classLoader</span><span class="o">.</span><span class="na">setDelegate</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">delegate</span><span class="o">);</span>
</span><span class='line'><span class="n">classLoader</span><span class="o">.</span><span class="na">setSearchExternalFirst</span><span class="o">(</span><span class="n">searchExternalFirst</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上的代码可以看到调用了createClassLoader方法创建一个classLoader，那么我们再看来看看createClassLoader的代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.loader.WebappLoader#createClassLoader </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="n">WebappClassLoader</span> <span class="nf">createClassLoader</span><span class="o">()</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">loaderClass</span><span class="o">);</span>
</span><span class='line'>    <span class="n">WebappClassLoader</span> <span class="n">classLoader</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">parentClassLoader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">parentClassLoader</span> <span class="o">=</span> <span class="n">container</span><span class="o">.</span><span class="na">getParentClassLoader</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">argTypes</span> <span class="o">=</span> <span class="o">{</span> <span class="n">ClassLoader</span><span class="o">.</span><span class="na">class</span> <span class="o">};</span>
</span><span class='line'>    <span class="n">Object</span><span class="o">[]</span> <span class="n">args</span> <span class="o">=</span> <span class="o">{</span> <span class="n">parentClassLoader</span> <span class="o">};</span>
</span><span class='line'>    <span class="n">Constructor</span><span class="o">&lt;?&gt;</span> <span class="n">constr</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">.</span><span class="na">getConstructor</span><span class="o">(</span><span class="n">argTypes</span><span class="o">);</span>
</span><span class='line'>    <span class="n">classLoader</span> <span class="o">=</span> <span class="o">(</span><span class="n">WebappClassLoader</span><span class="o">)</span> <span class="n">constr</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">classLoader</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的代码里面，loaderClass是WebappLoader的实例变量，其值为<code>org.apache.catalina.loader.WebappClassLoader</code>，那么上面的代码其实就是通过反射调用了WebappClassLoader的构造函数，然后传递了sharedLoader作为其父亲加载器。</p>

<p>代码阅读到这里，我们已经基本清楚了Tomcat中ClassLoader的总体结构，总结如下：
在Tomcat存在common,cataina,shared三个公共的classloader,默认情况下，这三个classloader其实是同一个，都是common classloader,而针对每个webapp，也就是context（对应代码中的StandardContext类），都有自己的WebappClassLoader来加载每个应用自己的类。上面的描述，我们可以通过下图形象化的描述：
<img class="center" src="http://imtiger.github.io/images/2013/10/30/tomcat-classloader.png"></p>

<p>清楚了Tomcat总体的ClassLoader结构以后，咋们就来进一步来分析一下WebAppClassLoader的代码，我们知道Java的ClassLoader机制有parent-first的机制，而这种机制是在loadClass方法保证的，一般情况下，我们只需要重写findClass方法就好了，而对于WebAppClassLoader，通过查看源代码，我们发现loadClass和findClass方法都进行了重写，那么我们首先就来看看它的loadClass方法,它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.loader.WebappClassLoader#loadClass</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">synchronized</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">loadClass</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">boolean</span> <span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;loadClass(&quot;</span> <span class="o">+</span> <span class="n">name</span> <span class="o">+</span> <span class="s">&quot;, &quot;</span> <span class="o">+</span> <span class="n">resolve</span> <span class="o">+</span> <span class="s">&quot;)&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Log access to stopped classloader</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">started</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IllegalStateException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;webappClassLoader.stopped&quot;</span><span class="o">,</span> <span class="n">name</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (0) Check our previously loaded local class cache</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="n">clazz</span> <span class="o">=</span> <span class="n">findLoadedClass0</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Returning class from cache&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>            <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (0.1) Check our previously loaded class cache</span>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">clazz</span> <span class="o">=</span> <span class="n">findLoadedClass</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Returning class from cache&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>            <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (0.2) Try loading the class with the system class loader, to prevent</span>
</span><span class='line'>    <span class="c1">//       the webapp from overriding J2SE classes</span>
</span><span class='line'>    <span class="c1">// 3 </span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">clazz</span> <span class="o">=</span> <span class="n">system</span><span class="o">.</span><span class="na">loadClass</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>                <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Ignore</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (0.5) Permission to access this class when using a SecurityManager</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">securityManager</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">lastIndexOf</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">securityManager</span><span class="o">.</span><span class="na">checkPackageAccess</span><span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SecurityException</span> <span class="n">se</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">error</span> <span class="o">=</span> <span class="s">&quot;Security Violation, attempt to use &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&quot;Restricted Class: &quot;</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">error</span><span class="o">,</span> <span class="n">se</span><span class="o">);</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="n">error</span><span class="o">,</span> <span class="n">se</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//4 </span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">delegateLoad</span> <span class="o">=</span> <span class="n">delegate</span> <span class="o">||</span> <span class="n">filter</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (1) Delegate to our parent if requested</span>
</span><span class='line'>    <span class="c1">// 5 </span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">delegateLoad</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Delegating to parent classloader1 &quot;</span> <span class="o">+</span> <span class="n">parent</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">parent</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">loader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">loader</span> <span class="o">=</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Loading class from parent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Ignore</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (2) Search local repositories</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Searching local repositories&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 6 </span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">clazz</span> <span class="o">=</span> <span class="n">findClass</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Loading class from local repository&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>                <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Ignore</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// (3) Delegate to parent unconditionally</span>
</span><span class='line'>    <span class="c1">// 7</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">delegateLoad</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Delegating to parent classloader at end: &quot;</span> <span class="o">+</span> <span class="n">parent</span><span class="o">);</span>
</span><span class='line'>        <span class="n">ClassLoader</span> <span class="n">loader</span> <span class="o">=</span> <span class="n">parent</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">loader</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="n">loader</span> <span class="o">=</span> <span class="n">system</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">clazz</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="n">loader</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;  Loading class from parent&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">resolve</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">resolveClass</span><span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>                <span class="k">return</span> <span class="o">(</span><span class="n">clazz</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassNotFoundException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Ignore</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们一步步的来分析一下上面的代码做了什么事情。</p>

<ol>
<li>标注1(第18行)代码，首先从当前ClassLoader的本地缓存中加载类，如果找到则返回。</li>
<li>标注2(第29行)代码，在本地缓存没有的情况下，调用ClassLoader的findLoadedClass方法查看jvm是否已经加载过此类，如果已经加载则直接返回。</li>
<li>标注3(第41行)代码，通过系统的来加载器加载此类，这里防止应用写的类覆盖了J2SE的类,这句代码非常关键，如果不写的话，就会造成你自己写的类有可能会把J2SE的类给替换调，另外假如你写了一个javax.servlet.Servlet类，放在当前应用的WEB-INF/class中，如果没有此句代码的保证，那么你自己写的类就会替换到Tomcat容器Lib中包含的类。</li>
<li>标注4(第68行)代码，判断是否需要委托给父类加载器进行加载，delegate属性默认为false，那么delegatedLoad的值就取决于filter的返回值了，filter方法中根据包名来判断是否需要进行委托加载，默认情况下会返回false.因此delegatedLoad为false</li>
<li>标注5(第72行)代码，因为delegatedLoad为false,那么此时不会委托父加载器去加载，这里其实是没有遵循parent-first的加载机制。</li>
<li>标注6(第96行)调用findClass方法在webapp级别进行加载</li>
<li>标注7(第111行)如果还是没有加载到类，并且不采用委托机制的话，则通过父类加载器去加载。</li>
</ol>


<p>通过上面的描述，我们可以知道Tomcat在加载webapp级别的类的时候，默认是不遵守parent-first的，这样做的好处是更好的实现了应用的隔离，但是坏处就是加大了内存浪费，同样的类库要在不同的app中都要加载一份。</p>

<p>上面分析完了loadClass，我们接着在来分析一下findClass，通过分析findClass的代码，最终会调用<code>org.apache.catalina.loader.WebappClassLoader#findClassInternal</code>方法，那我们就来分析一下它的代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.loader.WebappClassLoader#findClassInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">findClassInternal</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">ClassNotFoundException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(!</span><span class="n">validate</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">String</span> <span class="n">tempPath</span> <span class="o">=</span> <span class="n">name</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">&#39;.&#39;</span><span class="o">,</span> <span class="sc">&#39;/&#39;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">classPath</span> <span class="o">=</span> <span class="n">tempPath</span> <span class="o">+</span> <span class="s">&quot;.class&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ResourceEntry</span> <span class="n">entry</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">securityManager</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">PrivilegedAction</span><span class="o">&lt;</span><span class="n">ResourceEntry</span><span class="o">&gt;</span> <span class="n">dp</span> <span class="o">=</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">PrivilegedFindResourceByName</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">classPath</span><span class="o">);</span>
</span><span class='line'>        <span class="n">entry</span> <span class="o">=</span> <span class="n">AccessController</span><span class="o">.</span><span class="na">doPrivileged</span><span class="o">(</span><span class="n">dp</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 1 </span>
</span><span class='line'>        <span class="n">entry</span> <span class="o">=</span> <span class="n">findResourceInternal</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">classPath</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">entry</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">loadedClass</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">synchronized</span> <span class="o">(</span><span class="k">this</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">clazz</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">loadedClass</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">clazz</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">binaryContent</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ClassNotFoundException</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 2</span>
</span><span class='line'>            <span class="n">clazz</span> <span class="o">=</span> <span class="n">defineClass</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">binaryContent</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">entry</span><span class="o">.</span><span class="na">binaryContent</span><span class="o">.</span><span class="na">length</span><span class="o">,</span>
</span><span class='line'>                    <span class="k">new</span> <span class="nf">CodeSource</span><span class="o">(</span><span class="n">entry</span><span class="o">.</span><span class="na">codeBase</span><span class="o">,</span> <span class="n">entry</span><span class="o">.</span><span class="na">certificates</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnsupportedClassVersionError</span> <span class="n">ucve</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UnsupportedClassVersionError</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">ucve</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;webappClassLoader.wrongVersion&quot;</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">name</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">loadedClass</span> <span class="o">=</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">binaryContent</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">source</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">codeBase</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">manifest</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">entry</span><span class="o">.</span><span class="na">certificates</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码标注1（第19行）的地方通过名称去当前webappClassLoader的仓库中查找对应的类文件，标注2(第38行)的代码，将找到的类文件通过defineClass转变为Jvm可以识别的Class对象返回。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat请求处理流程（Tomcat源代码阅读系列之五）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/"/>
    <updated>2013-10-24T09:54:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/24/tomcat-request-process</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第五篇文章，本系列前四篇文章如下：<br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a>
<a href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a></p>

<p>前面已经分析完了Tomcat的启动和关闭过程，本篇就来接着分析一下Tomcat中请求的处理过程。</p>

<!-- more -->


<p>在开始本文之前，咋们首先来看看一个Http请求处理的过程，一般情况下是<code>浏览器发送http请求-&gt;建立Socket连接-&gt;通过Socket读取数据-&gt;根据http协议解析数据-&gt;调用后台服务完成响应</code>,而Tomcat既是一个HttpServer也是一个Servlet 容器，那么这里必然也涉及到如上过程，首先根据HTTP协议规范解析请求数据，然后将请求转发给Servlet进行处理，因此顺应这样的思路，本文也将从<strong>Http协议请求解析</strong>，<strong>请求如何转发给Servlet</strong>两个方面来进行分析。首先来看Http协议请求解析。</p>

<h1>Http协议请求解析</h1>

<p>在<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a>一文中，我们已经知道Tomcat启动以后，默认情况下会通过<code>org.apache.tomcat.util.net.JIoEndpoint.Acceptor</code>监听Socket连接，当监听到有Socket连接的时候，就会调用<code>org.apache.tomcat.util.net.JIoEndpoint#processSocket</code>方法进行处理，下面我们就来看看此方法的代码，为了节省版面，只保留与本文相关的代码。</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.JIoEndpoint#processSocket</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">boolean</span> <span class="nf">processSocket</span><span class="o">(</span><span class="n">Socket</span> <span class="n">socket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Process the request from this socket</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">SocketWrapper</span><span class="o">&lt;</span><span class="n">Socket</span><span class="o">&gt;</span> <span class="n">wrapper</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SocketWrapper</span><span class="o">&lt;</span><span class="n">Socket</span><span class="o">&gt;(</span><span class="n">socket</span><span class="o">);</span>
</span><span class='line'>            <span class="n">wrapper</span><span class="o">.</span><span class="na">setKeepAliveLeft</span><span class="o">(</span><span class="n">getMaxKeepAliveRequests</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">// During shutdown, executor may be null - avoid NPE</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">getExecutor</span><span class="o">().</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">SocketProcessor</span><span class="o">(</span><span class="n">wrapper</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">RejectedExecutionException</span> <span class="n">x</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>         <span class="c1">//exception handler ...</span>
</span><span class='line'>         <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看出首先将Socket封装为SocketWrapper，然后通过SocketProcessor来进行处理，因为Tomcat必然面对用户并发请求，因此这里Socket的处理通过新的线程池来处理。接下来我们再来看看SocketProcess的代码，同样省略了一些非核心的代码，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.JIoEndpoint.SocketProcessor#run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">launch</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="kd">synchronized</span> <span class="o">(</span><span class="n">socket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">SocketState</span> <span class="n">state</span> <span class="o">=</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">OPEN</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// SSL handshake</span>
</span><span class='line'>                    <span class="n">serverSocketFactory</span><span class="o">.</span><span class="na">handshake</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getSocket</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;endpoint.err.handshake&quot;</span><span class="o">),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="c1">// Tell to close the socket</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">=</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="o">((</span><span class="n">state</span> <span class="o">!=</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// 1 </span>
</span><span class='line'>                        <span class="n">state</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">OPEN</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">state</span> <span class="o">=</span> <span class="n">handler</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Close socket</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isTraceEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">log</span><span class="o">.</span><span class="na">trace</span><span class="o">(</span><span class="s">&quot;Closing socket:&quot;</span><span class="o">+</span><span class="n">socket</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">countDownConnection</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">socket</span><span class="o">.</span><span class="na">getSocket</span><span class="o">().</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// Ignore</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">OPEN</span> <span class="o">||</span>
</span><span class='line'>                        <span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">UPGRADING</span>  <span class="o">||</span>
</span><span class='line'>                        <span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">UPGRADED</span><span class="o">){</span>
</span><span class='line'>                    <span class="n">socket</span><span class="o">.</span><span class="na">setKeptAlive</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">socket</span><span class="o">.</span><span class="na">access</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">launch</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">LONG</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">socket</span><span class="o">.</span><span class="na">access</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">waitingRequests</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>               <span class="c1">//other code</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="c1">// Finish up this request</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>默认情况下，代码会运行到标注1的地方，标注1的地方又通过<code>org.apache.tomcat.util.net.JIoEndpoint.Handler#process</code>的方法进行处理，而通过前面Tomcat启动的文章，我们已经知道handler属性是在<code>org.apache.coyote.http11.Http11Protocol</code>的构造方法中初始化的，构造方法如下：</p>

<figure class='code'><figcaption><span>org.apache.coyote.http11.Http11Protocol#Http11Protocol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="nf">Http11Protocol</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">endpoint</span> <span class="o">=</span> <span class="k">new</span> <span class="n">JIoEndpoint</span><span class="o">();</span>
</span><span class='line'>    <span class="n">cHandler</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Http11ConnectionHandler</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>    <span class="o">((</span><span class="n">JIoEndpoint</span><span class="o">)</span> <span class="n">endpoint</span><span class="o">).</span><span class="na">setHandler</span><span class="o">(</span><span class="n">cHandler</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setSoLinger</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">DEFAULT_CONNECTION_LINGER</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setSoTimeout</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">DEFAULT_CONNECTION_TIMEOUT</span><span class="o">);</span>
</span><span class='line'>    <span class="n">setTcpNoDelay</span><span class="o">(</span><span class="n">Constants</span><span class="o">.</span><span class="na">DEFAULT_TCP_NO_DELAY</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
从构造方法中，我们可以清楚的看到，其实初始化了<code>org.apache.coyote.http11.Http11Protocol.Http11ConnectionHandler</code>的实例，那么接下来我们就来看看它的process方法，因为Http11ConnectionHandler继承了<code>org.apache.coyote.AbstractProtocol.AbstractConnectionHandler</code>，而自己没有实现process方法，因此会调用到父类的process方法，那么接下来我们就来看看AbstractConnectionHandler的process方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.coyote.AbstractProtocol.AbstractConnectionHandler#process</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">SocketState</span> <span class="nf">process</span><span class="o">(</span><span class="n">SocketWrapper</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="n">socket</span><span class="o">,</span>
</span><span class='line'>        <span class="n">SocketStatus</span> <span class="n">status</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Processor</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="n">processor</span> <span class="o">=</span> <span class="n">connections</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">socket</span><span class="o">.</span><span class="na">getSocket</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">DISCONNECT</span> <span class="o">&amp;&amp;</span> <span class="n">processor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//nothing more to be done endpoint requested a close</span>
</span><span class='line'>        <span class="c1">//and there are no object associated with this connection</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">socket</span><span class="o">.</span><span class="na">setAsync</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">processor</span> <span class="o">=</span> <span class="n">recycledProcessors</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processor</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">processor</span> <span class="o">=</span> <span class="n">createProcessor</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">initSsl</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="n">processor</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">SocketState</span> <span class="n">state</span> <span class="o">=</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'>        <span class="k">do</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">status</span> <span class="o">==</span> <span class="n">SocketStatus</span><span class="o">.</span><span class="na">DISCONNECT</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                    <span class="o">!</span><span class="n">processor</span><span class="o">.</span><span class="na">isComet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Do nothing here, just wait for it to get recycled</span>
</span><span class='line'>                <span class="c1">// Don&#39;t do this for Comet we need to generate an end</span>
</span><span class='line'>                <span class="c1">// event (see BZ 54022)</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">processor</span><span class="o">.</span><span class="na">isAsync</span><span class="o">()</span> <span class="o">||</span>
</span><span class='line'>                    <span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">ASYNC_END</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">asyncDispatch</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">processor</span><span class="o">.</span><span class="na">isComet</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">event</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">processor</span><span class="o">.</span><span class="na">isUpgrade</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">upgradeDispatch</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">socket</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">!=</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span> <span class="o">&amp;&amp;</span> <span class="n">processor</span><span class="o">.</span><span class="na">isAsync</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">asyncPostProcess</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">UPGRADING</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Get the UpgradeInbound handler</span>
</span><span class='line'>                <span class="n">UpgradeInbound</span> <span class="n">inbound</span> <span class="o">=</span> <span class="n">processor</span><span class="o">.</span><span class="na">getUpgradeInbound</span><span class="o">();</span>
</span><span class='line'>                <span class="c1">// Release the Http11 processor to be re-used</span>
</span><span class='line'>                <span class="n">release</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="n">processor</span><span class="o">,</span> <span class="kc">false</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// Create the light-weight upgrade processor</span>
</span><span class='line'>                <span class="n">processor</span> <span class="o">=</span> <span class="n">createUpgradeProcessor</span><span class="o">(</span><span class="n">socket</span><span class="o">,</span> <span class="n">inbound</span><span class="o">);</span>
</span><span class='line'>                <span class="n">inbound</span><span class="o">.</span><span class="na">onUpgradeComplete</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">while</span> <span class="o">(</span><span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">ASYNC_END</span> <span class="o">||</span>
</span><span class='line'>                <span class="n">state</span> <span class="o">==</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">UPGRADING</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="n">state</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocketException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>              <span class="c1">// exception handler   </span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查看上面的代码，默认一个新连接的情况下，会调用<code>org.apache.coyote.Processor#process</code>方法,而Processor的实例实在<code>org.apache.coyote.AbstractProtocol.AbstractConnectionHandler#createProcessor</code>中创建的，通过查看createProcessor代码，我们发现是创建了一个org.apache.coyote.http11.Http11Processor的实例，那么接下来，我们就来看看它的process方法，因为Http11Processor继承了AbstractHttp11Processor，最终其实调用的是AbstractHttp11Processor的process方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.coyote.http11.AbstractHttp11Processor#process</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
<span class='line-number'>204</span>
<span class='line-number'>205</span>
<span class='line-number'>206</span>
<span class='line-number'>207</span>
<span class='line-number'>208</span>
<span class='line-number'>209</span>
<span class='line-number'>210</span>
<span class='line-number'>211</span>
<span class='line-number'>212</span>
<span class='line-number'>213</span>
<span class='line-number'>214</span>
<span class='line-number'>215</span>
<span class='line-number'>216</span>
<span class='line-number'>217</span>
<span class='line-number'>218</span>
<span class='line-number'>219</span>
<span class='line-number'>220</span>
<span class='line-number'>221</span>
<span class='line-number'>222</span>
<span class='line-number'>223</span>
<span class='line-number'>224</span>
<span class='line-number'>225</span>
<span class='line-number'>226</span>
<span class='line-number'>227</span>
<span class='line-number'>228</span>
<span class='line-number'>229</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="n">SocketState</span> <span class="nf">process</span><span class="o">(</span><span class="n">SocketWrapper</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="n">socketWrapper</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">RequestInfo</span> <span class="n">rp</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestProcessor</span><span class="o">();</span>
</span><span class='line'>    <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_PARSE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Setting up the I/O</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="n">setSocketWrapper</span><span class="o">(</span><span class="n">socketWrapper</span><span class="o">);</span>
</span><span class='line'>    <span class="n">getInputBuffer</span><span class="o">().</span><span class="na">init</span><span class="o">(</span><span class="n">socketWrapper</span><span class="o">,</span> <span class="n">endpoint</span><span class="o">);</span>
</span><span class='line'>    <span class="n">getOutputBuffer</span><span class="o">().</span><span class="na">init</span><span class="o">(</span><span class="n">socketWrapper</span><span class="o">,</span> <span class="n">endpoint</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Flags</span>
</span><span class='line'>    <span class="n">error</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">keepAlive</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="n">comet</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">openSocket</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">sendfileInProgress</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">readComplete</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">endpoint</span><span class="o">.</span><span class="na">getUsePolling</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">keptAlive</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">keptAlive</span> <span class="o">=</span> <span class="n">socketWrapper</span><span class="o">.</span><span class="na">isKeptAlive</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">disableKeepAlive</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">socketWrapper</span><span class="o">.</span><span class="na">setKeepAliveLeft</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while</span> <span class="o">(!</span><span class="n">error</span> <span class="o">&amp;&amp;</span> <span class="n">keepAlive</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">comet</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isAsync</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="n">upgradeInbound</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">endpoint</span><span class="o">.</span><span class="na">isPaused</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Parsing the request header</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">setRequestLineReadTimeout</span><span class="o">();</span>
</span><span class='line'>            <span class="c1">//2 </span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(!</span><span class="n">getInputBuffer</span><span class="o">().</span><span class="na">parseRequestLine</span><span class="o">(</span><span class="n">keptAlive</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">handleIncompleteRequestLineRead</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">endpoint</span><span class="o">.</span><span class="na">isPaused</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 503 - Service unavailable</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">503</span><span class="o">);</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Make sure that connectors that are non-blocking during</span>
</span><span class='line'>                <span class="c1">// header processing (NIO) only set the start time the first</span>
</span><span class='line'>                <span class="c1">// time a request is processed.</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getStartTime</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">.</span><span class="na">setStartTime</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">keptAlive</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// Set this every time in case limit has been changed via JMX</span>
</span><span class='line'>                <span class="n">request</span><span class="o">.</span><span class="na">getMimeHeaders</span><span class="o">().</span><span class="na">setLimit</span><span class="o">(</span><span class="n">endpoint</span><span class="o">.</span><span class="na">getMaxHeaderCount</span><span class="o">());</span>
</span><span class='line'>                <span class="c1">// Currently only NIO will ever return false here</span>
</span><span class='line'>                <span class="c1">// 3</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">getInputBuffer</span><span class="o">().</span><span class="na">parseHeaders</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// We&#39;ve read part of the request, don&#39;t recycle it</span>
</span><span class='line'>                    <span class="c1">// instead associate it with the socket</span>
</span><span class='line'>                    <span class="n">openSocket</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">readComplete</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">disableUploadTimeout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">setSocketTimeout</span><span class="o">(</span><span class="n">connectionUploadTimeout</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getLog</span><span class="o">().</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">getLog</span><span class="o">().</span><span class="na">debug</span><span class="o">(</span>
</span><span class='line'>                        <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;http11processor.header.parse&quot;</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="n">UserDataHelper</span><span class="o">.</span><span class="na">Mode</span> <span class="n">logMode</span> <span class="o">=</span> <span class="n">userDataHelper</span><span class="o">.</span><span class="na">getNextMode</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">logMode</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">message</span> <span class="o">=</span> <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                        <span class="s">&quot;http11processor.header.parse&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="k">switch</span> <span class="o">(</span><span class="n">logMode</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">case</span> <span class="nl">INFO_THEN_DEBUG:</span>
</span><span class='line'>                        <span class="n">message</span> <span class="o">+=</span> <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                                <span class="s">&quot;http11processor.fallToDebug&quot;</span><span class="o">);</span>
</span><span class='line'>                        <span class="c1">//$FALL-THROUGH$</span>
</span><span class='line'>                    <span class="k">case</span> <span class="nl">INFO:</span>
</span><span class='line'>                        <span class="n">getLog</span><span class="o">().</span><span class="na">info</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">case</span> <span class="nl">DEBUG:</span>
</span><span class='line'>                        <span class="n">getLog</span><span class="o">().</span><span class="na">debug</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">// 400 - Bad Request</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">400</span><span class="o">);</span>
</span><span class='line'>            <span class="n">adapter</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Setting up filters, and parse some request headers</span>
</span><span class='line'>            <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_PREPARE</span><span class="o">);</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">prepareRequest</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">getLog</span><span class="o">().</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">getLog</span><span class="o">().</span><span class="na">debug</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                            <span class="s">&quot;http11processor.request.prepare&quot;</span><span class="o">),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="c1">// 400 - Internal Server Error</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">400</span><span class="o">);</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">maxKeepAliveRequests</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">keepAlive</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">maxKeepAliveRequests</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">socketWrapper</span><span class="o">.</span><span class="na">decrementKeepAlive</span><span class="o">()</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">keepAlive</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Process the request in the adapter</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// 4</span>
</span><span class='line'>                <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_SERVICE</span><span class="o">);</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">service</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// Handle when the response was committed before a serious</span>
</span><span class='line'>                <span class="c1">// error occurred.  Throwing a ServletException should both</span>
</span><span class='line'>                <span class="c1">// set the status to 500 and set the errorException.</span>
</span><span class='line'>                <span class="c1">// If we fail here, then the response is likely already</span>
</span><span class='line'>                <span class="c1">// committed, so we can&#39;t try and set headers.</span>
</span><span class='line'>                <span class="k">if</span><span class="o">(</span><span class="n">keepAlive</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// Avoid checking twice.</span>
</span><span class='line'>                    <span class="n">error</span> <span class="o">=</span> <span class="n">response</span><span class="o">.</span><span class="na">getErrorException</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">||</span>
</span><span class='line'>                            <span class="o">(!</span><span class="n">isAsync</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                            <span class="n">statusDropsConnection</span><span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">getStatus</span><span class="o">()));</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="n">setCometTimeouts</span><span class="o">(</span><span class="n">socketWrapper</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">InterruptedIOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">HeadersTooLargeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>                <span class="c1">// The response should not have been committed but check it</span>
</span><span class='line'>                <span class="c1">// anyway to be safe</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(!</span><span class="n">response</span><span class="o">.</span><span class="na">isCommitted</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">response</span><span class="o">.</span><span class="na">reset</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">response</span><span class="o">.</span><span class="na">setHeader</span><span class="o">(</span><span class="s">&quot;Connection&quot;</span><span class="o">,</span> <span class="s">&quot;close&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="n">getLog</span><span class="o">().</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                        <span class="s">&quot;http11processor.request.process&quot;</span><span class="o">),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>                <span class="c1">// 500 - Internal Server Error</span>
</span><span class='line'>                <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>                <span class="n">adapter</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
</span><span class='line'>                <span class="n">error</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Finish the handling of the request</span>
</span><span class='line'>        <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_ENDINPUT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isAsync</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">comet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// If we know we are closing the connection, don&#39;t drain</span>
</span><span class='line'>                <span class="c1">// input. This way uploading a 100GB file doesn&#39;t tie up the</span>
</span><span class='line'>                <span class="c1">// thread if the servlet has rejected it.</span>
</span><span class='line'>                <span class="n">getInputBuffer</span><span class="o">().</span><span class="na">setSwallowInput</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">endRequest</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_ENDOUTPUT</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If there was an error, make sure the request is counted as</span>
</span><span class='line'>        <span class="c1">// and error, and update the statistics counter</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">setStatus</span><span class="o">(</span><span class="mi">500</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">updateCounters</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">isAsync</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">comet</span> <span class="o">||</span> <span class="n">error</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">getInputBuffer</span><span class="o">().</span><span class="na">nextRequest</span><span class="o">();</span>
</span><span class='line'>            <span class="n">getOutputBuffer</span><span class="o">().</span><span class="na">nextRequest</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">disableUploadTimeout</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span><span class="o">(</span><span class="n">endpoint</span><span class="o">.</span><span class="na">getSoTimeout</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setSocketTimeout</span><span class="o">(</span><span class="n">endpoint</span><span class="o">.</span><span class="na">getSoTimeout</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setSocketTimeout</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_KEEPALIVE</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">breakKeepAliveLoop</span><span class="o">(</span><span class="n">socketWrapper</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">break</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">rp</span><span class="o">.</span><span class="na">setStage</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Constants</span><span class="o">.</span><span class="na">STAGE_ENDED</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">error</span> <span class="o">||</span> <span class="n">endpoint</span><span class="o">.</span><span class="na">isPaused</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">isAsync</span><span class="o">()</span> <span class="o">||</span> <span class="n">comet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">LONG</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">isUpgrade</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">UPGRADING</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sendfileInProgress</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">SENDFILE</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">openSocket</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">readComplete</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">OPEN</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">LONG</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="n">SocketState</span><span class="o">.</span><span class="na">CLOSED</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码有点长，但是经过分析，我们还是可以看清楚主干，我已经在代码中将主流程通过数字标注了，我们就来一一看看标注了数字的地方：</p>

<ol>
<li>标注1的地方（第7行）将Socket的输入流和输出流通过InternalInputBuffer进行了包装，InternalInputBuffer是在Http11Processor的构造函数中初始化的。</li>
<li>标注2的地方（第35行）调用了InternalInputBuffer的parseRequesLine方法解析http请求的请求行。(关于http请求行和请求头请看下文解释)</li>
<li>标注3的地方（第57行）调用了InternalInputBuffer的prarseHeaders方法解析http请求的请求头。解析完了以后，会将http header保存在<code>org.apache.tomcat.util.http.MimeHeaders</code></li>
<li>标注4的地方（第128行）调用了org.apache.coyote.Adapter#service方法，次方法就会最终调用到具体的Servlet.</li>
</ol>


<p>对于Http请求行和请求头，大家可以看下面的例子：</p>

<figure class='code'><figcaption><span>Http get request</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">GET</span> <span class="o">/</span><span class="nx">contextpath</span><span class="o">/</span><span class="nx">querystring</span> <span class="nx">HTTP</span><span class="o">/</span><span class="mf">1.1</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Host</span><span class="o">:</span> <span class="mf">127.0</span><span class="p">.</span><span class="mf">0.1</span><span class="o">:</span><span class="mi">8080</span>
</span><span class='line'>
</span><span class='line'><span class="nx">User</span><span class="o">-</span><span class="nx">Agent</span><span class="o">:</span> <span class="nx">Mozilla</span><span class="o">/</span><span class="mf">5.0</span> <span class="p">(</span><span class="nx">Macintosh</span><span class="p">;</span> <span class="nx">Intel</span> <span class="nx">Mac</span> <span class="nx">OS</span> <span class="nx">X</span> <span class="mf">10.9</span><span class="p">;</span> <span class="nx">rv</span><span class="o">:</span><span class="mf">23.0</span><span class="p">)</span> <span class="nx">Gecko</span><span class="o">/</span><span class="mi">20100101</span> <span class="nx">Firefox</span><span class="o">/</span><span class="mf">23.0</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Accept</span><span class="o">:</span> <span class="nx">text</span><span class="o">/</span><span class="nx">html</span><span class="p">,</span><span class="nx">application</span><span class="o">/</span><span class="nx">xhtml</span><span class="o">+</span><span class="nx">xml</span><span class="p">,</span><span class="nx">application</span><span class="o">/</span><span class="nx">xml</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span><span class="o">*</span><span class="err">/*;q=0.8</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Accept</span><span class="o">-</span><span class="nx">Language</span><span class="o">:</span> <span class="nx">en</span><span class="o">-</span><span class="nx">US</span><span class="p">,</span><span class="nx">en</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mf">0.5</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Accept</span><span class="o">-</span><span class="nx">Encoding</span><span class="o">:</span> <span class="nx">gzip</span><span class="p">,</span> <span class="nx">deflate</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Cookie</span><span class="o">:</span> <span class="nx">JSESSIONID</span><span class="o">=</span><span class="mi">9</span><span class="nx">F5897FEF3CDBCB234C050C132DCAE52</span><span class="p">;</span> <span class="nx">__atuvc</span><span class="o">=</span><span class="mi">384</span><span class="o">%</span><span class="mi">7</span><span class="nx">C39</span><span class="p">;</span> <span class="nx">__utma</span><span class="o">=</span><span class="mf">96992031.358732763</span><span class="p">.</span><span class="mf">1380383869.1381468490</span><span class="p">.</span><span class="mf">1381554710.38</span><span class="p">;</span> <span class="nx">__utmz</span><span class="o">=</span><span class="mf">96992031.1380383869</span><span class="p">.</span><span class="mf">1.1</span><span class="p">.</span><span class="nx">utmcsr</span><span class="o">=</span><span class="p">(</span><span class="nx">direct</span><span class="p">)</span><span class="o">|</span><span class="nx">utmccn</span><span class="o">=</span><span class="p">(</span><span class="nx">direct</span><span class="p">)</span><span class="o">|</span><span class="nx">utmcmd</span><span class="o">=</span><span class="p">(</span><span class="nx">none</span><span class="p">);</span> <span class="nx">Hm_lvt_21e144d0df165d6556d664e2836dadfe</span><span class="o">=</span><span class="mi">1381330561</span><span class="p">,</span><span class="mi">1381368826</span><span class="p">,</span><span class="mi">1381395666</span><span class="p">,</span><span class="mi">1381554711</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Connection</span><span class="o">:</span> <span class="nx">keep</span><span class="o">-</span><span class="nx">alive</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Cache</span><span class="o">-</span><span class="nx">Control</span><span class="o">:</span> <span class="nx">max</span><span class="o">-</span><span class="nx">age</span><span class="o">=</span><span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>在上面的Http协议get请求中，其中请求行就是第一行，<code>GET /contextpath/querystring HTTP/1.1</code>,余下的都是请求头。这里面需要注意根据Http协议的要求，请求行末尾必须是CRLF，而请求行与请求头，以及请求头之间必须用空行隔开，而空行也必须只包含CRLF。对于Http协议请求头的规范可以参考<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html">这里</a>。</p>

<p>通过上面的描述，我们可以整理出如下的一个请求解析流程：</p>

<figure class='code'><figcaption><span>Request http header parse</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="o">.</span><span class="na">Acceptor</span><span class="err">#</span><span class="n">run</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="o">.</span><span class="na">SocketProcessor</span><span class="err">#</span><span class="n">run</span><span class="o">(</span><span class="err">请求处理线程池中运行</span><span class="o">)</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">AbstractProtocol</span><span class="o">.</span><span class="na">AbstractConnectionHandler</span><span class="err">#</span><span class="n">process</span>
</span><span class='line'><span class="o">---&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">AbstractHttp11Processor</span><span class="err">#</span><span class="n">process</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">InternalInputBuffer</span><span class="err">#</span><span class="n">parseRequestLine</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">InternalInputBuffer</span><span class="err">#</span><span class="n">parseHeaders</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">CoyoteAdapter</span><span class="err">#</span><span class="n">service</span>
</span></code></pre></td></tr></table></div></figure>


<h1>如何转发到Servlet</h1>

<p>上面我们说了一个请求过来是如何根据http协议解析Socket的数据，最终将生成<code>org.apache.coyote.Request</code>和<code>org.apache.coyote.Response</code>，接下来我们就来看看request,reponse是如何一步步的进入最终的Servlet进行处理的。这一步的入口就是CoyoteAdapter的service方法。
接下来我们就来看看它的代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.CoyoteAdapter#service</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">service</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Request</span> <span class="n">req</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">Response</span> <span class="n">res</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">Request</span> <span class="n">request</span> <span class="o">=</span> <span class="o">(</span><span class="n">Request</span><span class="o">)</span> <span class="n">req</span><span class="o">.</span><span class="na">getNote</span><span class="o">(</span><span class="n">ADAPTER_NOTES</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Response</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="n">Response</span><span class="o">)</span> <span class="n">res</span><span class="o">.</span><span class="na">getNote</span><span class="o">(</span><span class="n">ADAPTER_NOTES</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//1 </span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">request</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Create objects</span>
</span><span class='line'>        <span class="n">request</span> <span class="o">=</span> <span class="n">connector</span><span class="o">.</span><span class="na">createRequest</span><span class="o">();</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">setCoyoteRequest</span><span class="o">(</span><span class="n">req</span><span class="o">);</span>
</span><span class='line'>        <span class="n">response</span> <span class="o">=</span> <span class="n">connector</span><span class="o">.</span><span class="na">createResponse</span><span class="o">();</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setCoyoteResponse</span><span class="o">(</span><span class="n">res</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Link objects</span>
</span><span class='line'>        <span class="n">request</span><span class="o">.</span><span class="na">setResponse</span><span class="o">(</span><span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">setRequest</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set as notes</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="na">setNote</span><span class="o">(</span><span class="n">ADAPTER_NOTES</span><span class="o">,</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'>        <span class="n">res</span><span class="o">.</span><span class="na">setNote</span><span class="o">(</span><span class="n">ADAPTER_NOTES</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Set query string encoding</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="na">getParameters</span><span class="o">().</span><span class="na">setQueryStringEncoding</span>
</span><span class='line'>            <span class="o">(</span><span class="n">connector</span><span class="o">.</span><span class="na">getURIEncoding</span><span class="o">());</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">connector</span><span class="o">.</span><span class="na">getXpoweredBy</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">response</span><span class="o">.</span><span class="na">addHeader</span><span class="o">(</span><span class="s">&quot;X-Powered-By&quot;</span><span class="o">,</span> <span class="n">POWERED_BY</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">comet</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">async</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Parse and set Catalina and configuration specific</span>
</span><span class='line'>        <span class="c1">// request parameters</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="na">getRequestProcessor</span><span class="o">().</span><span class="na">setWorkerThreadName</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getName</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">//2</span>
</span><span class='line'>        <span class="kt">boolean</span> <span class="n">postParseSuccess</span> <span class="o">=</span> <span class="n">postParseRequest</span><span class="o">(</span><span class="n">req</span><span class="o">,</span> <span class="n">request</span><span class="o">,</span> <span class="n">res</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">postParseSuccess</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//check valves if we support async</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">setAsyncSupported</span><span class="o">(</span><span class="n">connector</span><span class="o">.</span><span class="na">getService</span><span class="o">().</span><span class="na">getContainer</span><span class="o">().</span><span class="na">getPipeline</span><span class="o">().</span><span class="na">isAsyncSupported</span><span class="o">());</span>
</span><span class='line'>            <span class="c1">// Calling the container</span>
</span><span class='line'>            <span class="c1">//3</span>
</span><span class='line'>            <span class="n">connector</span><span class="o">.</span><span class="na">getService</span><span class="o">().</span><span class="na">getContainer</span><span class="o">().</span><span class="na">getPipeline</span><span class="o">().</span><span class="na">getFirst</span><span class="o">().</span><span class="na">invoke</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// other code</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// other code</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Ignore</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">req</span><span class="o">.</span><span class="na">getRequestProcessor</span><span class="o">().</span><span class="na">setWorkerThreadName</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
</span><span class='line'>        <span class="c1">// Recycle the wrapper request and response</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">comet</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">async</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">recycle</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Clear converters so that the minimum amount of memory</span>
</span><span class='line'>            <span class="c1">// is used by this processor</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">clearEncoders</span><span class="o">();</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">clearEncoders</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了可以清楚的看到主流程，上面删除了一部分非主流程的代码，接下来我们逐一分析一下标注了数字的地方：</p>

<ol>
<li>标注1的代码(第9行)将<code>org.apache.coyote.Request</code>和<code>org.apache.coyote.Response</code>对象转变为<code>org.apache.catalina.connector.Request</code>,<code>org.apache.catalina.connector.Response</code>类型的对象。其中coyote包中的Request仅仅只是包含了解析出来的http协议的数据，而connector包中的Request才是真正Servlet容器中的HttpServletRequest，它里面包含了完成请求需要的host,context和wrapper信息,在这里每一个wrapper其实都对应web.xml配置的一个Servlet。</li>
<li>标注2（第44行）的代码调用了postParseRequest方法，这个方法里面做的事情非常多，但是最终都是为了根据Request对象找到对应的Host,Conext和Wrapper对象，也就是说最终要清楚这个请求应该由哪个Servlet来处理。</li>
<li>标注3（第50）的代码将已经设置好了Host,Context,Wrapper对象的Request通过Pipeline机制链式传递给最终的Servlet。</li>
</ol>


<p>上面只是从整体上告诉了读者<code>org.apache.catalina.connector.CoyoteAdapter#service</code>方法做的事情，接下来我们进一步分解每一个步骤都具体做了哪些工作。第一步比较简单，大家可以自己阅读，我们关键来看2，3步。首先我们来看看postParseRequest方法。
通过分析org.apache.catalina.connector.CoyoteAdapter#postParseRequest的代码，我们会发现它最终是通过<code>org.apache.tomcat.util.http.mapper.Mapper#map</code>方法来达到匹配请求到对应的Context和Wrapper(Servlet包装类)目的。具体代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.CoyoteAdapter#postParseRequest</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">connector</span><span class="o">.</span><span class="na">getMapper</span><span class="o">().</span><span class="na">map</span><span class="o">(</span><span class="n">serverName</span><span class="o">,</span> <span class="n">decodedURI</span><span class="o">,</span> <span class="n">version</span><span class="o">,</span>
</span><span class='line'>                                      <span class="n">request</span><span class="o">.</span><span class="na">getMappingData</span><span class="o">());</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">setContext</span><span class="o">((</span><span class="n">Context</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getMappingData</span><span class="o">().</span><span class="na">context</span><span class="o">);</span>
</span><span class='line'>            <span class="n">request</span><span class="o">.</span><span class="na">setWrapper</span><span class="o">((</span><span class="n">Wrapper</span><span class="o">)</span> <span class="n">request</span><span class="o">.</span><span class="na">getMappingData</span><span class="o">().</span><span class="na">wrapper</span><span class="o">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>那我们再来看看此方法。通过分析它的代码，我们发现最终其实是调用了几个<code>internalMap**</code>方法将找到的Context,Wrapper设置到org.apache.catalina.connector.Request对象的org.apache.tomcat.util.http.mapper.MappingData类型的属性中,map方法执行完以后，然后接下来就从MappingData中获取已经找到的Context和Wrapper，再设置到Request的context和wrapper中。</p>

<p>接下来我们再来分析第3步，第3步通过pipeline链式调用机制最终调用了Servlet对象，而对于pipeline其实是运用了责任链模式，它将各个阀门链接起来，然后一步步的调用，而至于有多少个阀门（Valve）对象，主要来源于两个地方，一个是conf/server.xml中配置的valve，我们知道所有的容器都是支持pipeline机制的，另外一个就是每一个容器的构造其中自己初始化的阀门对象。接下来一一看一下。对于StandardEngine来说有一个与之对应的StandardEngineValve，对于StandardHost有一个StandardHostValve与之对应，StandardContext有一个StandardContextValve与之对应，StandardWrapper与StandardWrapperValve对应,通过分析代码，我们可以得到如下的一个调用链。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngineValve</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">AccessLogValve</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">---&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">valves</span><span class="o">.</span><span class="na">ErrorReportValve</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHostValve</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">authenticator</span><span class="o">.</span><span class="na">AuthenticatorBase</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">------&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardContextValve</span><span class="err">#</span><span class="n">invoke</span>
</span><span class='line'><span class="o">-------&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardWrapperValve</span><span class="err">#</span><span class="n">invoke</span>
</span></code></pre></td></tr></table></div></figure>


<p>上述的调用栈中，最后会调用到StandardWrapperValve，它其实也是最终调用Servlet的地方，接下来我们就来看看它的代码：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">invoke</span><span class="o">(</span><span class="n">Request</span> <span class="n">request</span><span class="o">,</span> <span class="n">Response</span> <span class="n">response</span><span class="o">)</span>
</span><span class='line'>    <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Initialize local variables we may need</span>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">unavailable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Throwable</span> <span class="n">throwable</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">// This should be a Request attribute...</span>
</span><span class='line'>    <span class="kt">long</span> <span class="n">t1</span><span class="o">=</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
</span><span class='line'>    <span class="n">requestCount</span><span class="o">++;</span>
</span><span class='line'>    <span class="n">StandardWrapper</span> <span class="n">wrapper</span> <span class="o">=</span> <span class="o">(</span><span class="n">StandardWrapper</span><span class="o">)</span> <span class="n">getContainer</span><span class="o">();</span>
</span><span class='line'>    <span class="n">Servlet</span> <span class="n">servlet</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Context</span> <span class="n">context</span> <span class="o">=</span> <span class="o">(</span><span class="n">Context</span><span class="o">)</span> <span class="n">wrapper</span><span class="o">.</span><span class="na">getParent</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Allocate a servlet instance to process this request</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//1</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">unavailable</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">servlet</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="na">allocate</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">UnavailableException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">container</span><span class="o">.</span><span class="na">getLogger</span><span class="o">().</span><span class="na">error</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardWrapper.allocateException&quot;</span><span class="o">,</span>
</span><span class='line'>                        <span class="n">wrapper</span><span class="o">.</span><span class="na">getName</span><span class="o">()),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">long</span> <span class="n">available</span> <span class="o">=</span> <span class="n">wrapper</span><span class="o">.</span><span class="na">getAvailable</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">available</span> <span class="o">&gt;</span> <span class="mi">0L</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">available</span> <span class="o">&lt;</span> <span class="n">Long</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">setDateHeader</span><span class="o">(</span><span class="s">&quot;Retry-After&quot;</span><span class="o">,</span> <span class="n">available</span><span class="o">);</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_SERVICE_UNAVAILABLE</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardWrapper.isUnavailable&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">wrapper</span><span class="o">.</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">available</span> <span class="o">==</span> <span class="n">Long</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span><span class="n">HttpServletResponse</span><span class="o">.</span><span class="na">SC_NOT_FOUND</span><span class="o">,</span>
</span><span class='line'>                       <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardWrapper.notFound&quot;</span><span class="o">,</span>
</span><span class='line'>                                    <span class="n">wrapper</span><span class="o">.</span><span class="na">getName</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="c1">// other code</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">MessageBytes</span> <span class="n">requestPathMB</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getRequestPathMB</span><span class="o">();</span>
</span><span class='line'>    <span class="n">DispatcherType</span> <span class="n">dispatcherType</span> <span class="o">=</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">REQUEST</span><span class="o">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getDispatcherType</span><span class="o">()==</span><span class="n">DispatcherType</span><span class="o">.</span><span class="na">ASYNC</span><span class="o">)</span> <span class="n">dispatcherType</span> <span class="o">=</span> <span class="n">DispatcherType</span><span class="o">.</span><span class="na">ASYNC</span><span class="o">;</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">DISPATCHER_TYPE_ATTR</span><span class="o">,</span><span class="n">dispatcherType</span><span class="o">);</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">Globals</span><span class="o">.</span><span class="na">DISPATCHER_REQUEST_PATH_ATTR</span><span class="o">,</span>
</span><span class='line'>            <span class="n">requestPathMB</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// Create the filter chain for this request</span>
</span><span class='line'>    <span class="n">ApplicationFilterFactory</span> <span class="n">factory</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">ApplicationFilterFactory</span><span class="o">.</span><span class="na">getInstance</span><span class="o">();</span>
</span><span class='line'>    <span class="n">ApplicationFilterChain</span> <span class="n">filterChain</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">factory</span><span class="o">.</span><span class="na">createFilterChain</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">wrapper</span><span class="o">,</span> <span class="n">servlet</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Reset comet flag value after creating the filter chain</span>
</span><span class='line'>    <span class="n">request</span><span class="o">.</span><span class="na">setComet</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Call the filter chain for this request</span>
</span><span class='line'>    <span class="c1">// NOTE: This also calls the servlet&#39;s service() method</span>
</span><span class='line'>    <span class="c1">// 2 </span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">((</span><span class="n">servlet</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">filterChain</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Swallow output if needed</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">context</span><span class="o">.</span><span class="na">getSwallowOutput</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">SystemLogHandler</span><span class="o">.</span><span class="na">startCapture</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">isAsyncDispatching</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">//TODO SERVLET3 - async</span>
</span><span class='line'>                        <span class="o">((</span><span class="n">AsyncContextImpl</span><span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAsyncContext</span><span class="o">()).</span><span class="na">doInternalDispatch</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">comet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilterEvent</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getEvent</span><span class="o">());</span>
</span><span class='line'>                        <span class="n">request</span><span class="o">.</span><span class="na">setComet</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getRequest</span><span class="o">(),</span>
</span><span class='line'>                                <span class="n">response</span><span class="o">.</span><span class="na">getResponse</span><span class="o">());</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">String</span> <span class="n">log</span> <span class="o">=</span> <span class="n">SystemLogHandler</span><span class="o">.</span><span class="na">stopCapture</span><span class="o">();</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">log</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">log</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">context</span><span class="o">.</span><span class="na">getLogger</span><span class="o">().</span><span class="na">info</span><span class="o">(</span><span class="n">log</span><span class="o">);</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">isAsyncDispatching</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">//TODO SERVLET3 - async</span>
</span><span class='line'>                    <span class="o">((</span><span class="n">AsyncContextImpl</span><span class="o">)</span><span class="n">request</span><span class="o">.</span><span class="na">getAsyncContext</span><span class="o">()).</span><span class="na">doInternalDispatch</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">comet</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">request</span><span class="o">.</span><span class="na">setComet</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilterEvent</span><span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getEvent</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span>
</span><span class='line'>                        <span class="o">(</span><span class="n">request</span><span class="o">.</span><span class="na">getRequest</span><span class="o">(),</span> <span class="n">response</span><span class="o">.</span><span class="na">getResponse</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
</span><span class='line'>    <span class="c1">// other code</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>为了节省版面，上面的代码已经删除非主流程的代码。接下来我们逐一分析一下标注了数字的地方：</p>

<ol>
<li>标注1（第17行）的代码实例化了Servlet对象，在实例化的过程中使用了Java双检查锁的机制来实例化Servlet，有兴趣的童鞋可以去看看org.apache.catalina.core.StandardWrapper#allocate的代码。这里需要注意的是在Servlet2.4规范之前，有一个singleThreadMode模型，这个机制类似与之前EJB的无状态会话Bean机制，每个线程过来会通过实例池中取出一个实例来完成响应。在Servlet规范2.4之后，单线程模型已经被废除了。具体细节可以参考<a href="http://docs.oracle.com/javaee/5/api/javax/servlet/SingleThreadModel.html">这里</a> .</li>
<li>标注2（第55行）的代码其实调用了大家熟悉的Servlet的过滤器链，过滤器链最终就会调用到Servlet.</li>
</ol>


<p>最后，咋们再来看看过滤器滤链的处理，来看看<code>org.apache.catalina.core.ApplicationFilterChain#doFilter</code>，doFilter方法中会根据filterConfig中取的web.xml配置的过滤器，然后一个个调用，等每个过滤器执行完了以后，最终就会调用到Servlet的Service方法。</p>

<p>通过上面的分析，其实我们已经清楚了一个请求过来以后，Tomcat是如何一步步处理的。我们再来做一个总体的总结：</p>

<ol>
<li>用户浏览器发送请求，请求会发送到对应的Connector监听的Socket端口。</li>
<li>Connector从Socket流中获取数据，然后根据Http协议将其解析为Request和Reponse对象</li>
<li>找到Request对象对应的Host,Context,Wrapper</li>
<li>调用最终的Servelt的service进行处理。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat关闭过程（Tomcat源代码阅读系列之四）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/"/>
    <updated>2013-10-21T14:45:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第四篇文章，在阅读此文之前，建议先读前三篇：<br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a></p>

<p>我们在<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a>一文中已经知道Tomcat启动以后，会启动6条线程，他们分别如下：</p>

<!-- more -->


<figure class='code'><figcaption><span>Tomcat threads</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="s">&quot;ajp-bio-8009-AsyncTimeout&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8738afe000</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x115ad6000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">115</span><span class="n">ad5000</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;ajp-bio-8009-Acceptor-0&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8738b05800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1159d3000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">1159</span><span class="n">d2000</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;http-bio-8080-AsyncTimeout&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735acb800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1158d0000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">1158</span><span class="n">cf000</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;http-bio-8080-Acceptor-0&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735acd000</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1157cd000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">1157</span><span class="n">cc000</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;ContainerBackgroundProcessor[StandardEngine[Catalina]]&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8732850800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x111203000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">111202000</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;main&quot;</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735000800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x10843e000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">10843</span><span class="n">c000</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中5条是Dameon线程，而对于Java程序来说，当所有非Dameon程序都终止的时候，Jvm就会退出，因此要想终止Tomcat就只需要将main这一条非Dameon线程终止了即可。</p>

<blockquote><p>Dameon线程又叫后台或者守护线程，它负责在程序运行期提供一种通用服务的线程，比如垃圾收集线程，非Dameon线程和Dameon线程的区别就在于当程序中所有的非Daemon线程都终止的时候，Jvm会杀死余下的Dameon线程，然后退出。</p></blockquote>

<p>接下来，我们就来一步步的分析如何来让main线程终止，要想终止它，我们还是得从Tomcat的启动中来寻找答案，我们在分析Tomcat容器启动的时候，在Catalina#start中有一段代码，我们没有关注，接下来就来看看这段代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Catalina#start</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// ignore other code </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Register shutdown hook</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">useShutdownHook</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">shutdownHook</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">shutdownHook</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CatalinaShutdownHook</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">Runtime</span><span class="o">.</span><span class="na">getRuntime</span><span class="o">().</span><span class="na">addShutdownHook</span><span class="o">(</span><span class="n">shutdownHook</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If JULI is being used, disable JULI&#39;s shutdown hook since</span>
</span><span class='line'>        <span class="c1">// shutdown hooks run in parallel and log messages may be lost</span>
</span><span class='line'>        <span class="c1">// if JULI&#39;s hook completes before the CatalinaShutdownHook()</span>
</span><span class='line'>        <span class="n">LogManager</span> <span class="n">logManager</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogManager</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logManager</span> <span class="k">instanceof</span> <span class="n">ClassLoaderLogManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">((</span><span class="n">ClassLoaderLogManager</span><span class="o">)</span> <span class="n">logManager</span><span class="o">).</span><span class="na">setUseShutdownHook</span><span class="o">(</span>
</span><span class='line'>                    <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">await</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">await</span><span class="o">();</span>
</span><span class='line'>        <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这里就是Tomcat关闭流程的入口代码了。我在代码中标注了两处，我们首先来看标注1的地方。标注1的代码，我们用到了Jvm的shutdownHook机制。对于shutdownHook大家可以参考<a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Runtime.html#addShutdownHook%28java.lang.Thread%29">这个连接</a>,我这里做一个简单的介绍，shutdown hook是一个已经初始化但是还没有启动的线程，当Jvm关闭的时候，它会启动并并发的运行所有已经注册过的shutdown hooks，知道了这点，我们就来看看<code>CatalinaShutdownHook</code>线程做了什么事情？它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Catalina.CatalinaShutdownHook#run</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getServer</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Catalina</span><span class="o">.</span><span class="na">this</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;catalina.shutdownHookFail&quot;</span><span class="o">),</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// If JULI is used, shut JULI down *after* the server shuts down</span>
</span><span class='line'>        <span class="c1">// so log messages aren&#39;t lost</span>
</span><span class='line'>        <span class="n">LogManager</span> <span class="n">logManager</span> <span class="o">=</span> <span class="n">LogManager</span><span class="o">.</span><span class="na">getLogManager</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logManager</span> <span class="k">instanceof</span> <span class="n">ClassLoaderLogManager</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="o">((</span><span class="n">ClassLoaderLogManager</span><span class="o">)</span> <span class="n">logManager</span><span class="o">).</span><span class="na">shutdown</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以清楚的看到调用了Catalina的stop方法。而Catalina#stop方法最终又是调用了StandardServer#stop方法和destroy方法。通过这里，我们知道Tomcat利用了shutdown hook机制来在Jvm关闭的时候关闭各个组件。但是Jvm又是何时退出的呢？这就要来看标注为2的代码了。</p>

<p>接下来我们再来看看标注2的地方：在标注为2的代码中，首先判断了await属性是否为true,如果为true就调用await()，调用完以后，再调用stop方法，接下来我们就来看await()方法,而catalina的awit方法又调用了StandardServer#awit方法，它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.StandardServer#await</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">await</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set up a server socket to wait on</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">awaitSocket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerSocket</span><span class="o">(</span><span class="n">port</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span>
</span><span class='line'>                <span class="n">InetAddress</span><span class="o">.</span><span class="na">getByName</span><span class="o">(</span><span class="n">address</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;StandardServer.await: create[&quot;</span> <span class="o">+</span> <span class="n">address</span>
</span><span class='line'>                           <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">port</span>
</span><span class='line'>                           <span class="o">+</span> <span class="s">&quot;]: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">awaitThread</span> <span class="o">=</span> <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Loop waiting for a connection and a valid command</span>
</span><span class='line'>        <span class="k">while</span> <span class="o">(!</span><span class="n">stopAwait</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="n">awaitSocket</span><span class="o">;</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">serverSocket</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Wait for the next connection</span>
</span><span class='line'>            <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>            <span class="n">StringBuilder</span> <span class="n">command</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="o">();</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">InputStream</span> <span class="n">stream</span><span class="o">;</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">socket</span> <span class="o">=</span> <span class="n">serverSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">socket</span><span class="o">.</span><span class="na">setSoTimeout</span><span class="o">(</span><span class="mi">10</span> <span class="o">*</span> <span class="mi">1000</span><span class="o">);</span>  <span class="c1">// Ten seconds</span>
</span><span class='line'>                    <span class="n">stream</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="na">getInputStream</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">AccessControlException</span> <span class="n">ace</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;StandardServer.accept security exception: &quot;</span>
</span><span class='line'>                            <span class="o">+</span> <span class="n">ace</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">ace</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">continue</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">stopAwait</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="c1">// Wait was aborted with socket.close()</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;StandardServer.await: accept: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                    <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>                <span class="c1">// Read a set of characters from the socket</span>
</span><span class='line'>                <span class="kt">int</span> <span class="n">expected</span> <span class="o">=</span> <span class="mi">1024</span><span class="o">;</span> <span class="c1">// Cut off to avoid DoS attack</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">expected</span> <span class="o">&lt;</span> <span class="n">shutdown</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">random</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                        <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Random</span><span class="o">();</span>
</span><span class='line'>                    <span class="n">expected</span> <span class="o">+=</span> <span class="o">(</span><span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">()</span> <span class="o">%</span> <span class="mi">1024</span><span class="o">);</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>                <span class="k">while</span> <span class="o">(</span><span class="n">expected</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="kt">int</span> <span class="n">ch</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">ch</span> <span class="o">=</span> <span class="n">stream</span><span class="o">.</span><span class="na">read</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;StandardServer.await: read: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>                        <span class="n">ch</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">ch</span> <span class="o">&lt;</span> <span class="mi">32</span><span class="o">)</span>  <span class="c1">// Control character or EOF terminates loop</span>
</span><span class='line'>                        <span class="k">break</span><span class="o">;</span>
</span><span class='line'>                    <span class="n">command</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="kt">char</span><span class="o">)</span> <span class="n">ch</span><span class="o">);</span>
</span><span class='line'>                    <span class="n">expected</span><span class="o">--;</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Close the socket now that we are done with it</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="k">if</span> <span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                        <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                    <span class="o">}</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Ignore</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Match against our command string</span>
</span><span class='line'>            <span class="kt">boolean</span> <span class="n">match</span> <span class="o">=</span> <span class="n">command</span><span class="o">.</span><span class="na">toString</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">shutdown</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">match</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;standardServer.shutdownViaPort&quot;</span><span class="o">));</span>
</span><span class='line'>                <span class="k">break</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span>
</span><span class='line'>                <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;StandardServer.await: Invalid command &#39;&quot;</span>
</span><span class='line'>                        <span class="o">+</span> <span class="n">command</span><span class="o">.</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;&#39; received&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ServerSocket</span> <span class="n">serverSocket</span> <span class="o">=</span> <span class="n">awaitSocket</span><span class="o">;</span>
</span><span class='line'>        <span class="n">awaitThread</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">awaitSocket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Close the server socket and return</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">serverSocket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">serverSocket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="c1">// Ignore</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看出在配置的端口上通过ServerSocket来监听一个请求的到来，如果请求的字符串和配置的字符串相同的话即跳出循环，这样的话就会运行stop方法，运行完了以后，main线程就退出了。</p>

<blockquote><p>这里ServerSocket监听的端口，以及对比的字符串都是在conf/server.xml中配置的，缺省情况下，配置如下：<Server port="8005" shutdown="SHUTDOWN"></Server>,从这里可以看出监听端口为8005,关闭请求发送的字符串为SHUTDOWN.</p></blockquote>

<p>看到这里，我们基本上已经清楚了Tomcat的关闭就是通过在8005端口，发送一个SHUTDOWN字符串。那么我们就来实验一下。首先启动Tomcat，然后在终端运行如下指令：</p>

<figure class='code'><figcaption><span>telnet</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>telnet 127.0.0.1 8005
</span><span class='line'>Trying 127.0.0.1...
</span><span class='line'>Connected to localhost.
</span><span class='line'>Escape character is <span class="s1">&#39;^]&#39;</span>.
</span><span class='line'>SHUTDOWN
</span><span class='line'>Connection closed by foreign host.
</span></code></pre></td></tr></table></div></figure>


<p>运行telnet命令，并发送SHUTDOWN字符串以后，我们发现Tomcat就会退出await方法，然后执行stop方法最终停止。</p>

<p>但是一般情况下，我们停止tomcat都不会像上面那种方式来关闭，我们一般有两种方式来关闭：</p>

<ol>
<li>ps aux | grep java ,kill -9 <pid><br/>
对于这种方式，比较简单粗暴会直接干掉进程，不过这种简单粗暴的方式我也经常用。</li>
<li>运行shutdown.sh<br/>
这种方式其实最终也是向server发送了一个SHUTDOWN字符串，我们接下来分析下第二种情况。<br/>
查看shutdown.sh最终是调用了 catalina.sh，并传递了stop参数。查看catalina.sh脚本，最终其实是调用了 <code>org.apache.catalina.startup.Bootstrap#main</code>,并传递参数stop.我们查看Bootstrap#main方法，发现会调用<code>org.apache.catalina.startup.Bootstrap#stopServer</code>,而Bootstrap#stopServer通过反射调用了<code>org.apache.catalina.startup.Catalina#stopServer</code>,我们来看看Catalina#stopServer方法，代码如下：</li>
</ol>


<figure class='code'><figcaption><span>org.apache.catalina.startup.Catalina#stopServer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">stopServer</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">arguments</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">arguments</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">arguments</span><span class="o">(</span><span class="n">arguments</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Server</span> <span class="n">s</span> <span class="o">=</span> <span class="n">getServer</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="k">if</span><span class="o">(</span> <span class="n">s</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Create and execute our Digester</span>
</span><span class='line'>        <span class="n">Digester</span> <span class="n">digester</span> <span class="o">=</span> <span class="n">createStopDigester</span><span class="o">();</span>
</span><span class='line'>        <span class="n">digester</span><span class="o">.</span><span class="na">setClassLoader</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">getContextClassLoader</span><span class="o">());</span>
</span><span class='line'>        <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="n">configFile</span><span class="o">();</span>
</span><span class='line'>        <span class="n">FileInputStream</span> <span class="n">fis</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">InputSource</span> <span class="n">is</span> <span class="o">=</span>
</span><span class='line'>                <span class="k">new</span> <span class="nf">InputSource</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">toURI</span><span class="o">().</span><span class="na">toURL</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>            <span class="n">fis</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>            <span class="n">is</span><span class="o">.</span><span class="na">setByteStream</span><span class="o">(</span><span class="n">fis</span><span class="o">);</span>
</span><span class='line'>            <span class="n">digester</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="n">digester</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">is</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Catalina.stop: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">fis</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">fis</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Ignore</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Server object already present. Must be running as a service</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">s</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">LifecycleException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Catalina.stop: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Stop the existing server</span>
</span><span class='line'>    <span class="n">s</span> <span class="o">=</span> <span class="n">getServer</span><span class="o">();</span>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getPort</span><span class="o">()&gt;</span><span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Socket</span> <span class="n">socket</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="n">OutputStream</span> <span class="n">stream</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Socket</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(),</span> <span class="n">s</span><span class="o">.</span><span class="na">getPort</span><span class="o">());</span>
</span><span class='line'>            <span class="n">stream</span> <span class="o">=</span> <span class="n">socket</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">shutdown</span> <span class="o">=</span> <span class="n">s</span><span class="o">.</span><span class="na">getShutdown</span><span class="o">();</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">shutdown</span><span class="o">.</span><span class="na">length</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">stream</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">shutdown</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">stream</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ConnectException</span> <span class="n">ce</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;catalina.stopServer.connectException&quot;</span><span class="o">,</span>
</span><span class='line'>                                   <span class="n">s</span><span class="o">.</span><span class="na">getAddress</span><span class="o">(),</span>
</span><span class='line'>                                   <span class="n">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">getPort</span><span class="o">())));</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Catalina.stop: &quot;</span><span class="o">,</span> <span class="n">ce</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Catalina.stop: &quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">stream</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">stream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Ignore</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">socket</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">socket</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="c1">// Ignore</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;catalina.stopServer&quot;</span><span class="o">));</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们来分析一下标注的地方：</p>

<ol>
<li>标注1的代码，此时因为是新开了一个进程,并且conf/server.xml还没有解析，因此s是NULL，通过Digester解析conf/server.xml，最终生成了未初始化的StandardServer对象。</li>
<li>标注2的代码，向standardServer.getPort返回的端口（其实这里面返回即是conf/server.xml中Server根节点配置的port和shutdown属性）发送了standardServer.getShutdown()返回的字符串，而默认情况下这个字符串就是SHUTDOWN.</li>
</ol>


<p>分析到这里，我想大家已经清楚了Tomcat的关闭流程，我们再来总结一下：
Tomcat启动的时候的主线程会在8005端口（默认配置，可以更改）上建立socket监听，当关闭的时候，最终其实就是新起了一个进程然后向Tomcat主线程监听的8005端口发送了一个SHUTDOWN字符串，这样主线程就会结束了，主线程结束了以后，因为其它的线程都是dameon线程，这样依赖Jvm就会退出了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat启动过程（Tomcat源代码阅读系列之三）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/"/>
    <updated>2013-10-17T11:03:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/17/tomcat-start-process</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第三篇文章，在阅读此文之前，建议先读前面的两篇：<br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a></p>

<p>本篇我们来一起分析一下Tomcat的启动过程，启动过程涉及到了Tomcat组件的生命周期管理，本文将从<strong>Tomcat组件生命周期管理</strong>,<strong>Tomcat启动的总过程</strong>，<strong>Tomcat启动过程关键步骤分析</strong>三个方面来进行描述。</p>

<!-- more -->


<h1>Tomcat组件生命周期管理</h1>

<p>在<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>中，我们列出了Tomcat中Server,Service,Connector,Engine,Host,Context的继承关系图，你会发现它们都实现了<code>org.apache.catalina.Lifecycle</code>接口，而<code>org.apache.catalina.util.LifecycleBase</code>采用了<code>模板方法模式</code>来对所有支持生命周期管理的组件的生命周期各个阶段进行了总体管理，每个需要生命周期管理的组件只需要继承这个基类，然后覆盖对应的钩子方法即可完成相应的生命周期阶段性的管理工作。
下面我们首先来看看<code>org.apache.catalina.Lifecycle</code>接口的定义，它的类图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/LifeCycle.png">
从上图我们可以清楚的看到LifeCycle中主要有四个生命周期阶段，它们分别是init(初始化)，start(启动),stop(停止)，destory(销毁)。知道了这四个生命周期阶段以后，咋们就来看看<code>org.apache.catalina.util.LifecycleBase</code>是如何实现<code>模板方法模式</code>的。
那接下来我们就来看看<code>org.apache.catalina.util.LifecycleBase</code>类的定义，它的类图如下所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/LifeCycleBase.png">
上图中用红色标注的四个方法就是<code>模板方法模式</code>中的钩子方法，子类可以通过实现钩子方法来纳入到基类已经流程化好的生命周期管理中。<br/>
上面我们对LifeCycle和LifeCycleBase有了一个总体的认识，接下来，我们通过查看<code>org.apache.catalina.util.LifecycleBase</code>的源代码来具体的分析一下。
咋们首先来看<code>org.apache.catalina.util.LifecycleBase</code>的init方法的实现。</p>

<figure class='code'><figcaption><span>org.apache.catalina.util.LifecycleBase#init</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 1</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">NEW</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">invalidTransition</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">BEFORE_INIT_EVENT</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZING</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 2 </span>
</span><span class='line'>            <span class="n">initInternal</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;lifecycleBase.initFail&quot;</span><span class="o">,</span><span class="n">toString</span><span class="o">()),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 3 </span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们逐一来分析一下上述代码中标注了数字的地方：</p>

<ol>
<li>标注1的代码首先检测当前组件的状态是不是<code>NEW</code>(新建)，如果不是就调用<code>org.apache.catalina.util.LifecycleBase#invalidTransition</code>方法来将当前的状态转换过程终止，而<code>invalidTransition</code>的实现是抛出了<code>org.apache.catalina.LifecycleException</code>异常。接着调用了<code>setStateInternal</code>方法将状态设置为INITIALIZING（正在初始化）</li>
<li>标注2的代码就是init模板方法的钩子，子类可以通过实现<code>protected abstract void initInternal() throws LifecycleException;</code>方法来纳入初始化的流程。</li>
<li>标注3的代码将组件的状态改为<code>INITIALIZED</code>(已初始化)。</li>
</ol>


<p>上面我们分析了init模板方法，接下来我们再看看start方法具体做了什么事情。start的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.util.LifecycleBase#start</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING_PREP</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">state</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTED</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">state</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Exception</span> <span class="n">e</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LifecycleException</span><span class="o">();</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;lifecycleBase.alreadyStarted&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">toString</span><span class="o">()),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isInfoEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;lifecycleBase.alreadyStarted&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="n">toString</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">NEW</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)){</span>
</span><span class='line'>        <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZED</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="o">!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STOPPED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">invalidTransition</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">BEFORE_START_EVENT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING_PREP</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//4   </span>
</span><span class='line'>        <span class="n">startInternal</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;lifecycleBase.startFail&quot;</span><span class="o">,</span><span class="n">toString</span><span class="o">()),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 5</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)</span> <span class="o">||</span>
</span><span class='line'>            <span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">MUST_STOP</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Shouldn&#39;t be necessary but acts as a check that sub-classes are</span>
</span><span class='line'>        <span class="c1">// doing what they are supposed to.</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">invalidTransition</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">AFTER_START_EVENT</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们逐一来分析一下上述代码中标注了数字的地方：</p>

<ol>
<li>标注1的代码检测当前组件的状态是不是<code>STARTING_PREP</code>(准备启动),<code>STARTING</code>（正在启动）,<code>STARTED</code>（已启动）.如果是这三个状态中的任何一个，则抛出<code>LifecycleException</code>。</li>
<li>标注2的代码的检查其实主要是为了保证组件状态的完整性，在正常启动的流程中，应该是不会出现没有初始化就启动，或者还没启动就已经失败的情况。</li>
<li>标注3的代码设置组件的状态为<code>STARTING_PREP</code>（准备启动状态）</li>
<li>标注4的代码是start模板方法的钩子方法，子类通过实现<code>org.apache.catalina.util.LifecycleBase#startInternal</code>这个方法来纳入到组件启动的流程中来。</li>
<li>标注5的代码做了一些状态检查，然后最终将组件的状态设置为<code>STARTED</code>(已启动)</li>
</ol>


<p>上面我们分析了init和start方法的流程，对于stop和destroy方法的总体过程是类似的，大家可以自己阅读一下，但是通过上面的分析，我们可以得出生命周期方法的总体的骨架，如果用伪代码来表示可以简化为如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.util.LifecycleBase#lifeCycleMethod</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'>    <span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">lfieCycleMethod</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">stateCheck</span><span class="o">();</span><span class="c1">//状态检查</span>
</span><span class='line'>        <span class="c1">//设置为进入相应的生命周期之前的状态</span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">BEFORE_STATE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="n">lfieCycleMethodInternal</span><span class="o">();</span><span class="c1">//钩子方法</span>
</span><span class='line'>        <span class="c1">//进入相应的生命周期之后的状态</span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">AFTER_STATE</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h1>Tomcat启动的总过程</h1>

<p>通过上面的介绍，我们总体上清楚了各个组件的生命周期的各个阶段具体都是如何运作的。接下来我们就来看看，Tomcat具体是如何一步步启动起来的。我们都知道任何Java程序都有一个main函数入口，Tomcat中的main入口是<code>org.apache.catalina.startup.Bootstrap#main</code>,下面我们就来分析一下它的代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#main</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span> <span class="n">args</span><span class="o">[])</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">daemon</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Don&#39;t set daemon until init() has completed</span>
</span><span class='line'>        <span class="c1">// 1 </span>
</span><span class='line'>        <span class="n">Bootstrap</span> <span class="n">bootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Bootstrap</span><span class="o">();</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 2</span>
</span><span class='line'>            <span class="n">bootstrap</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// 3</span>
</span><span class='line'>        <span class="n">daemon</span> <span class="o">=</span> <span class="n">bootstrap</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// When running as a service the call to stop will be on a new</span>
</span><span class='line'>        <span class="c1">// thread so make sure the correct class loader is used to prevent</span>
</span><span class='line'>        <span class="c1">// a range of class not found exceptions.</span>
</span><span class='line'>        <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">daemon</span><span class="o">.</span><span class="na">catalinaLoader</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">command</span> <span class="o">=</span> <span class="s">&quot;start&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">command</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;startd&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">args</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;start&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;stopd&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">args</span><span class="o">[</span><span class="n">args</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;stop&quot;</span><span class="o">;</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;start&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 4</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">setAwait</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;stop&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">stopServer</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">command</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">&quot;configtest&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">daemon</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">args</span><span class="o">);</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="kc">null</span><span class="o">==</span><span class="n">daemon</span><span class="o">.</span><span class="na">getServer</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Bootstrap: command \&quot;&quot;</span> <span class="o">+</span> <span class="n">command</span> <span class="o">+</span> <span class="s">&quot;\&quot; does not exist.&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// Unwrap the Exception for clearer error reporting</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">t</span> <span class="k">instanceof</span> <span class="n">InvocationTargetException</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="n">t</span><span class="o">.</span><span class="na">getCause</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">t</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="na">getCause</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="n">t</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">exit</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>下面我们逐一来分析一下上述代码中标注了数字的地方：</p>

<ol>
<li>标注1的代码初始化了自举类的实例，标注2的代码对BootStrap实例进行了初始化，标注3的代码将实例赋值给了daemon。</li>
<li>标注4的代码首先调用了BootStrap的load方法，然后调用了start方法。</li>
</ol>


<p>接下来我们分别分析一下BootStrap的init,load，start方法具体做了哪些工作。</p>

<h2>BootStrap#init方法</h2>

<p>首先来看<code>org.apache.catalina.startup.Bootstrap#init</code>方法，它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#init</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span><span class="kd">throws</span> <span class="n">Exception</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set Catalina path</span>
</span><span class='line'>    <span class="n">setCatalinaHome</span><span class="o">();</span>
</span><span class='line'>    <span class="n">setCatalinaBase</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">initClassLoaders</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">Thread</span><span class="o">.</span><span class="na">currentThread</span><span class="o">().</span><span class="na">setContextClassLoader</span><span class="o">(</span><span class="n">catalinaLoader</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">SecurityClassLoad</span><span class="o">.</span><span class="na">securityClassLoad</span><span class="o">(</span><span class="n">catalinaLoader</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Load our startup class and call its process() method</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Loading startup class&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 1</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">startupClass</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">catalinaLoader</span><span class="o">.</span><span class="na">loadClass</span>
</span><span class='line'>        <span class="o">(</span><span class="s">&quot;org.apache.catalina.startup.Catalina&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">startupInstance</span> <span class="o">=</span> <span class="n">startupClass</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Set the shared extensions class loader</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Setting startup class properties&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">String</span> <span class="n">methodName</span> <span class="o">=</span> <span class="s">&quot;setParentClassLoader&quot;</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">paramTypes</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Class</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">paramTypes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">Class</span><span class="o">.</span><span class="na">forName</span><span class="o">(</span><span class="s">&quot;java.lang.ClassLoader&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="n">Object</span> <span class="n">paramValues</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span>
</span><span class='line'>    <span class="n">paramValues</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">sharedLoader</span><span class="o">;</span>
</span><span class='line'>    <span class="n">Method</span> <span class="n">method</span> <span class="o">=</span>
</span><span class='line'>        <span class="n">startupInstance</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">getMethod</span><span class="o">(</span><span class="n">methodName</span><span class="o">,</span> <span class="n">paramTypes</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 2</span>
</span><span class='line'>    <span class="n">method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">startupInstance</span><span class="o">,</span> <span class="n">paramValues</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">// 3</span>
</span><span class='line'>    <span class="n">catalinaDaemon</span> <span class="o">=</span> <span class="n">startupInstance</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>
下面我们重点逐一来分析一下上述代码中标注了数字的地方：</p>

<ol>
<li>标注1的代码通过反射实例化了<code>org.apache.catalina.startup.Catalina</code>类的实例;</li>
<li>标注2的代码调用了Catalina实例的setParentClassLoader方法设置了父亲ClassLoader，对于ClassLoader方面的内容，我们在本系列的后续文章再来看看。标注3的代码将Catalina实例赋值给了Bootstrap实例的catalinaDaemon.</li>
</ol>


<h2>BootStrap#load</h2>

<p>接下来我们再来看看<code>org.apache.catalina.startup.Bootstrap#load</code>方法，通过查看源代码，我们知道此方法通过反射调用了<code>org.apache.catalina.startup.Catalina#load</code>方法，那我们就来看看Catalina的load方法，Catalina#load方法代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Catalina#load</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">load</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// 1 </span>
</span><span class='line'>    <span class="n">Digester</span> <span class="n">digester</span> <span class="o">=</span> <span class="n">createStartDigester</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">InputSource</span> <span class="n">inputSource</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">InputStream</span> <span class="n">inputStream</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="n">File</span> <span class="n">file</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">file</span> <span class="o">=</span> <span class="n">configFile</span><span class="o">();</span>
</span><span class='line'>        <span class="n">inputStream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">FileInputStream</span><span class="o">(</span><span class="n">file</span><span class="o">);</span>
</span><span class='line'>        <span class="n">inputSource</span> <span class="o">=</span> <span class="k">new</span> <span class="n">InputSource</span><span class="o">(</span><span class="n">file</span><span class="o">.</span><span class="na">toURI</span><span class="o">().</span><span class="na">toURL</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">log</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;catalina.configFail&quot;</span><span class="o">,</span> <span class="n">file</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">inputSource</span><span class="o">.</span><span class="na">setByteStream</span><span class="o">(</span><span class="n">inputStream</span><span class="o">);</span>
</span><span class='line'>        <span class="n">digester</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">digester</span><span class="o">.</span><span class="na">parse</span><span class="o">(</span><span class="n">inputSource</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">SAXParseException</span> <span class="n">spe</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Catalina.start using &quot;</span> <span class="o">+</span> <span class="n">getConfigFile</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">+</span>
</span><span class='line'>                <span class="n">spe</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">log</span><span class="o">.</span><span class="na">warn</span><span class="o">(</span><span class="s">&quot;Catalina.start using &quot;</span> <span class="o">+</span> <span class="n">getConfigFile</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;: &quot;</span> <span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">inputStream</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// Ignore</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">getServer</span><span class="o">().</span><span class="na">setCatalina</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Stream redirection</span>
</span><span class='line'>    <span class="n">initStreams</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start the new server</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">// 2</span>
</span><span class='line'>        <span class="n">getServer</span><span class="o">().</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">LifecycleException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">Boolean</span><span class="o">.</span><span class="na">getBoolean</span><span class="o">(</span><span class="s">&quot;org.apache.catalina.startup.EXIT_ON_INIT_FAILURE&quot;</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Error</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;Catalina.start&quot;</span><span class="o">,</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，我只保留了主流程核心的代码，下面我们重点逐一来分析一下上述代码中标注了数字的地方：</p>

<ol>
<li>标注1的代码创建Digester实例解析&#8221;conf/server.xml&#8221;文件</li>
<li>标注2的代码最终调用了StandardServer的init方法。</li>
</ol>


<p>大家可以自行查看下源代码，我们会发现如下的一个调用流程：</p>

<figure class='code'><figcaption><span>init call stack  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardServer</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardService</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngine</span><span class="err">#</span><span class="n">init</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>因为StandardService，Connector，StandardEngine实现了LifeCycle接口，因此符合我们上文所获的生命周期的管理，最终都是通过他们自己实现的initInternal方法进行初始化</p></blockquote>

<p>读到这里的时候，我想大家应该和我一样，以为StandardEngine#init方法会调用StandardHost#init方法，但是当我们查看StandardEngine#init方法的时候，发现并没有进行StandardHost的初始化，它到底做了什么呢？让我们来具体分析一下,我们首先拿StanderEngine的继承关系图来看下：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardEngine.png">
通过上图以及前面说的LifeCyecle的模板方法模式，我们知道StandardEngine的初始化钩子方法initInternal方法最终调用了ContainerBase的initInternal方法，那我们拿ContainerBase#initInternal方法的代码看看：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.ContainerBase#initInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">BlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;</span> <span class="n">startStopQueue</span> <span class="o">=</span>
</span><span class='line'>        <span class="k">new</span> <span class="n">LinkedBlockingQueue</span><span class="o">&lt;</span><span class="n">Runnable</span><span class="o">&gt;();</span>
</span><span class='line'>    <span class="n">startStopExecutor</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ThreadPoolExecutor</span><span class="o">(</span>
</span><span class='line'>            <span class="n">getStartStopThreadsInternal</span><span class="o">(),</span>
</span><span class='line'>            <span class="n">getStartStopThreadsInternal</span><span class="o">(),</span> <span class="mi">10</span><span class="o">,</span> <span class="n">TimeUnit</span><span class="o">.</span><span class="na">SECONDS</span><span class="o">,</span>
</span><span class='line'>            <span class="n">startStopQueue</span><span class="o">,</span>
</span><span class='line'>            <span class="k">new</span> <span class="nf">StartStopThreadFactory</span><span class="o">(</span><span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;-startStop-&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="n">startStopExecutor</span><span class="o">.</span><span class="na">allowCoreThreadTimeOut</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们可以看到StandardEngine的初始化仅仅是创建了一个ThreadPoolExecutor，当看到这里的时候，笔者当时也纳闷了，StandardEngine#init竟然没有调用StandardHost#init方法，那么StandardHost的init方法是什么时候被调用的呢？遇到这种不知道到底方法怎么调用的时候怎么办呢？笔者介绍个方法给大家。我们现在需要知道StandardHost#init方法何时被调用的，而我们知道init最终会调用钩子的initInternal方法，因此这个时候，我们可以在StandardHost中override initInternal方法，增加了实现方法以后，有两种方法可以用，一种就是设置个断点debug一下就可以看出线程调用栈了，另外一种就是在新增的方法中打印出调用栈。笔者这里采用第二种方法，我们增加如下的initInternal方法到StandardHost中：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.StandardHost#initInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>    <span class="n">Throwable</span> <span class="n">ex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Throwable</span><span class="o">();</span>
</span><span class='line'>    <span class="n">StackTraceElement</span><span class="o">[]</span> <span class="n">stackElements</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="na">getStackTrace</span><span class="o">();</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">stackElements</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">stackElements</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getClassName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getMethodName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getFileName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getLineNumber</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码将会打印出方法调用堆栈，对于调试非常有用，上面的方法运行以后在控制台打印出了如下的堆栈信息：</p>

<figure class='code'><figcaption><span>stack info</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span>    <span class="n">run</span>  <span class="n">Thread</span><span class="o">.</span><span class="na">java</span>   <span class="mi">680</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span> <span class="n">run</span>  <span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span>   <span class="mi">918</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span> <span class="n">runTask</span>  <span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span>   <span class="mi">895</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">FutureTask</span>   <span class="n">run</span>  <span class="n">FutureTask</span><span class="o">.</span><span class="na">java</span>   <span class="mi">138</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">FutureTask</span><span class="n">$Sync</span>   <span class="n">innerRun</span> <span class="n">FutureTask</span><span class="o">.</span><span class="na">java</span>   <span class="mi">303</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ContainerBase</span><span class="n">$StartChild</span>   <span class="n">call</span> <span class="n">ContainerBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">1549</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ContainerBase</span><span class="n">$StartChild</span>   <span class="n">call</span> <span class="n">ContainerBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">1559</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LifecycleBase</span> <span class="n">start</span>    <span class="n">LifecycleBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">139</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LifecycleBase</span> <span class="n">init</span> <span class="n">LifecycleBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">102</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHost</span>  <span class="n">initInternal</span> <span class="n">StandardHost</span><span class="o">.</span><span class="na">java</span> <span class="mi">794</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过控制台的信息，我们看到是StartChild#call方法调用的，而我们查看StartChild#call方法其实是在StandardEngine的startInternal方法中通过异步线程池去初始化子容器。因此到这里我们就理清楚了，StarndardHost的init方法是在调用start方法的时候被初始化。那么接下来我们就来看看，start方法的整体调用流程。</p>

<h2>BootStrap#start</h2>

<p>采用分析load方法一样的方法，经过对BootStrap#start的分析，我们最终可以得到得到如下的调用链：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#start call stack</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span><span class="err">#</span><span class="n">start</span> <span class="err">通过反射调用</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardServer</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">---&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardService</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngine</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">Executor</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>综合上文的描述我们总体得到如下的调用链：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.Bootstrap#main call stack </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="err">#</span><span class="n">main</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="err">#</span><span class="n">load</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span><span class="err">#</span><span class="n">load</span>
</span><span class='line'><span class="o">---&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardServer</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardService</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngine</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span><span class="err">#</span><span class="n">start</span> <span class="err">通过反射调用</span>
</span><span class='line'><span class="o">---&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardServer</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardService</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardEngine</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">Executor</span><span class="err">#</span><span class="n">start</span>
</span><span class='line'><span class="o">-----&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">start</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的分析我们已经搞清楚了Tomcat启动的总体的过程，但是有一些关键的步骤，我们还需要进行进一步的深入探究。let&rsquo;s do it.</p>

<h1>Tomcat启动过程关键步骤分析</h1>

<h2>Connector#init</h2>

<p>我们首先来看一下<strong>org.apache.catalina.connector.Connector#init</strong>,我们知道Connector的生命周期也是通过LifeCycle的模板方法模式来管理的，那么我们只需要查看一下它的initInternal方法即可知道它是如何初始化的。接下来我们就来看一下initInternal方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.Connector#initInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialize adapter</span>
</span><span class='line'>        <span class="n">adapter</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CoyoteAdapter</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>        <span class="n">protocolHandler</span><span class="o">.</span><span class="na">setAdapter</span><span class="o">(</span><span class="n">adapter</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Make sure parseBodyMethodsSet has a default</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span> <span class="kc">null</span> <span class="o">==</span> <span class="n">parseBodyMethodsSet</span> <span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">setParseBodyMethods</span><span class="o">(</span><span class="n">getParseBodyMethods</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">protocolHandler</span><span class="o">.</span><span class="na">isAprRequired</span><span class="o">()</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>                <span class="o">!</span><span class="n">AprLifecycleListener</span><span class="o">.</span><span class="na">isAprAvailable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
</span><span class='line'>                    <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;coyoteConnector.protocolHandlerNoApr&quot;</span><span class="o">,</span>
</span><span class='line'>                            <span class="n">getProtocolHandlerClassName</span><span class="o">()));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 1 </span>
</span><span class='line'>            <span class="n">protocolHandler</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span>
</span><span class='line'>                <span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span>
</span><span class='line'>                 <span class="o">(</span><span class="s">&quot;coyoteConnector.protocolHandlerInitializationFailed&quot;</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialize mapper listener</span>
</span><span class='line'>        <span class="n">mapperListener</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面代码中，本文最关心的是标注了1的地方，这个地方调用了<code>org.apache.coyote.ProtocolHandler#init</code>方法，而ProtocolHandler是在Connector的构造函数中初始化，而Connector的构造函数又是Digester类解析conf/server.xml的时候调用的，明白了这点，我们在来具体看看Connector构造函数中调用的一个核心的方法setProtocol方法，下面是其代码：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.Connector#setProtocol</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">setProtocol</span><span class="o">(</span><span class="n">String</span> <span class="n">protocol</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">AprLifecycleListener</span><span class="o">.</span><span class="na">isAprAvailable</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">//这里统一使用AprEndpoint</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="s">&quot;HTTP/1.1&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">protocol</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span>
</span><span class='line'>                    <span class="o">(</span><span class="s">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span><span class="o">);</span>   <span class="c1">//Http11AprProtocol$Http11ConnectionHandler</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">&quot;AJP/1.3&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">protocol</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span>
</span><span class='line'>                    <span class="o">(</span><span class="s">&quot;org.apache.coyote.ajp.AjpAprProtocol&quot;</span><span class="o">);</span>     <span class="c1">//AjpAprProtocol$AjpConnectionHandler</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">protocol</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span>
</span><span class='line'>                    <span class="o">(</span><span class="s">&quot;org.apache.coyote.http11.Http11AprProtocol&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// 1 </span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="s">&quot;HTTP/1.1&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">protocol</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span>
</span><span class='line'>                    <span class="o">(</span><span class="s">&quot;org.apache.coyote.http11.Http11Protocol&quot;</span><span class="o">);</span>  <span class="c1">//Http11Protocol$Http11ConnectionHandler</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="s">&quot;AJP/1.3&quot;</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">protocol</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span>
</span><span class='line'>                    <span class="o">(</span><span class="s">&quot;org.apache.coyote.ajp.AjpProtocol&quot;</span><span class="o">);</span>    <span class="c1">//AjpProtocol$AjpConnectionHandler</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">protocol</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setProtocolHandlerClassName</span><span class="o">(</span><span class="n">protocol</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从setProtocol的代码中，我们可以看出主要逻辑分为了两块，一种情况是使用<a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">APR(Apache Portable Runtime)</a>，另外一种是不使用APR的情况。缺省情况下不采用APR库，这样的话，代码会走到标注1的代码分支，这里通过协议的不同，最终初始化了不同的类。如果是http1.1协议就采用<code>org.apache.coyote.http11.Http11Protocol</code>,如果是AJP(Apache Jserv Protocol)协议，就采用<code>org.apache.coyote.ajp.AjpProtocol</code>类，下面我们来看一下Http11Protocol和AjpProtocol的继承关系图如下：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/Http11Protocol.png"><br/>
<img class="center" src="http://imtiger.github.io/images/2013/10/17/AJPProtocol.png">
通过上图我们可以看到它们都继承了公共的基类<code>org.apache.coyote.AbstractProtocol</code>,而它们自己的init方法最终其实都是调用了AbstractProtocol的init方法，通过查看AbstractProtocol#init代码，我们可以看到最终是调用了<code>org.apache.tomcat.util.net.AbstractEndpoint#init</code>,而AbstractEndpoint的实例化操作是在实例化AjpProtocol和Http11Protocol的时候在其构造函数中实例化的，而AjpProtocol和Http11Protocol构造函数中，其实都是初始化了<code>org.apache.tomcat.util.net.JIoEndpoint</code>类，只不过根据是http协议还是AJP协议，它们具有不同的连接处理类。其中Http11Protocol的连接处理类为<code>org.apache.coyote.http11.Http11Protocol.Http11ConnectionHandler</code>,而连接处理类为<code>org.apache.coyote.ajp.AjpProtocol.AjpConnectionHandler</code>，因此到这里我们基本清楚了Connector的初始化流程，总结如下：</p>

<figure class='code'><figcaption><span>Connect init 采用APR的情况</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">//1 HTTP/1.1协议连接器</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">Http11AprProtocol</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">AprEndpoint</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">Http11AprProtocol</span><span class="o">.</span><span class="na">Http11ConnectionHandler</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2 AJP/1.3协议连接器</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">ajp</span><span class="o">.</span><span class="na">AjpAprProtocol</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">AprEndpoint</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">ajp</span><span class="o">.</span><span class="na">AjpAprProtocol</span><span class="o">.</span><span class="na">AjpConnectionHandler</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>Connector init 不采用APR的情况</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="c1">// 1 HTTP/1.1协议连接器</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">Http11Protocol</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">http11</span><span class="o">.</span><span class="na">Http11Protocol</span><span class="o">.</span><span class="na">Http11ConnectionHandler</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// 2 AJP/1.3协议连接器</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">connector</span><span class="o">.</span><span class="na">Connector</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">-&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">ajp</span><span class="o">.</span><span class="na">AjpProtocol</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">--&gt;</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="err">#</span><span class="n">init</span>
</span><span class='line'><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">coyote</span><span class="o">.</span><span class="na">ajp</span><span class="o">.</span><span class="na">AjpProtocol</span><span class="o">.</span><span class="na">AjpConnectionHandler</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>这里需要注意，除了JIoEndpoint外，还有NIoEndpoint，对于Tomcat7.0.24的代码，并没有采用NIOEndPoint，NIOEndpoint采用了NIO的方式进行Socket的处理。</p></blockquote>

<p>最后，咋们再来看看org.apache.tomcat.util.net.JIoEndpoint#init的初始化过程，我们首先来看一下JIoEndpoint的继承关系图如下：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/JIoEndpoint.png">
通过上图我们知道JIoEndpoint继承了AbstractEndpoint，而通过查看源码可知，JIoEndpoint没有实现自己的init方法，它默认采用了父类的init方法，那么我们就来看看AbstractEndpoint的init，它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.AbstractEndpoint#init</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">bindOnInit</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">bind</span><span class="o">();</span>
</span><span class='line'>            <span class="n">bindState</span> <span class="o">=</span> <span class="n">BindState</span><span class="o">.</span><span class="na">BOUND_ON_INIT</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查看上面的代码可知，因为bindOnInit默认是true,所以init调用了bind方法，而bind方法是抽象方法，最终由JIoEndpoint来实现，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.JIoEndpoint#bind</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">bind</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Initialize thread count defaults for acceptor</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">acceptorThreadCount</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">acceptorThreadCount</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">// Initialize maxConnections</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">getMaxConnections</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="c1">// User hasn&#39;t set a value - use the default</span>
</span><span class='line'>            <span class="n">setMaxConnections</span><span class="o">(</span><span class="n">getMaxThreadsExecutor</span><span class="o">(</span><span class="kc">true</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">serverSocketFactory</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">isSSLEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">serverSocketFactory</span> <span class="o">=</span>
</span><span class='line'>                    <span class="n">handler</span><span class="o">.</span><span class="na">getSslImplementation</span><span class="o">().</span><span class="na">getServerSocketFactory</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">serverSocketFactory</span> <span class="o">=</span> <span class="k">new</span> <span class="n">DefaultServerSocketFactory</span><span class="o">(</span><span class="k">this</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">serverSocket</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">getAddress</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">serverSocket</span> <span class="o">=</span> <span class="n">serverSocketFactory</span><span class="o">.</span><span class="na">createSocket</span><span class="o">(</span><span class="n">getPort</span><span class="o">(),</span>
</span><span class='line'>                            <span class="n">getBacklog</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>                    <span class="n">serverSocket</span> <span class="o">=</span> <span class="n">serverSocketFactory</span><span class="o">.</span><span class="na">createSocket</span><span class="o">(</span><span class="n">getPort</span><span class="o">(),</span>
</span><span class='line'>                            <span class="n">getBacklog</span><span class="o">(),</span> <span class="n">getAddress</span><span class="o">());</span>
</span><span class='line'>                <span class="o">}</span>
</span><span class='line'>            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">BindException</span> <span class="n">orig</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">String</span> <span class="n">msg</span><span class="o">;</span>
</span><span class='line'>                <span class="k">if</span> <span class="o">(</span><span class="n">getAddress</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">=</span> <span class="n">orig</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &lt;null&gt;:&quot;</span> <span class="o">+</span> <span class="n">getPort</span><span class="o">();</span>
</span><span class='line'>                <span class="k">else</span>
</span><span class='line'>                    <span class="n">msg</span> <span class="o">=</span> <span class="n">orig</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span>
</span><span class='line'>                            <span class="n">getAddress</span><span class="o">().</span><span class="na">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;:&quot;</span> <span class="o">+</span> <span class="n">getPort</span><span class="o">();</span>
</span><span class='line'>                <span class="n">BindException</span> <span class="n">be</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BindException</span><span class="o">(</span><span class="n">msg</span><span class="o">);</span>
</span><span class='line'>                <span class="n">be</span><span class="o">.</span><span class="na">initCause</span><span class="o">(</span><span class="n">orig</span><span class="o">);</span>
</span><span class='line'>                <span class="k">throw</span> <span class="n">be</span><span class="o">;</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面代码可以看出，最终是调用了<code>org.apache.tomcat.util.net.ServerSocketFactory#createSocket</code>方法创建一个<code>java.net.ServerSocket</code>，并绑定在conf/server.xml中Connector中配置的端口。</p>

<p>综上我们可以得出如下结论：</p>

<blockquote><p>Connector#init的时候，无论是AJP还是HTTP最终其实是调用了JioEndpoint的初始化，默认情况在初始化的时候就会创建java.net.ServerSocket绑到到配置的端口上。</p></blockquote>

<h2>Connector#start</h2>

<p>接着我们再来分析一下Connector#start，因为Connector符合LifeCycle模板方法生命周期管理的机制，因此它的start最终会调用startInternal,org.apache.catalina.connector.Connector#startInternal代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.connector.Connector#startInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Validate settings before starting</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">getPort</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span>
</span><span class='line'>                <span class="s">&quot;coyoteConnector.invalidPort&quot;</span><span class="o">,</span> <span class="n">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">getPort</span><span class="o">())));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setState</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">protocolHandler</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">errPrefix</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">service</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">errPrefix</span> <span class="o">+=</span> <span class="s">&quot;service.getName(): \&quot;&quot;</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">service</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\&quot;; &quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span>
</span><span class='line'>            <span class="o">(</span><span class="n">errPrefix</span> <span class="o">+</span> <span class="s">&quot; &quot;</span> <span class="o">+</span> <span class="n">sm</span><span class="o">.</span><span class="na">getString</span>
</span><span class='line'>             <span class="o">(</span><span class="s">&quot;coyoteConnector.protocolHandlerStartFailed&quot;</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mapperListener</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以清晰的看到最终调用了protocolHandler.start()，而根据Connector#init流程的分析，这里会分是否采用APR，默认是不采用APR的，这里会根据不同的协议（AJP，HTTP）来调用对应的org.apache.coyote.ProtocolHandler#start.
其中AJP会采用org.apache.coyote.ajp.AjpProtocol，HTTP协议采用org.apache.coyote.http11.Http11Protocol,而无论是AjpProtocol还是Http11Protocol都会调用JIoEndpoint的方法，那么接下来我们就来看看JioEndpoint的start方法，它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.JIoEndpoint#startInternal</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(!</span><span class="n">running</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">running</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>            <span class="n">paused</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Create worker collection</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">getExecutor</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">createExecutor</span><span class="o">();</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">initializeConnectionLatch</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">startAcceptorThreads</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// Start async timeout thread</span>
</span><span class='line'>            <span class="n">Thread</span> <span class="n">timeoutThread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">AsyncTimeout</span><span class="o">(),</span>
</span><span class='line'>                    <span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;-AsyncTimeout&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">timeoutThread</span><span class="o">.</span><span class="na">setPriority</span><span class="o">(</span><span class="n">threadPriority</span><span class="o">);</span>
</span><span class='line'>            <span class="n">timeoutThread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>            <span class="n">timeoutThread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>从上面的代码可以看出，启动了Acceptor线程和AsyncTimeout线程，首先来看看Acceptor线程，我们再来看看startAcceptorThreads方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.tomcat.util.net.AbstractEndpoint#startAcceptorThreads</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">startAcceptorThreads</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="n">getAcceptorThreadCount</span><span class="o">();</span>
</span><span class='line'>        <span class="n">acceptors</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Acceptor</span><span class="o">[</span><span class="n">count</span><span class="o">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">count</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">acceptors</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">createAcceptor</span><span class="o">();</span>
</span><span class='line'>            <span class="n">String</span> <span class="n">threadName</span> <span class="o">=</span> <span class="n">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;-Acceptor-&quot;</span> <span class="o">+</span> <span class="n">i</span><span class="o">;</span>
</span><span class='line'>            <span class="n">acceptors</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">setThreadName</span><span class="o">(</span><span class="n">threadName</span><span class="o">);</span>
</span><span class='line'>            <span class="n">Thread</span> <span class="n">t</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="n">acceptors</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">threadName</span><span class="o">);</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">setPriority</span><span class="o">(</span><span class="n">getAcceptorThreadPriority</span><span class="o">());</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="n">getDaemon</span><span class="o">());</span>
</span><span class='line'>            <span class="n">t</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看出其实是通过<code>org.apache.tomcat.util.net.AbstractEndpoint.Acceptor</code>这个Runable接口的实现类来启动线程，接下来我们就来看看Acceptor#run方法，通过查看run方法，它里面其实就是调用了<code>java.net.ServerSocket#accept</code>的方法来接受一个Socket连接。</p>

<p>启动完了Acceptor线程以后，接着就会启动AsyncTimeout线程，而这里面需要注意的时候，无论是Acceptor还是AsyncTimeout线程，它们都是Daemon线程，而设置为Daemon的原因，我们会在下篇<a href="">Tomcat的关闭</a>中进行说明。</p>

<h2>StandardEngine#start</h2>

<p>从本文上面的分析中，我们得知StandardEngine继承了ContainerBase，而StandardEngine的startInternal钩子方法也仅仅是调用了父类ContainerBase的startInternal方法，那接下来我们分析一下ContainerBase的startInternal方法，代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.ContainerBase#startInternal </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">startInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Start our child containers, if any</span>
</span><span class='line'>    <span class="n">Container</span> <span class="n">children</span><span class="o">[]</span> <span class="o">=</span> <span class="n">findChildren</span><span class="o">();</span>
</span><span class='line'>    <span class="n">List</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;</span> <span class="n">results</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;&gt;();</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">children</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">results</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">startStopExecutor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="n">StartChild</span><span class="o">(</span><span class="n">children</span><span class="o">[</span><span class="n">i</span><span class="o">])));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">boolean</span> <span class="n">fail</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>    <span class="k">for</span> <span class="o">(</span><span class="n">Future</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">:</span> <span class="n">results</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">result</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;containerBase.threadedStartFailed&quot;</span><span class="o">),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="n">fail</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">fail</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;containerBase.threadedStartFailed&quot;</span><span class="o">));</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="n">setState</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>我们删除了对本文的分析不相关的代码，只留下一些核心的代码，我们可以看到通过startStopExecutor异步的对子容器进行了启动，然后设置状态为<code>STARTING</code>的状态。而startStopExecutor是在容器的initInternal方法中进行初始化好的，接下来我们就来看看StartChild,StardChild的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.ContainerBase.StartChild</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">StartChild</span> <span class="kd">implements</span> <span class="n">Callable</span><span class="o">&lt;</span><span class="n">Void</span><span class="o">&gt;</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">private</span> <span class="n">Container</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">public</span> <span class="nf">StartChild</span><span class="o">(</span><span class="n">Container</span> <span class="n">child</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">child</span> <span class="o">=</span> <span class="n">child</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">Void</span> <span class="nf">call</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">child</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看到StartChild实现了Callable接口，实现这个接口的类可以将其放到对应的executor中执行（对于executor不熟悉的童鞋可以去看一下相关的文章，本文不做介绍），StartChild在运行的时候就会调用到子容器的start方法，而此时的父容器是StandardEngine，子容器就是StandardHost,接下来我们就来看看StandardHost的启动过程。通过前面对于init流程的分析，我们知道StandardHost不是在StandardEngine#init的时候初始化，因此在执行StandardHost#start的时候，要首先进行init方法的调用，具体的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.util.LifecycleBase#start</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">final</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">start</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">NEW</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">init</span><span class="o">();</span> <span class="c1">//因为此时的StandardHost还没有初始化，因此会走到这一步代码</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">)){</span>
</span><span class='line'>        <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">INITIALIZED</span><span class="o">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>            <span class="o">!</span><span class="n">state</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STOPPED</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">invalidTransition</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">BEFORE_START_EVENT</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTING_PREP</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">startInternal</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Throwable</span> <span class="n">t</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">ExceptionUtils</span><span class="o">.</span><span class="na">handleThrowable</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
</span><span class='line'>        <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">FAILED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">LifecycleException</span><span class="o">(</span>
</span><span class='line'>                <span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;lifecycleBase.startFail&quot;</span><span class="o">,</span><span class="n">toString</span><span class="o">()),</span> <span class="n">t</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">setStateInternal</span><span class="o">(</span><span class="n">LifecycleState</span><span class="o">.</span><span class="na">STARTED</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">false</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面省略了部分不相关的代码，在调用中我们可以清楚的看到，对于StandardHost的初始化，是在start的时候进行的。那接下来我们在来看一下StandardHost的init方法，通过查看代码，我们发现StandardHost本身没有实现initInternal的钩子方法，也就意味着最终初始化会调用ContainerBase#initInternal方法，而通过上文的描述，我们已经清楚ContainerBase#initInternal主要是初始化了一个startStopExecutor，这个线程池主要是为了异步的初始化子容器来用的。</p>

<blockquote><p>我们知道StandardEngine初始化的时候，也是初始化了一个线程池，而StandardHost也初始化了一个线程池，他们的不同点在与创建线程的工厂方法不同，在采用缺省配置的情况下，StandardEngine的线程池中的线程是以<code>Catalina-startStop</code>的形式命名的，而StandardHost是以<code>localhost-startStop</code>的方式进行命名的。大家注意区分。</p></blockquote>

<p>StandardHost#start调用init方法初始化完StandardHost以后，会调用钩子的startInternal方法，而startInternal方法又是调用了ContainerBased#startInternal方法，而ContainerBase#startInternal方法最终又会去启动子容器的，对于StandardHost来说，子容器就是StandardContext。
因此分析到这里我们可以得出如下结论：</p>

<blockquote><p>对于StandardEngine，StandardHost的启动，父容器在init的时候创建一个启动和停止子容器的线程池，然后父容器启动的时候首先通过异步的方式将子容器的启动通过<code>org.apache.catalina.core.ContainerBase.StartChild</code>提交到父容器中对应的线程池中进行启动，而子容器启动的时候首先会初始化，然后再启动。</p></blockquote>

<p>另外这里还需要注意一点就是，StandEngine#start的时候，最终调用了ContainerBase#startInternal方法，而ContainerBase#startInternal的最后，调用了threadStart(),我们来看看它的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.ContainerBase#threadStart</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">threadStart</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">thread</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">backgroundProcessorDelay</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">)</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">threadDone</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">threadName</span> <span class="o">=</span> <span class="s">&quot;ContainerBackgroundProcessor[&quot;</span> <span class="o">+</span> <span class="n">toString</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;]&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="n">thread</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Thread</span><span class="o">(</span><span class="k">new</span> <span class="n">ContainerBackgroundProcessor</span><span class="o">(),</span> <span class="n">threadName</span><span class="o">);</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="na">setDaemon</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>        <span class="n">thread</span><span class="o">.</span><span class="na">start</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的代码，首先会判断backgroundProcessorDelay是否小于0，而这个值默认情况下是-1，也就意味这后面的代码不会运行，而对于StandardEngine来说，它将backgroundProcessorDelay的值在构造函数中赋值为了10，这样的话，当StandardEngine启动的时候，就会启动名称为“ContainerBackgroundProcessor[StandardEngine[Catalina]]”的线程。</p>

<p>经过上面的分析，我们已经清楚了StandardEngine启动的过程了，但是我们还有一个地方需要进一步的分析。因为上面的分析我们仅仅只是分析了容器通过conf/server.xml配置文件的配置结构进行的启动，而我们都知道<code>CATALINA-HOME/webapps/</code>中的应用也是需要启动的，那么webapps目录的应用又是如何启动的呢？我们下面来分析一下，通过<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构</a>的描述，我们已经知道，webapps目录下面的应用其实是属于Context的，而Context对应Tomcat中的StandardContext类，因此我们就知道应该对谁下手了，知道了目标以后，咋们还是采用之前的那种方式，要么debug,要么打印调用栈，这里我们还是通过打印调用栈的方式进行，我们在<code>org.apache.catalina.core.StandardContext#initInternal</code>中增加打印调用栈的方法，具体代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.core.StandardContext#initInternal </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initInternal</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">LifecycleException</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">super</span><span class="o">.</span><span class="na">initInternal</span><span class="o">();</span>
</span><span class='line'>        <span class="n">Throwable</span> <span class="n">ex</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Throwable</span><span class="o">();</span>
</span><span class='line'>        <span class="n">StackTraceElement</span><span class="o">[]</span> <span class="n">stackElements</span> <span class="o">=</span> <span class="n">ex</span><span class="o">.</span><span class="na">getStackTrace</span><span class="o">();</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">stackElements</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">stackElements</span><span class="o">.</span><span class="na">length</span> <span class="o">-</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getClassName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getMethodName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getFileName</span><span class="o">()</span> <span class="o">+</span> <span class="s">&quot;\t&quot;</span><span class="o">);</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stackElements</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">getLineNumber</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">processTlds</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">this</span><span class="o">.</span><span class="na">addLifecycleListener</span><span class="o">(</span><span class="k">new</span> <span class="n">TldConfig</span><span class="o">());</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Register the naming resources</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">namingResources</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">namingResources</span><span class="o">.</span><span class="na">init</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Send j2ee.object.created notification </span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">getObjectName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">Notification</span> <span class="n">notification</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Notification</span><span class="o">(</span><span class="s">&quot;j2ee.object.created&quot;</span><span class="o">,</span>
</span><span class='line'>                    <span class="k">this</span><span class="o">.</span><span class="na">getObjectName</span><span class="o">(),</span> <span class="n">sequenceNumber</span><span class="o">.</span><span class="na">getAndIncrement</span><span class="o">());</span>
</span><span class='line'>            <span class="n">broadcaster</span><span class="o">.</span><span class="na">sendNotification</span><span class="o">(</span><span class="n">notification</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行代码，可以看到控制台有如下的输出：</p>

<figure class='code'><figcaption><span>terminal info</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span>    <span class="n">run</span>  <span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span>   <span class="mi">918</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">ThreadPoolExecutor</span><span class="n">$Worker</span> <span class="n">runTask</span>  <span class="n">ThreadPoolExecutor</span><span class="o">.</span><span class="na">java</span>   <span class="mi">895</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">FutureTask</span>   <span class="n">run</span>  <span class="n">FutureTask</span><span class="o">.</span><span class="na">java</span>   <span class="mi">138</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">FutureTask</span><span class="n">$Sync</span>   <span class="n">innerRun</span> <span class="n">FutureTask</span><span class="o">.</span><span class="na">java</span>   <span class="mi">303</span>
</span><span class='line'><span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">concurrent</span><span class="o">.</span><span class="na">Executors</span><span class="n">$RunnableAdapter</span> <span class="n">call</span> <span class="n">Executors</span><span class="o">.</span><span class="na">java</span>    <span class="mi">439</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">HostConfig</span><span class="n">$DeployDirectory</span>  <span class="n">run</span>  <span class="n">HostConfig</span><span class="o">.</span><span class="na">java</span>   <span class="mi">1671</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">HostConfig</span> <span class="n">deployDirectory</span>  <span class="n">HostConfig</span><span class="o">.</span><span class="na">java</span>   <span class="mi">1113</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardHost</span>  <span class="n">addChild</span> <span class="n">StandardHost</span><span class="o">.</span><span class="na">java</span> <span class="mi">622</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ContainerBase</span> <span class="n">addChild</span> <span class="n">ContainerBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">877</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ContainerBase</span> <span class="n">addChildInternal</span> <span class="n">ContainerBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">901</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LifecycleBase</span> <span class="n">start</span>    <span class="n">LifecycleBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">139</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">LifecycleBase</span> <span class="n">init</span> <span class="n">LifecycleBase</span><span class="o">.</span><span class="na">java</span>    <span class="mi">102</span>
</span><span class='line'><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardContext</span>   <span class="n">initInternal</span> <span class="n">StandardContext</span><span class="o">.</span><span class="na">java</span>  <span class="mi">6449</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过查看控制台的输出，我们可以看到有一个<code>org.apache.catalina.startup.HostConfig$DeployDirectory</code>类，于是乎找到这个类去看看呗。打开一看它是一个Runable接口的实现类，因此我们推断它也是放到某个线程池中进行异步运行的，最终通过IntellIJ IDEA提供的类调用栈分析工具（ctrl+alt+h）得到DeployDirectory构造器方法的调用栈如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/DeployDirectory-call-stack.png">
通过上图我们可以清楚的看到，最终的调用方是<code>org.apache.catalina.startup.HostConfig#lifecycleEvent</code>,到这里我们就知道了Context的启动是通过某个组件的生命周期事件的监听器来启动的，而HostConfig到底是谁的监听器呢？通过名称我们应该可以猜测出它是StandardHost的监听器,那么它到底监听哪个事件呢？我们查看下org.apache.catalina.startup.HostConfig#lifecycleEvent的代码如下：</p>

<figure class='code'><figcaption><span>org.apache.catalina.startup.HostConfig#lifecycleEvent</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">lifecycleEvent</span><span class="o">(</span><span class="n">LifecycleEvent</span> <span class="n">event</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Identify the host we are associated with</span>
</span><span class='line'>        <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">host</span> <span class="o">=</span> <span class="o">(</span><span class="n">Host</span><span class="o">)</span> <span class="n">event</span><span class="o">.</span><span class="na">getLifecycle</span><span class="o">();</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">host</span> <span class="k">instanceof</span> <span class="n">StandardHost</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">setCopyXML</span><span class="o">(((</span><span class="n">StandardHost</span><span class="o">)</span> <span class="n">host</span><span class="o">).</span><span class="na">isCopyXML</span><span class="o">());</span>
</span><span class='line'>                <span class="n">setDeployXML</span><span class="o">(((</span><span class="n">StandardHost</span><span class="o">)</span> <span class="n">host</span><span class="o">).</span><span class="na">isDeployXML</span><span class="o">());</span>
</span><span class='line'>                <span class="n">setUnpackWARs</span><span class="o">(((</span><span class="n">StandardHost</span><span class="o">)</span> <span class="n">host</span><span class="o">).</span><span class="na">isUnpackWARs</span><span class="o">());</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">ClassCastException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">log</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="n">sm</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">&quot;hostConfig.cce&quot;</span><span class="o">,</span> <span class="n">event</span><span class="o">.</span><span class="na">getLifecycle</span><span class="o">()),</span> <span class="n">e</span><span class="o">);</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Process the event that has occurred</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">PERIODIC_EVENT</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">check</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">START_EVENT</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">start</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">event</span><span class="o">.</span><span class="na">getType</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">Lifecycle</span><span class="o">.</span><span class="na">STOP_EVENT</span><span class="o">))</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">stop</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的代码，我们可以看出监听的事件是<code>Lifecycle.START_EVENT</code>,而通过查看<code>org.apache.catalina.LifecycleState</code>的代码<code>STARTING(true,Lifecycle.START_EVENT)</code>就可以得知，此时生命周期状态应该是STARTING,到这里我们应该已经猜到了，HostConfig是在StandardHost#start的时候通过监听器调用，为了验证我们的猜测，我们debug一下代码，我们可以在HostConfig#start方法中打个断点，运行以后得到如下内存结构：
<img class="center" src="http://imtiger.github.io/images/2013/10/17/HostConfig.png">
通过上图也就验证了我们刚才的猜测。</p>

<p>通过上面的分析我们清楚了webapps目录中context的启动，总结如下：</p>

<blockquote><p>webapps目录中应用的启动在StandardHost#start的时候，通过<code>Lifecycle.START_EVENT</code>这个事件的监听器HostConfig进行进一步的启动。</p></blockquote>

<p>综合上面的文章所述,最后我们再来一下总结，我们知道Java程序启动以后，最终会以进程的形式存在，而Java进程中又会有很多条线程存在，因此最后我们就来看看Tomcat启动以后，到底启动了哪些线程，通过这些我们可以反过来验证我们对源代码的理解是否正确。接下来我们启动Tomcat，然后运行<code>jstack -l &lt;pid&gt;</code>来看看，在笔者的机器上面，jstack的输入如下所示：</p>

<figure class='code'><figcaption><span>Tomcat threads</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Full</span> <span class="n">thread</span> <span class="n">dump</span> <span class="n">Java</span> <span class="nf">HotSpot</span><span class="o">(</span><span class="n">TM</span><span class="o">)</span> <span class="mi">64</span><span class="o">-</span><span class="n">Bit</span> <span class="n">Server</span> <span class="n">VM</span> <span class="o">(</span><span class="mf">20.51</span><span class="o">-</span><span class="n">b01</span><span class="o">-</span><span class="mi">457</span> <span class="n">mixed</span> <span class="n">mode</span><span class="o">):</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;ajp-bio-8009-AsyncTimeout&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8738afe000</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x115ad6000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">115</span><span class="n">ad5000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">TIMED_WAITING</span> <span class="o">(</span><span class="n">sleeping</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="n">$AsyncTimeout</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JIoEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">148</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">680</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Locked</span> <span class="n">ownable</span> <span class="nl">synchronizers:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">None</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;ajp-bio-8009-Acceptor-0&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8738b05800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1159d3000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">1159</span><span class="n">d2000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">RUNNABLE</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">socketAccept</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">PlainSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">439</span><span class="o">)</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">locked</span> <span class="o">&lt;</span><span class="mi">7</span><span class="n">f46a8710</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocksSocketImpl</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">implAccept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">468</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">436</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">DefaultServerSocketFactory</span><span class="o">.</span><span class="na">acceptSocket</span><span class="o">(</span><span class="n">DefaultServerSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">60</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="n">$Acceptor</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JIoEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">216</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">680</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Locked</span> <span class="n">ownable</span> <span class="nl">synchronizers:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">None</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;http-bio-8080-AsyncTimeout&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735acb800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1158d0000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">1158</span><span class="n">cf000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">TIMED_WAITING</span> <span class="o">(</span><span class="n">sleeping</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="n">$AsyncTimeout</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JIoEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">148</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">680</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Locked</span> <span class="n">ownable</span> <span class="nl">synchronizers:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">None</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;http-bio-8080-Acceptor-0&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735acd000</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x1157cd000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">1157</span><span class="n">cc000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">RUNNABLE</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">socketAccept</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">PlainSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">439</span><span class="o">)</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">locked</span> <span class="o">&lt;</span><span class="mi">7</span><span class="n">f46a8690</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocksSocketImpl</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">implAccept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">468</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">436</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">DefaultServerSocketFactory</span><span class="o">.</span><span class="na">acceptSocket</span><span class="o">(</span><span class="n">DefaultServerSocketFactory</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">60</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">tomcat</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">JIoEndpoint</span><span class="n">$Acceptor</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">JIoEndpoint</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">216</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">680</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Locked</span> <span class="n">ownable</span> <span class="nl">synchronizers:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">None</span>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;ContainerBackgroundProcessor[StandardEngine[Catalina]]&quot;</span> <span class="n">daemon</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8732850800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x111203000</span> <span class="n">waiting</span> <span class="n">on</span> <span class="n">condition</span> <span class="o">[</span><span class="mi">111202000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">TIMED_WAITING</span> <span class="o">(</span><span class="n">sleeping</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">sleep</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">ContainerBase</span><span class="n">$ContainerBackgroundProcessor</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">ContainerBase</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">1508</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="n">Thread</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">680</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">Locked</span> <span class="n">ownable</span> <span class="nl">synchronizers:</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">None</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="s">&quot;main&quot;</span> <span class="n">prio</span><span class="o">=</span><span class="mi">5</span> <span class="n">tid</span><span class="o">=</span><span class="mi">7</span><span class="n">f8735000800</span> <span class="n">nid</span><span class="o">=</span><span class="mh">0x10843e000</span> <span class="n">runnable</span> <span class="o">[</span><span class="mi">10843</span><span class="n">c000</span><span class="o">]</span>
</span><span class='line'>   <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Thread</span><span class="o">.</span><span class="na">State</span><span class="o">:</span> <span class="n">RUNNABLE</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">socketAccept</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">PlainSocketImpl</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">PlainSocketImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">439</span><span class="o">)</span>
</span><span class='line'>        <span class="o">-</span> <span class="n">locked</span> <span class="o">&lt;</span><span class="mi">7</span><span class="n">f32ea7c8</span><span class="o">&gt;</span> <span class="o">(</span><span class="n">a</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">SocksSocketImpl</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">implAccept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">468</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">net</span><span class="o">.</span><span class="na">ServerSocket</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ServerSocket</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">436</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">StandardServer</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="n">StandardServer</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">452</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span><span class="o">.</span><span class="na">await</span><span class="o">(</span><span class="n">Catalina</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">779</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">Catalina</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">725</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke0</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">39</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">25</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">597</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="o">.</span><span class="na">start</span><span class="o">(</span><span class="n">Bootstrap</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">322</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Bootstrap</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">Bootstrap</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">456</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke0</span><span class="o">(</span><span class="n">Native</span> <span class="n">Method</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">NativeMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">39</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">sun</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">DelegatingMethodAccessorImpl</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">25</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">reflect</span><span class="o">.</span><span class="na">Method</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="n">Method</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">597</span><span class="o">)</span>
</span><span class='line'>        <span class="n">at</span> <span class="n">com</span><span class="o">.</span><span class="na">intellij</span><span class="o">.</span><span class="na">rt</span><span class="o">.</span><span class="na">execution</span><span class="o">.</span><span class="na">application</span><span class="o">.</span><span class="na">AppMain</span><span class="o">.</span><span class="na">main</span><span class="o">(</span><span class="n">AppMain</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">120</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面的截图我已经取消了JVM自己本生的线程，从上图中我们可以清楚的看到，有6条线程，其中<code>ajp-bio-8009-AsyncTimeout</code>和<code>ajp-bio-8009-Acceptor-0</code>是在Ajp的Connector启动的时候启动的，<code>http-bio-8080-AsyncTimeout</code>和<code>http-bio-8080-Acceptor-0</code>是http的Connector启动的时候启动的，<code>ContainerBackgroundProcessor[StandardEngine[Catalina]]</code>是在StandardEngine启动的时候启动的，而main线程就是我们的主线程。这里还需要注意一点就是除了Main线程以外，其它的线程都是Dameon线程，相关的内容在下篇<a href="">Tomcat的关闭</a>我们再来详细说明。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat总体结构（Tomcat源代码阅读系列之二）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/"/>
    <updated>2013-10-16T14:33:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/16/tomcat-architecture</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第二篇文章，我们在本系列的第一篇文章：<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码</a>一文中介绍了如何在intelliJ IDEA 和 Eclipse中运行Tomcat源代码，本文介绍一下Tomcat的总体结构。</p>

<blockquote><p>本文没有特别指明的地方，源代码都是针对tomcat7.0.42来说。</p></blockquote>

<h1>Tomcat的总体结构</h1>

<p>Tomcat即是一个Http服务器也是一个Servlet容器，它的总体结构我们可以用下图来描述：</p>

<!-- more -->


<p><img class="center" src="http://imtiger.github.io/images/2013/10/16/TomcatArchitecture.png">
通过上图我们可以看出Tomcat中主要涉及Server,Service,Engine,Connector,Host,Context组件，之前用过Tomcat的童鞋是不是觉得这些组件的名称有点似曾相识的赶脚，没赶脚？！您再想想。好吧，不用你想了，我来告诉你吧。其实在Tomcat二进制分发包解压后,在conf目录中有一个server.xml文件，你打开它瞄两眼看看，是不是发现server.xml文件中已经包含了上述的几个名称。我拿我本地Tomcat7.0.42分发包中的server.xml来具体分析一下，它的内容如下：</p>

<figure class='code'><figcaption><span>conf/server.xml(Tomcat 7.0.42)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&#39;1.0&#39; encoding=&#39;utf-8&#39;?&gt;</span>
</span><span class='line'><span class="c">&lt;!--</span>
</span><span class='line'><span class="c">  Licensed to the Apache Software Foundation (ASF) under one or more</span>
</span><span class='line'><span class="c">  contributor license agreements.  See the NOTICE file distributed with</span>
</span><span class='line'><span class="c">  this work for additional information regarding copyright ownership.</span>
</span><span class='line'><span class="c">  The ASF licenses this file to You under the Apache License, Version 2.0</span>
</span><span class='line'><span class="c">  (the &quot;License&quot;); you may not use this file except in compliance with</span>
</span><span class='line'><span class="c">  the License.  You may obtain a copy of the License at</span>
</span><span class='line'>
</span><span class='line'><span class="c">      http://www.apache.org/licenses/LICENSE-2.0</span>
</span><span class='line'>
</span><span class='line'><span class="c">  Unless required by applicable law or agreed to in writing, software</span>
</span><span class='line'><span class="c">  distributed under the License is distributed on an &quot;AS IS&quot; BASIS,</span>
</span><span class='line'><span class="c">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</span>
</span><span class='line'><span class="c">  See the License for the specific language governing permissions and</span>
</span><span class='line'><span class="c">  limitations under the License.</span>
</span><span class='line'><span class="c">--&gt;</span>
</span><span class='line'><span class="c">&lt;!-- Note:  A &quot;Server&quot; is not itself a &quot;Container&quot;, so you may not</span>
</span><span class='line'><span class="c">     define subcomponents such as &quot;Valves&quot; at this level.</span>
</span><span class='line'><span class="c">     Documentation at /docs/config/server.html</span>
</span><span class='line'><span class="c"> --&gt;</span>
</span><span class='line'><span class="nt">&lt;Server</span> <span class="na">port=</span><span class="s">&quot;8005&quot;</span> <span class="na">shutdown=</span><span class="s">&quot;SHUTDOWN&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Security listener. Documentation at /docs/config/listeners.html</span>
</span><span class='line'><span class="c">  &lt;Listener className=&quot;org.apache.catalina.security.SecurityListener&quot; /&gt;</span>
</span><span class='line'><span class="c">  --&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--APR library loader. Documentation at /docs/apr.html --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Listener</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.core.AprLifecycleListener&quot;</span> <span class="na">SSLEngine=</span><span class="s">&quot;on&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!--Initialize Jasper prior to webapps are loaded. Documentation at /docs/jasper-howto.html --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Listener</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.core.JasperListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- Prevent memory leaks due to use of particular java/javax APIs--&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Listener</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.core.JreMemoryLeakPreventionListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Listener</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.mbeans.GlobalResourcesLifecycleListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Listener</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.core.ThreadLocalLeakPreventionListener&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Global JNDI resources</span>
</span><span class='line'><span class="c">       Documentation at /docs/jndi-resources-howto.html</span>
</span><span class='line'><span class="c">  --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;GlobalNamingResources&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Editable user database that can also be used by</span>
</span><span class='line'><span class="c">         UserDatabaseRealm to authenticate users</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Resource</span> <span class="na">name=</span><span class="s">&quot;UserDatabase&quot;</span> <span class="na">auth=</span><span class="s">&quot;Container&quot;</span>
</span><span class='line'>              <span class="na">type=</span><span class="s">&quot;org.apache.catalina.UserDatabase&quot;</span>
</span><span class='line'>              <span class="na">description=</span><span class="s">&quot;User database that can be updated and saved&quot;</span>
</span><span class='line'>              <span class="na">factory=</span><span class="s">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span>
</span><span class='line'>              <span class="na">pathname=</span><span class="s">&quot;conf/tomcat-users.xml&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/GlobalNamingResources&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- A &quot;Service&quot; is a collection of one or more &quot;Connectors&quot; that share</span>
</span><span class='line'><span class="c">       a single &quot;Container&quot; Note:  A &quot;Service&quot; is not itself a &quot;Container&quot;,</span>
</span><span class='line'><span class="c">       so you may not define subcomponents such as &quot;Valves&quot; at this level.</span>
</span><span class='line'><span class="c">       Documentation at /docs/config/service.html</span>
</span><span class='line'><span class="c">   --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;Service</span> <span class="na">name=</span><span class="s">&quot;Catalina&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!--The connectors can use a shared executor, you can define one or more named thread pools--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">    &lt;Executor name=&quot;tomcatThreadPool&quot; namePrefix=&quot;catalina-exec-&quot;</span>
</span><span class='line'><span class="c">        maxThreads=&quot;150&quot; minSpareThreads=&quot;4&quot;/&gt;</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- A &quot;Connector&quot; represents an endpoint by which requests are received</span>
</span><span class='line'><span class="c">         and responses are returned. Documentation at :</span>
</span><span class='line'><span class="c">         Java HTTP Connector: /docs/config/http.html (blocking &amp; non-blocking)</span>
</span><span class='line'><span class="c">         Java AJP  Connector: /docs/config/ajp.html</span>
</span><span class='line'><span class="c">         APR (HTTP/AJP) Connector: /docs/apr.html</span>
</span><span class='line'><span class="c">         Define a non-SSL HTTP/1.1 Connector on port 8080</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8080&quot;</span> <span class="na">protocol=</span><span class="s">&quot;HTTP/1.1&quot;</span>
</span><span class='line'>               <span class="na">connectionTimeout=</span><span class="s">&quot;20000&quot;</span>
</span><span class='line'>               <span class="na">redirectPort=</span><span class="s">&quot;8443&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- A &quot;Connector&quot; using the shared thread pool--&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">    &lt;Connector executor=&quot;tomcatThreadPool&quot;</span>
</span><span class='line'><span class="c">               port=&quot;8080&quot; protocol=&quot;HTTP/1.1&quot;</span>
</span><span class='line'><span class="c">               connectionTimeout=&quot;20000&quot;</span>
</span><span class='line'><span class="c">               redirectPort=&quot;8443&quot; /&gt;</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!-- Define a SSL HTTP/1.1 Connector on port 8443</span>
</span><span class='line'><span class="c">         This connector uses the JSSE configuration, when using APR, the</span>
</span><span class='line'><span class="c">         connector should be using the OpenSSL style configuration</span>
</span><span class='line'><span class="c">         described in the APR documentation --&gt;</span>
</span><span class='line'>    <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">    &lt;Connector port=&quot;8443&quot; protocol=&quot;HTTP/1.1&quot; SSLEnabled=&quot;true&quot;</span>
</span><span class='line'><span class="c">               maxThreads=&quot;150&quot; scheme=&quot;https&quot; secure=&quot;true&quot;</span>
</span><span class='line'><span class="c">               clientAuth=&quot;false&quot; sslProtocol=&quot;TLS&quot; /&gt;</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- Define an AJP 1.3 Connector on port 8009 --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Connector</span> <span class="na">port=</span><span class="s">&quot;8009&quot;</span> <span class="na">protocol=</span><span class="s">&quot;AJP/1.3&quot;</span> <span class="na">redirectPort=</span><span class="s">&quot;8443&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- An Engine represents the entry point (within Catalina) that processes</span>
</span><span class='line'><span class="c">         every request.  The Engine implementation for Tomcat stand alone</span>
</span><span class='line'><span class="c">         analyzes the HTTP headers included with the request, and passes them</span>
</span><span class='line'><span class="c">         on to the appropriate Host (virtual host).</span>
</span><span class='line'><span class="c">         Documentation at /docs/config/engine.html --&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">&lt;!-- You should set jvmRoute to support load-balancing via AJP ie :</span>
</span><span class='line'><span class="c">    &lt;Engine name=&quot;Catalina&quot; defaultHost=&quot;localhost&quot; jvmRoute=&quot;jvm1&quot;&gt;</span>
</span><span class='line'><span class="c">    --&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Engine</span> <span class="na">name=</span><span class="s">&quot;Catalina&quot;</span> <span class="na">defaultHost=</span><span class="s">&quot;localhost&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c">&lt;!--For clustering, please take a look at documentation at:</span>
</span><span class='line'><span class="c">          /docs/cluster-howto.html  (simple how to)</span>
</span><span class='line'><span class="c">          /docs/config/cluster.html (reference documentation) --&gt;</span>
</span><span class='line'>      <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">      &lt;Cluster className=&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;/&gt;</span>
</span><span class='line'><span class="c">      --&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c">&lt;!-- Use the LockOutRealm to prevent attempts to guess user passwords</span>
</span><span class='line'><span class="c">           via a brute-force attack --&gt;</span>
</span><span class='line'>      <span class="nt">&lt;Realm</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.realm.LockOutRealm&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="c">&lt;!-- This Realm uses the UserDatabase configured in the global JNDI</span>
</span><span class='line'><span class="c">             resources under the key &quot;UserDatabase&quot;.  Any edits</span>
</span><span class='line'><span class="c">             that are performed against this UserDatabase are immediately</span>
</span><span class='line'><span class="c">             available for use by the Realm.  --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Realm</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.realm.UserDatabaseRealm&quot;</span>
</span><span class='line'>               <span class="na">resourceName=</span><span class="s">&quot;UserDatabase&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/Realm&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;Host</span> <span class="na">name=</span><span class="s">&quot;localhost&quot;</span>  <span class="na">appBase=</span><span class="s">&quot;webapps&quot;</span>
</span><span class='line'>            <span class="na">unpackWARs=</span><span class="s">&quot;true&quot;</span> <span class="na">autoDeploy=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- SingleSignOn valve, share authentication between web applications</span>
</span><span class='line'><span class="c">             Documentation at: /docs/config/valve.html --&gt;</span>
</span><span class='line'>        <span class="c">&lt;!--</span>
</span><span class='line'><span class="c">        &lt;Valve className=&quot;org.apache.catalina.authenticator.SingleSignOn&quot; /&gt;</span>
</span><span class='line'><span class="c">        --&gt;</span>
</span><span class='line'>
</span><span class='line'>        <span class="c">&lt;!-- Access log processes all example.</span>
</span><span class='line'><span class="c">             Documentation at: /docs/config/valve.html</span>
</span><span class='line'><span class="c">             Note: The pattern used is equivalent to using pattern=&quot;common&quot; --&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Valve</span> <span class="na">className=</span><span class="s">&quot;org.apache.catalina.valves.AccessLogValve&quot;</span> <span class="na">directory=</span><span class="s">&quot;logs&quot;</span>
</span><span class='line'>               <span class="na">prefix=</span><span class="s">&quot;localhost_access_log.&quot;</span> <span class="na">suffix=</span><span class="s">&quot;.txt&quot;</span>
</span><span class='line'>               <span class="na">pattern=</span><span class="s">&quot;%h %l %u %t &amp;quot;%r&amp;quot; %s %b&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nt">&lt;/Host&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Engine&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Service&gt;</span>
</span><span class='line'><span class="nt">&lt;/Server&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>接下来我们就根据上图以及conf/server.xml的内容来一步步描述一下上面所说的各种组件吧。</p>

<h2>Server</h2>

<p>首先闪联登场的是咋们的Server大哥（大家能给点掌声吗？），Server是Tomcat中最顶层的组件，它可以包含多个Service组件。在Tomcat源代码中Server组件对应源码中的<code>org.apache.catalina.core.StandardServer</code>类。StandardServer的继承关系图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardServer.jpg"></p>

<h2>Service</h2>

<p>接下来咋们来看看Service组件，Service组件相当于Connetor和Engine组件的包装器，它将一个或者多个Connector组件和一个Engine建立关联。缺省的的配置文件中，定义一个叫<code>Catalina</code>的服务，并将Http,AJP这两个Connector关联到了一个名为<code>Catalina</code>的Engine.Service组件对应Tomcat源代码中的<code>org.apache.catalina.core.StandardService</code>,StandardService的继承关系图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardService.png"></p>

<h2>Connector</h2>

<p>既然Tomcat需要提供http服务，而我们知道http应用层协议最终都是需要通过TCP层的协议进行包传递的，而Connector正是Tomcat中监听TCP网络连接的组件，一个Connector会监听一个独立的端口来处理来自客户端的连接。缺省的情况下Tomcat提供了如下两个Connector。我们分别描述一下：</p>

<ol>
<li>HTTP/1.1<br/>
<code>&lt;Connector port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" /&gt;</code>
上面定义了一个Connector，它缺省监听端口8080,这个端口我们可以根据具体情况进行改动。<code>connectionTimeout</code>定义了连接超时时间，单位是毫秒，<code>redirectPort</code>定义了ssl的重定向接口，根据缺省的配置，Connector会将ssl请求重定向到8443端口。</li>
<li>AJP/1.3<br/>
AJP表示<code>Apache Jserv Protocol</code>,此连接器将处理Tomcat和Aapache http服务器之间的交互，这个连机器是用来处理我们将Tomcat和Apache http服务器结合使用的情况。假如在同样的一台物理Server上面部署了一台Apache http服务器和多台Tomcat服务器，通过Apache服务器来处理静态资源以及负载均衡的时候，针对不同的Tomcat实例需要AJP监听不同的端口。</li>
</ol>


<p>Connector对应源代码中的<code>org.apache.catalina.connector.Connector</code>,它的继承关系图如下所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/Connector.png"></p>

<h2>Engine</h2>

<p>Tomcat中有一个容器的概念，而Engine,Host,Context都属于Contanier，我们先来说说最顶层的容器Engine.<br/>
一个Engine可以包含一个或者多个Host,也就是说我们一个Tomcat的实例可以配置多个虚拟主机。<br/>
缺省的情况下<code>&lt;Engine name="Catalina" defaultHost="localhost"&gt;</code>定义了一个名称为Cataline的Engine.Engine对应源代码中的<code>org.apache.catalina.core.StandardEngine</code>，它的继承关系图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardEngine.png"></p>

<h2>Host</h2>

<p>Host定义了一个虚拟主机，一个虚拟主机可以有多个Context，缺省的配置如下：<br/>
<code>&lt;Host name="localhost"  appBase="webapps" unpackWARs="true" autoDeploy="true"&gt;….&lt;/Host&gt;</code> 其中<code>appBase</code>为webapps，也就是<code>&lt;CATALINA_HOME&gt;\webapps</code>目录，<code>unpackingWARS</code>属性指定在appBase指定的目录中的war包都自动的解压，缺省配置为true,<code>autoDeploy</code>属性指定是否对加入到appBase目录的war包进行自动的部署，缺省为true.<br/>
Host对应源代码中的<code>org.apache.catalina.core.StandardHost</code>,它的继承关系图如下所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardHost.png"></p>

<h2>Context</h2>

<p>在Tomcat中，每一个运行的webapp其实最终都是以Context的形成存在，每个Context都有一个根路径和请求URL路径，Context对应源代码中的<code>org.apache.catalina.core.StandardContext</code>,它的继承关系图如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/16/StandardContext.png">
在Tomcat中我们通常采用如下的两种方式创建一个Context.下面分别描述一下：</p>

<ol>
<li>在<code>&lt;CATALINA-HOME&gt;\webapps</code>目录中创建一个目录，这个时候将自动创建一个context，默认context的访问url为<code>http://host:port/dirname</code>,你也可以通过在<code>ContextRoot\META-INF</code>中创建一个context.xml的文件，其中包含如下的内容来指定应用的访问路径。
<code>&lt;Context path="/yourUrlPath" /&gt;</code></li>
<li>conf\server.xml文件中增加context元素。
第二种创建context的方法，我们可以选择在server.xml文件的<code>&lt;Host&gt;</code>元素，比如我们在server.xml文件中增加如下内容：</li>
</ol>


<figure class='code'><figcaption><span>server.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'>    ......
</span><span class='line'>    ......
</span><span class='line'>    <span class="nt">&lt;Context</span> <span class="na">path=</span><span class="s">&quot;/mypath&quot;</span> <span class="na">docBase=</span><span class="s">&quot;/Users/tiger/develop/xxx&quot;</span> <span class="na">reloadable=</span><span class="s">&quot;true&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Context&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Host&gt;</span>
</span><span class='line'><span class="nt">&lt;/Engine&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/Service&gt;</span>
</span><span class='line'><span class="nt">&lt;/Server&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样的话，我们就可以通过<code>http://host:port/mypath</code>访问上面配置的context了。</p>

<h2>Valve</h2>

<p>Valve中文意思是阀门，Valve是Tomcat中责任链模式的实现，通过链接多个Valve对请求进行处理。其中Valve可以定义在任何的Container中，上面说的Engine,Host,Context都属于容器。tomcat 默认定义了一个名为<code>org.apache.catalina.valves.AccessLogValve</code>的Valve,这个Valve负责拦截每个请求，然后记录一条访问日志。</p>

<p>通过上面的分析，我们发现Server,Service,Engine,Host,Context都实现了<code>org.apache.catalina.Lifecycle</code>接口，通过这个接口管理了这些核心组件的生命周期，关于这些组件的生命周期，我们在下一篇文章描述。</p>

<p>下篇：<br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/"/>
    <updated>2013-10-14T14:39:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第一篇文章，在阅读Tomcat源代码之前，我们首先需要将Tomcat的源代码在IDE里面运行起来，这样方便我们阅读的过程中调试。本文总结一下在IDEA 或者 Eclipse中运行Tomcat源代码环境的搭建过程，同时我们通过Maven来负责项目的构建。</p>

<p>在进行搭建之前，我们首先来说一下总体的思路。我们知道Tomcat运行的时候，一部分是源代码编译以后的可运行的Jar,另外一部分则是运行时的环境（也就是我们从官方下载下来的二进制分发包中的一系列的配置文件以及目录结构，说的更直白点就是CATALINA_HOME环境变量指定的目录）,本文对于第一部分采用IntelliJ IDEA 运行tomcat-7.0.42 tag的源代码，而对于第二部分运行环境，我们则直接采用tomcat-7.0.42的二进制分发包。明白了上述的思路以后，咋们就来一步步的搭建吧。</p>

<!-- more -->


<p>首先咋们来看看搭建完成以后的总体的目录结构，然后再一步步的去分解搭建过程。笔者搭建完以后，最终的运行结构如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/10/14/project-structure.png"></p>

<p>下面分别解释一下上图工程结构中涉及到的文件和目录：</p>

<ol>
<li>.idea和tomcat-study.iml是IntelliJ IDEA的文件，如果你用Eclipse的话不会存在这两个东东 。</li>
<li>catalina-home是从官方下载的7.0.42的二进制分发包解压后的目录</li>
<li>target是Maven编译项目以后生成的文件夹，熟悉Maven的读者应该很熟悉此目录</li>
<li>tomcat-7.0.42-sourcecode是从Tomcat<a href="http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_42/">官方仓库</a>下载的tags的源代码</li>
<li>pom.xml是Maven的配置文件,此工程中有两个pom.xml，这里运用了Maven聚合的特性。</li>
</ol>


<p>了解了最终的结构以后，咋们就来一步步的搭建它吧。</p>

<h3>第一步 创建项目目录结构</h3>

<p>本文假设我们将项目放在<code>~/develop/java</code>目录中。</p>

<figure class='code'><figcaption><span>create project structure</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/develop/java
</span><span class='line'>mkdir Tomcat
</span><span class='line'><span class="nb">cd </span>Tomcat
</span><span class='line'>touch pom.xml
</span></code></pre></td></tr></table></div></figure>


<h3>第二步 下载Tomcat 7.0.42二进制分发包</h3>

<p>我们通过apache-tomcat-7.0.42的<a href="http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.42/bin/apache-tomcat-7.0.42.tar.gz">官方地址</a>下载它。具体的过程如下：</p>

<figure class='code'><figcaption><span>download apache-tomcat-7.0.42 binary distribution</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/develop/java/Tomcat
</span><span class='line'>wget http://mirrors.hust.edu.cn/apache/tomcat/tomcat-7/v7.0.42/bin/apache-tomcat-7.0.42.tar.gz
</span><span class='line'>tar -zxvf apache-tomcat-7.0.42.tar.gz
</span><span class='line'>rm apache-tomcat-7.0.42.tar.gz
</span><span class='line'>mv apache-tomcat-7.0.42 catalina-home
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>第三步 下载Tomcat 7.0.42 源代码</h3>

<p>接下来我们从Tomcat的<a href="http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_42/">官方SVN仓库</a>下载Tomcat 7.0.42源代码，具体的步骤如下：</p>

<figure class='code'><figcaption><span>download Tomcat 7.0.42 source code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/develop/java/Tomcat
</span><span class='line'>svn co http://svn.apache.org/repos/asf/tomcat/tc7.0.x/tags/TOMCAT_7_0_42/  tomcat-7.0.42-sourcecode
</span></code></pre></td></tr></table></div></figure>


<p>在这一步中，我们将7.0.42的源代码迁入到了tomcat-7.0.42-sourcecode目录中。</p>

<h3>第四步 创建聚合模块pom.xml</h3>

<p>因为我们通过maven来对项目进行构建，这就需要我们来创建一个pom.xml文件，具体过程如下：</p>

<figure class='code'><figcaption><span>create aggregation child project pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/develop/java/Tomcat/tomcat-7.0.42-sourcecode
</span><span class='line'>touch pom.xml
</span></code></pre></td></tr></table></div></figure>


<p>用你喜欢的编辑器打开pom.xml然后用下面的内容替换它的内容：</p>

<figure class='code'><figcaption><span>pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="cp">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
</span><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span>
</span><span class='line'>         <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>org.apache.tomcat<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>Tomcat7.0<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Tomcat7.0<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>7.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;build&gt;</span>
</span><span class='line'>        <span class="nt">&lt;finalName&gt;</span>Tomcat7.0<span class="nt">&lt;/finalName&gt;</span>
</span><span class='line'>        <span class="nt">&lt;sourceDirectory&gt;</span>java<span class="nt">&lt;/sourceDirectory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;testSourceDirectory&gt;</span>test<span class="nt">&lt;/testSourceDirectory&gt;</span>
</span><span class='line'>        <span class="nt">&lt;resources&gt;</span>
</span><span class='line'>            <span class="nt">&lt;resource&gt;</span>
</span><span class='line'>                <span class="nt">&lt;directory&gt;</span>java<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/resource&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/resources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;testResources&gt;</span>
</span><span class='line'>            <span class="nt">&lt;testResource&gt;</span>
</span><span class='line'>                <span class="nt">&lt;directory&gt;</span>test<span class="nt">&lt;/directory&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/testResource&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/testResources&gt;</span>
</span><span class='line'>        <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>            <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>                <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;artifactId&gt;</span>maven-compiler-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>                <span class="nt">&lt;version&gt;</span>2.3<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>
</span><span class='line'>                <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;encoding&gt;</span>UTF-8<span class="nt">&lt;/encoding&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;source&gt;</span>1.6<span class="nt">&lt;/source&gt;</span>
</span><span class='line'>                    <span class="nt">&lt;target&gt;</span>1.6<span class="nt">&lt;/target&gt;</span>
</span><span class='line'>                <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>            <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/build&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>junit<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>junit<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.4<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>            <span class="nt">&lt;scope&gt;</span>test<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>ant<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>ant<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.7.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>wsdl4j<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>wsdl4j<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.6.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>javax.xml<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>jaxrpc<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>1.1<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>        <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>            <span class="nt">&lt;groupId&gt;</span>org.eclipse.jdt.core.compiler<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;artifactId&gt;</span>ecj<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>            <span class="nt">&lt;version&gt;</span>4.2.2<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>对于pom.xml文件我们需要注意以下几点：</p>

<ol>
<li>因为下载代码不符合Maven默认的目录结构约定，因此需要修改<code>resources</code>和<code>testResources</code>为<code>java</code>和 <code>test</code>，而不是默认的<code>src/main/resource</code>和<code>src/test/resource</code>,修改<code>sourceDirectory</code>和<code>testSourceDirectory</code>为，<code>java</code>和<code>test</code>,而不是默认的<code>src/main/java</code>和<code>src/test/java</code>.</li>
<li>因为Tomcat源代码的编译需要wsdl4j，jaxrpc,ecj等jar包，因此需要增加相关的依赖。</li>
</ol>


<h3>第五步 创建项目的根pom.xml文件</h3>

<p>这一步我么在Tomcat目录中创建pom.xml文件，这里采用了Maven中聚合的概念.具体过程如下：</p>

<figure class='code'><figcaption><span>create root pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/develop/java/Tomcat
</span><span class='line'>touch pom.xml
</span></code></pre></td></tr></table></div></figure>


<p>用你喜欢的编辑器打开刚创建的空的pom.xml文件，修改它的内容如下：</p>

<figure class='code'><figcaption><span>~/develop/java/Tomcat/pom.xml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;project</span> <span class="na">xmlns=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="na">xmlns:xsi=</span><span class="s">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>
</span><span class='line'>         <span class="na">xsi:schemaLocation=</span><span class="s">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;modelVersion&gt;</span>4.0.0<span class="nt">&lt;/modelVersion&gt;</span>
</span><span class='line'>    <span class="nt">&lt;groupId&gt;</span>net.imtiger<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;artifactId&gt;</span>tomcat-study<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>    <span class="nt">&lt;name&gt;</span>Tomcat 7.0 Study<span class="nt">&lt;/name&gt;</span>
</span><span class='line'>    <span class="nt">&lt;version&gt;</span>1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>    <span class="nt">&lt;packaging&gt;</span>pom<span class="nt">&lt;/packaging&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;modules&gt;</span>
</span><span class='line'>        <span class="nt">&lt;module&gt;</span>tomcat-7.0.42-sourcecode<span class="nt">&lt;/module&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/modules&gt;</span>
</span><span class='line'><span class="nt">&lt;/project&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>第六步 用IntelliJ IDEA 打开项目根目录的pom.xml</h3>

<p>这一步需要注意，要用IDEA 打开项目根目录的pom.xml文件（也就是~/develop/java/Tomcat/pom.xml）</p>

<h3>第七步 运行Tomcat</h3>

<p>终于到激动人心的时刻了,我们知道任何Java程序都会有一个<code>public static void main(String… args)</code>的入口，Tomcat本身是用Java写的，因此它也不例外，对于Tomcat来说，入口类是<code>org.apache.catalina.startup.Bootstrap</code>,我们找到这个类，然后在IntelliJ IDEA中创建一个运行配置，其中最主要的就是VM options的配置了，在VM options里面填写如下的参数：</p>

<figure class='code'><figcaption><span>VM options</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">-</span><span class="n">Dcatalina</span><span class="o">.</span><span class="na">home</span><span class="o">=</span><span class="n">catalina</span><span class="o">-</span><span class="n">home</span> <span class="o">-</span><span class="n">Dcatalina</span><span class="o">.</span><span class="na">base</span><span class="o">=</span><span class="n">catalina</span><span class="o">-</span><span class="n">home</span>
</span><span class='line'><span class="o">-</span><span class="n">Djava</span><span class="o">.</span><span class="na">endorsed</span><span class="o">.</span><span class="na">dirs</span><span class="o">=</span><span class="n">catalina</span><span class="o">-</span><span class="n">home</span><span class="o">/</span><span class="n">endorsed</span> <span class="o">-</span><span class="n">Djava</span><span class="o">.</span><span class="na">io</span><span class="o">.</span><span class="na">tmpdir</span><span class="o">=</span><span class="n">catalina</span><span class="o">-</span><span class="n">home</span><span class="o">/</span><span class="n">temp</span>
</span><span class='line'><span class="o">-</span><span class="n">Djava</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">manager</span><span class="o">=</span><span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">juli</span><span class="o">.</span><span class="na">ClassLoaderLogManager</span>
</span><span class='line'><span class="o">-</span><span class="n">Djava</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">logging</span><span class="o">.</span><span class="na">config</span><span class="o">.</span><span class="na">file</span><span class="o">=</span><span class="n">catalina</span><span class="o">-</span><span class="n">home</span><span class="o">/</span><span class="n">conf</span><span class="o">/</span><span class="n">logging</span><span class="o">.</span><span class="na">properties</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置好后，IntelliJ IDEA的配置界面如下：
<img class="center" src="http://imtiger.github.io/images/2013/10/14/vm-options.png"></p>

<p>点击运行，即可看到Tomcat已经启动了，日志已经打到了IntelliJ IDEA的控制台上了，这个时候可以启动浏览器输入<a href="http://127.0.0.1:8080">http://127.0.0.1:8080</a>看看是否启动成功。</p>

<p>接下来，咋们在Bootstrap的main方法中，增加一句<code>System.out.println("Have fun and Enjoy!");</code>,然后运行一下，看看加入的信息是否被打入到了控制台，在笔者的电脑上打印可以看到信息已经输出如下信息：</p>

<figure class='code'><figcaption><span>console log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="n">Have</span> <span class="n">fun</span> <span class="n">and</span> <span class="n">Enjoy</span><span class="o">!</span>
</span><span class='line'><span class="c1">//ignore other log info</span>
</span><span class='line'><span class="mi">2013</span><span class="o">-</span><span class="mi">10</span><span class="o">-</span><span class="mi">14</span> <span class="mi">17</span><span class="o">:</span><span class="mi">19</span><span class="o">:</span><span class="mi">35</span> <span class="n">org</span><span class="o">.</span><span class="na">apache</span><span class="o">.</span><span class="na">catalina</span><span class="o">.</span><span class="na">startup</span><span class="o">.</span><span class="na">Catalina</span> <span class="n">start</span>
</span><span class='line'><span class="err">信息</span><span class="o">:</span> <span class="n">Server</span> <span class="n">startup</span> <span class="n">in</span> <span class="mi">908</span> <span class="n">ms</span>
</span></code></pre></td></tr></table></div></figure>


<p>上面就是Tomcat7.0.42源代码在IntelliJ IDEA运行环境搭建的完整的过程。因为笔者日常开发采用的是IntelliJ IDEA,所以本文就只写了IntelliJ IDEA的搭建，但是本文采用了Maven来进行构建的，理论上来说其它IDE，比如Eclipse，只要支持Maven,则可以采用本文同样的方法进行，用Eclipse开发的童鞋，按照本文的步骤理论上也是可以运行起来的。</p>

<p>最后，列出几个笔者在搭建的过程中遇到的几个小问题。</p>

<ol>
<li><code>org.apache.catalina.connector.TestRequest</code>类的<code>prepareRequestBug54984</code>中有两个特殊字符<code>äö</code>,在SVN 迁出的时候变为了乱码，导致Maven在编译的时候编译不过，大家可以复制<code>äö</code>替换乱码的字符即可。</li>
<li><code>CompilationUnit</code>类中的<code>public boolean ignoreOptionalProblems()</code>方法被标记为了@Override，但是其实现的接口<code>ICompilationUnit</code>属于<code>org.eclipse.jdt.core.compiler:ecj</code>，而3.x版本的<code>ICompilationUnit</code>中没有<code>ignoreOptionalProblems</code>方法，4.x的版本中才有，因此为了编译通过，本文采用了4.2.2版本。</li>
</ol>


<p>另外本文最终搭建好的环境，我已经放在Github上了，不想搭建的童鞋可以直接clone一份使用。<a href="https://github.com/imtiger/Tomcat">Github仓库地址</a></p>

<p>下篇：<br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构（Tomcat源代码阅读系列之二）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[电子商务网站的类目设计]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/11/category-design-of-e-commerce-website/"/>
    <updated>2013-10-11T11:07:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/11/category-design-of-e-commerce-website</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/11/ejushang.png"></p>

<p>电子商务网站中都会涉及到类目，而类目的设计也是一个电商网站设计的核心之一。本文总结一下总体的设计思路。</p>

<p>首先我们从一个简单的例子说起，假如你要打算买一双<code>耐克40码黑色运动鞋</code>，我们来看看这里面涉及到了哪些关键的信息，其中<code>耐克</code>,<code>40码</code>,<code>黑色</code>,<code>运动鞋</code>是关键的信息，我们再来进一步的分析，耐克是鞋的品牌，40码是鞋的尺寸，黑色是鞋子的颜色，运动鞋是鞋子的分类，对于分类我想大家应该都比较好理解，但是对于品牌（耐克），尺寸（40码），颜色（黑色）我们应该怎么来理解呢？接下来我们就来分析一下如何通过这个具体的例子来抽象出一个公共的模型出来。</p>

<p>在上面的例子中，品牌，尺寸，颜色我们可以抽象出来<code>类目属性</code>的模型，而耐克，40码，黑色我们可以抽象出<code>类目属性值</code>的模型，这样以来我们就知道运动鞋这个类目，它有品牌，尺寸，以及颜色这几个类目属性，而品牌这个类目属性有耐克，阿迪达斯等属性值，尺寸类目属性有38码，39码，40码等类目属性值，而颜色类目属性有黑色，黄色等类目属性值。</p>

<!-- more -->


<p>明白了上面的类目属性和类目属性值的概念以后，咋们再来进一步的分析，我们再来举一个例子，张三买了一双<code>耐克40码黑色的运动鞋</code>，李四买了一双<code>耐克39码蓝色的运动鞋</code>,张三和李四购买的鞋子是同样一款耐克的鞋，只是尺码和颜色不同，从这里我们又可以引入另外两个概念<code>销售属性</code>,<code>关键属性</code>，上面的例子中，尺寸，颜色这些属于销售属性，而品牌就属于关键属性，可能说到这里大家又糊涂了，到底什么样子的属性才算销售属性，什么样子的属性是关键属性呢？要给出这个问题的答案，咋们还得进一步的进行分析，上面说的<code>耐克39码蓝色的运动鞋</code>,<code>耐克40码黑色的运动鞋</code>到底应该怎么抽象，这里需要引入一个线下标准的概念叫<code>SKU（StockKeepintUint）</code>,从字面上面来看sku表示最小存放的单元，怎么理解？当确定了这款运动鞋以后，张三和李四还需要进行进一步的选择，比如要选择尺寸，颜色，才可以确定到底要买哪一款，这里面通过不同的类目属性和类目属性值的组合就可以确定一个SKU，因此构成SKU的属性（比如上例中的尺寸，颜色），我们就将其称之为<code>销售属性</code>,而不影响SKU的属性（比如上例中的品牌），我们可以称之为关键属性（至于关键属性有什么用，我们下面再来讨论。）</p>

<p>接下来，我们来总结一下上面的分析结果，通过上面的分析，我们得到了如下几个模型，每个模型我都会通过简单的代码来标示出最核心的一些属性。</p>

<h3>1. 商品</h3>

<p>商品表示某个可以销售的物品，比如上面所说的耐克的运动鞋就是一个商品。</p>

<figure class='code'><figcaption><span>Product.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Product</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 所在的行业标准类目</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">categoryId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//其它省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2. 类目</h3>

<p>类目也好理解，它是商品的一个分类。</p>

<figure class='code'><figcaption><span>ProductCategory.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ProductCategory</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//父亲类目</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">ProductCategory</span> <span class="n">parent</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//子类目</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">ProductCategory</span><span class="o">&gt;</span> <span class="n">children</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LinkedList</span><span class="o">&lt;</span><span class="n">ProductCategory</span><span class="o">&gt;();</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">description</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//其它省略</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3. 属性</h3>

<p>属性模型可以被多个类目共用，比如品牌，尺寸，颜色，很多类目都要用到这个属性，我们抽象出来以后，类目属性仅仅是引用属性即可。</p>

<figure class='code'><figcaption><span>Property.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Property</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//属性名称，比如品牌，尺寸，颜色等等</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>4. 属性值</h3>

<p>属性值顾名思义就是上面品牌，尺寸等属性的属性值，例如耐克，38码，黑色，蓝色等等。</p>

<figure class='code'><figcaption><span>Value.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Value</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//属性值名称，比如耐克，38码，39码，黑色，蓝色等等 </span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">String</span> <span class="n">valueName</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>5. 类目属性</h3>

<p>类目属性反应了某个类目公共的特征，比如对于鞋子来说就有品牌，尺寸，颜色，对于一个杯子来说可能有容量，颜色等属性。</p>

<figure class='code'><figcaption><span>CategoryProperty.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CategoryProperty</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//类目id </span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">categoryId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//属性id,引用Property类的id.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">propertyId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//表示属性类型，分为销售属性和关键属性</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">PropertyType</span> <span class="n">propertyType</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">enum</span> <span class="n">PropertyType</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 销售属性 */</span>
</span><span class='line'>    <span class="n">SELL_PROPERTY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;销售属性&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">},</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* 关键属性 */</span>
</span><span class='line'>    <span class="n">KEY_PROPERTY</span> <span class="o">{</span>
</span><span class='line'>        <span class="nd">@Override</span>
</span><span class='line'>        <span class="kd">public</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="s">&quot;关键属性&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="nf">getDescription</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>6. 类目属性值</h3>

<p>类目属性值就是类目属性对应的不同的值，比如尺寸这个鞋子的类目属性就具有38码，39码等，颜色有黄色，黑色等。</p>

<figure class='code'><figcaption><span>CategoryPropertyValue.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CategoryPropertyValue</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//没有业务意义，只是数据库主键</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//类目id</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">categoryId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//属性id,引用Property类的id.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">propertyId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">//属性值id,引用Value类的id.</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">valueId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>7. SKU</h3>

<p>SKU是可以确定一个商品的最小的单元，只有确定了SKU，我们才能最终确定某个商品。</p>

<figure class='code'><figcaption><span>StockKeepingUnit.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StockKeepingUnit</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * SKU  ID</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 商品ID，一个商品可以有多个sku</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">productId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 库存数量，查询sku的时候如果提供仓库则可读出库存数量</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">stockQuantity</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * 价格</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">price</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/**</span>
</span><span class='line'><span class="cm">     * SKU 属性列表</span>
</span><span class='line'><span class="cm">     */</span>
</span><span class='line'>    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">SkuProperty</span><span class="o">&gt;</span> <span class="n">skuProperties</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="cm">/**</span>
</span><span class='line'><span class="cm"> * sku 属性</span>
</span><span class='line'><span class="cm"> * 比如颜色红色或者尺存38码等</span>
</span><span class='line'><span class="cm"> * @author Tiger</span>
</span><span class='line'><span class="cm"> * @version 1.0.0 </span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SkuProperty</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">long</span> <span class="n">skuId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">propertyId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">valueId</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过上面的描述，我们清楚了电子商务网站关于商品和类目设计中涉及的主要的模型。接下来我们来看看，这样的设计如何与电子商务网站的搜索相结合。一般电子商务网站都会类似下图所示的搜索界面：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/10/11/e-commerce-category.png"></p>

<p>在上图中所列的其实就是我们上面所说的类目属性以及类目属性值，那么当我们点击其中一个类目属性和类目属性值的时候，怎么去通过搜索检索商品呢？根据上面的描述，我们知道一个商品有多个SKU，而每个SKU又有可能会有多个属性和属性值组合而成，这样的话，我们就可以根据属性和值的Id来对商品进行索引，查询的时候传递属性的id以及属性值的id即可搜索了。我们还是通过上图的例子来简要描述一下。假如我们要买<code>品牌为戴德适用人数为1-2人价格为500-999的汤锅</code>假设品牌的这个属性的id为100，戴德这个属性值的id为200，那么<code>品牌:戴德</code> 这一组属性和属性值就可以表示为<code>100:200</code>,适用人数这个属性的Id为101，而1-2人这个属性值的id为201，那么<code>适用人数:1-2人</code>我们就可以表示为<code>101:201</code>，价格这个属性的id为102，而500-999这个属性值的id为202，那么<code>价格:500-990</code>我们就可以表示为<code>102:202</code>,那么我们的搜索引擎就可以通过100:200,101:201,102:202这3个字符串来建立索引，查询的时候就可以根据同样的字符串来进行查询。</p>

<p>上面我们所说的类目都是指相对稳定的行业标准类目，这种类目结构线下也已经运营了好多年，基本上稳定，不会经常发生变化，标准类目也是面对行业的类目管理人员来说，但是对于电子商务网站的普通用户或者消费者来说，行业的类目可能太过于专业不能理解，这个时候就要引入一个导航类目的概念，导航类目主要目的就是站在消费者的角度来对类目进行划分，那么划分了以后，电商系统中就会存在两套类目：<code>导航类目</code>和<code>行业标准类目</code>，这样做其实也算是体现了软件设计中很重要的一个原则<code>开闭原则</code>，我们通过行业标准类目将商品进行规范话的管理，然后再用导航类目来适应消费者不断变化的需求。说到这里大家可能会想导航类目和行业标准类目又是如何进行关联的呢？接下来我们就来具体分析一下。</p>

<p>假如锅这个类目下面有个炒锅一个子类目，如果随着运营的不断深化，我们发现消费者非常关注炒锅是铁的还是不锈钢的，从行业标准类目的角度来说，铁，不锈钢是炒锅类目材质这个类目属性的两个不同的类目属性值，但是消费者认为铁炒锅是一个类，不锈钢炒锅是另外一个类，那么我们其实就可以做一个导航类目叫<code>铁质炒锅</code>，另外一个导航类目叫<code>不锈钢炒锅</code>，这样用户就可以直接通过类目导航到最终的搜索结果，而不用首先选择炒锅，然后在列表页面选择铁或者不锈钢再来检索了。这个时候不锈钢炒锅对于我们的系统来说，其实是<code>炒锅+材质:不锈钢</code>这个搜索条件的组合，假如炒锅类目id为100，材质属性id为200，不锈钢属性值id为300，那么上面的查询请求，我们就可以转化为<code>100+200:300</code>查询条件，说到这里大家可能已经猜到了我们导航类目应该如何和行业标准类目关联了，其实最简单的方式就是在导航类目中用一个属性保存它关联的后台标准类目id，用另外一个属性保存对应的属性和属性值组合就可以了，当然了你也可以指定一个数据结构来对<code>[类目]* + [属性:属性值]*</code>这中结构进行抽象，然后在导航类目中用一个属性来保存以上的数据结构即可。说到这里我们会发现<code>导航类目</code>其实就是一种对<code>行业标准类目</code>，<code>类目属性</code>和<code>类目属性值</code>的组合。</p>

<p>本文通过一个简单的例子来总结了一下电子商务网站类目设计中相关的一些问题，也欢迎有这方面经验的朋友一起讨论一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat源代码阅读系列开篇]]></title>
    <link href="http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study/"/>
    <updated>2013-10-08T11:18:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/10/08/tomcat-source-code-study</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/10/14/apache_tomcat_bag.jpg">
我想学习Java开发的童鞋，或多或少的都应该接触过Tomcat，Tomcat在Java web开发中占据着非常重要的地位。</p>

<p>之前的时候也林林总总的阅读过Tomcat源代码，但是没有进行过总结。另外我觉得一个技术自己掌握了是一个层次，能将自己掌握的技术，通过文字或者语言跟其他人交流，并让其他人也能快速的理解自己表达意思有是另外一个层次了。因此我决定将自己阅读Tomcat源代码的过程记录一下，并分享到博客中，让有同样兴趣的童鞋可以参考下，也欢迎各位童鞋讨论。</p>

<blockquote><p>本系列没有特别说明的地方，Tomcat版本为7.0.42。</p></blockquote>

<p>接下来我们就来说说本系列所涉及的主要内容吧。<br/>
<a href="http://imtiger.github.io/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>  <br/>
<a href="http://imtiger.github.io/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构（Tomcat源代码阅读系列之二）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a><br/>
<a href="http://imtiger.github.io/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/10/28/tomcat-class-loader/">Tomcat类加载器机制（Tomcat源代码阅读系列之六）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage/">Tomcat Session管理机制（Tomcat源代码阅读系列之七）</a> <br/>
<a href="http://imtiger.github.io/blog/2013/11/08/tomcat-design-pattern/">Tomcat 涉及的设计模式总结（Tomcat源代码阅读系列之八）</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月薪15k-20k招聘高级Java软件工程师]]></title>
    <link href="http://imtiger.github.io/blog/2013/09/27/java-engineer-recruitment/"/>
    <updated>2013-09-27T15:29:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/09/27/java-engineer-recruitment</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/09/27/2013-09-27-01.jpg" width="700" height="350"><br/>
创业一年多，感触颇多，也走过一些弯路，不过总体上还好。随着公司业务的不断扩大，现在需要招聘高级Java软件攻城狮数名，下面简单介绍下：</p>

<p>公司名称: 深圳易居尚网络科技有限公司<br/>
工作地点: 深圳宝安区大宝路41号德丰盛大厦 <br/>
职位名称: 高级Java软件攻城狮<br/>
月薪:    15k-20k</p>

<p>公司介绍: <br/>
我们公司<a href="http://www.ejushang.com">易居尚</a>秉承着<code>让品质走进生活的理念</code>，致力于打造一个品质、高效、便捷的居家用品网络销售平台.咋们公司不打卡，弹性工作制，每天下午有公司大厨做的下午茶，攻城狮童鞋每周可以自由支配20%的工作时间做自己想做的事情，我们技术团队内部有很强互助和知识分享意识（包括技术骚们喜欢的爱情动作片，嘘&hellip;，其他人我不告诉他）当然了还有很多美女和帅哥，想置身互联网和电子商务有理想的的技术骚们，请你加入我们 一起high，<strong>我们不求改变世界，但求超越自我</strong>。也请各位朋友帮忙推荐，推荐成功有神秘礼物相送哦，有意者请联系:<a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#116;&#105;&#103;&#101;&#114;&#x2e;&#122;&#104;&#111;&#x75;&#x40;&#107;&#97;&#114;&#x69;&#x71;&#117;&#46;&#x63;&#111;&#109;">&#116;&#x69;&#x67;&#x65;&#114;&#x2e;&#122;&#104;&#111;&#117;&#64;&#x6b;&#97;&#114;&#x69;&#x71;&#117;&#x2e;&#x63;&#111;&#109;</a> 或者留言给我，另外也可以通过<a href="http://weibo.com/xmuzyq">@krq_tiger</a>新浪微博与我取的联系.</p>

<!-- more -->


<p>最后附上招聘要求：<br/>
<strong>岗位职责</strong>：<br/>
1. 业务需求分析；<br/>
2. 模块设计；<br/>
3. 代码编写，测试；<br/>
4. 技术文档编写；<br/>
5. 协调其他成员完成项目;</p>

<p><strong>岗位要求</strong>:<br/>
1. JAVA基础扎实，理解io、多线程、集合等基础框架，对JVM原理有一定的了解；<br/>
2. 3年及以上使用JAVA开发的经验，对于你用过的开源框架，能了解到它的原理和机制；对Spring,ibatis,struts等开源框架熟悉；<br/>
3. 熟悉常见的设计模式以及设计原则；<br/>
4. 熟悉Linux 操作系统以及mysql数据库，对sql优化有一定的经验；<br/>
5. 喜欢去看及尝试最新的技术，追求编写优雅的代码，从技术趋势和思路上能影响技术团队；<br/>
6. 学习能力强，适应能力好，具备耐心/细心的品质；<br/>
7. 四年及以上工作经验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unix like系统中，查找某个目录下包含特定关键字的文件]]></title>
    <link href="http://imtiger.github.io/blog/2013/09/26/find-files-with-a-keyword-in-a-dir/"/>
    <updated>2013-09-26T22:39:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/09/26/find-files-with-a-keyword-in-a-dir</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/09/27/2013-09-27-02.jpg"></p>

<p>作为一枚程序猿，咋们经常在工作当中会遇到一种场景：   <br/>
<strong>查找某个目录中包含某个关键字的文件</strong>，那么我们如何来实现这个需求呢？我个人的习惯是如果某个任务经常要执行，那么我会习惯性的写一个脚本，建立一个alias，然后每次需要的时候，直接调用脚本来完成任务，这才是咋们程序猿应该有的工作态度嘛。</p>

<p>好了，废话不多了，咋们直接show code啦。</p>

<!-- more -->




<figure class='code'><figcaption><span>find files in a specific dir with a keyword  </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'> <span class="c">#!/bin/bash </span>
</span><span class='line'> <span class="c">#find files in a specific dir with a keyword  </span>
</span><span class='line'> <span class="c">#write by tiger </span>
</span><span class='line'> <span class="c">#2013.09.26</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> -e <span class="s2">&quot;\nThis script finds files in a specific dir with a keyword.\nOK,Please input a keyword:&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">read </span>keyword
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$keyword&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span>  <span class="s2">&quot;keyword can not be null!\n&quot;</span>
</span><span class='line'>    <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi </span>
</span><span class='line'><span class="k">      </span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;\nPlease input the dir path:&quot;</span>
</span><span class='line'><span class="nb">read </span>dirPath
</span><span class='line'><span class="k">while</span> <span class="o">[</span> <span class="s2">&quot;$dirPath&quot;</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>
</span><span class='line'><span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span>  <span class="s2">&quot;The dir can&#39;t be null,pls input it again&quot;</span>
</span><span class='line'>  <span class="nb">read  </span>dirPath
</span><span class='line'><span class="k">done</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$dirPath&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;The $dirPath is not exist!\n\n&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>0
</span><span class='line'><span class="k">fi</span>
</span><span class='line'><span class="k">      </span>
</span><span class='line'><span class="nb">echo</span>  <span class="s2">&quot;\n--------------- Find these files ---------------\n&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">fileCount</span><span class="o">=</span>0
</span><span class='line'><span class="nv">files</span><span class="o">=</span><span class="sb">`</span>ls -R <span class="nv">$dirPath</span> 2&gt; /dev/null | grep -v <span class="s1">&#39;^$&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">for </span>fileName in <span class="nv">$files</span>
</span><span class='line'><span class="k">do  </span>
</span><span class='line'><span class="k">    </span><span class="nv">temp</span><span class="o">=</span><span class="sb">`</span><span class="nb">echo</span> <span class="nv">$fileName</span> | sed <span class="s1">&#39;s/:.*$//g&#39;</span><span class="sb">`</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$fileName&quot;</span> !<span class="o">=</span> <span class="s2">&quot;$temp&quot;</span> <span class="o">]</span>; <span class="k">then </span>
</span><span class='line'><span class="k">        </span><span class="nv">currentDir</span><span class="o">=</span><span class="nv">$temp</span>
</span><span class='line'>    <span class="k">else </span>
</span><span class='line'><span class="k">        </span><span class="nv">fileType</span><span class="o">=</span><span class="sb">`</span>file <span class="nv">$currentDir</span>/<span class="nv">$fileName</span> | grep <span class="s2">&quot;text&quot;</span><span class="sb">`</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$fileType&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span>
</span><span class='line'><span class="k">            </span><span class="nv">temp</span><span class="o">=</span><span class="sb">`</span>grep <span class="nv">$keyword</span> <span class="nv">$currentDir</span>/<span class="nv">$fileName</span> 2&gt; /dev/null<span class="sb">`</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$temp&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then </span>
</span><span class='line'><span class="k">                </span><span class="nb">echo</span> <span class="nv">$currentDir</span>/<span class="nv">$fileName</span>
</span><span class='line'>                <span class="nb">let </span>fileCount++
</span><span class='line'>            <span class="k">fi </span>
</span><span class='line'><span class="k">        fi </span>
</span><span class='line'><span class="k">    fi </span>
</span><span class='line'><span class="k">done </span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$fileCount</span> -gt 0 <span class="o">]</span>;<span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;\n\nFiles Total: $fileCount&quot;</span>
</span><span class='line'>  <span class="nb">echo</span> <span class="s2">&quot;\nFind Finished!\n&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;No files found!&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA['美剧英语每日一句' iOS app（已开源）]]></title>
    <link href="http://imtiger.github.io/blog/2013/09/03/happyenglish-ios-app/"/>
    <updated>2013-09-03T15:28:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/09/03/happyenglish-ios-app</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/09/03/happyenglish.png"><br/>
学习ios开发，自己做了个学习英语的iOS app，app里面的英文资料全部来自微信公共账号&#8221;美剧英语每日一句(id:<code>followmeapp</code>)&ldquo;，微信公共账号每天由托福雅思名师<a href="http://weibo.com/myajia"><code>@吴彧Allen</code></a>更新一句常用地道的美剧英语，作为一枚软件攻城狮，学习英语是必须的嘛,只要每天坚持学一句，积累下来，还愁英语口语水平不提高吗？<br/>
<a href="https://itunes.apple.com/us/app/happyenglish/id669934718?ls=1&amp;amp;mt=8"><code>点我下载app</code></a></p>

<!-- more -->


<p>这个app刚开始只是方便自己学习英语用的，做完了以后，经过公共账号维护者<a href="http://weibo.com/myajia"><code>@吴彧Allen</code></a>的许可，分享出来给大家伙一起用用，欢迎各位使用，有什么意见也可以提提额。</p>

<p>另外本app已经在github上面开源，地址：<a href="https://github.com/imtiger/HappyEnglish">HappyEnglish</a>. 对本app感兴趣的同学可以一起参与一起完善它。</p>

<p>如果大家想关注微信公共账号，可以扫描如下二维码：<br/>
<img src="http://imtiger.github.io/images/2013/09/03/weixin.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实例分析Java Class文件的结构-实践篇]]></title>
    <link href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format-demo/"/>
    <updated>2013-01-30T12:16:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/01/30/java-class-file-format-demo</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/01/30/java-logo.jpg" width="500" height="300"><br/>
在<a href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format/"><code>实例分析Java Class文件的结构-理论篇</code></a>一文中，我们说了Java Class文件结构的理论知识，接下来我们来通过一个具体的例子来理论结合实践的学习一下。
首先我们有一个TestClass类，代码如下：</p>

<figure class='code'><figcaption><span>TestClass.java </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'> <span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">ejushang</span><span class="o">.</span><span class="na">TestClass</span><span class="o">;</span>
</span><span class='line'> <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestClass</span> <span class="kd">implements</span> <span class="n">Super</span><span class="o">{</span>
</span><span class='line'>
</span><span class='line'>         <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">staticVar</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="kd">private</span> <span class="kt">int</span> <span class="n">instanceVar</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>         <span class="kd">public</span> <span class="kt">int</span> <span class="nf">instanceMethod</span><span class="o">(</span><span class="kt">int</span> <span class="n">param</span><span class="o">){</span>
</span><span class='line'>             <span class="k">return</span> <span class="n">param</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="o">}</span>
</span><span class='line'>
</span><span class='line'> <span class="kd">interface</span> <span class="nc">Super</span><span class="o">{</span> <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过jdk1.6.0_37的javac 编译后的TestClass.java对应的TestClass.class的二进制结构如下图所示：</p>

<!-- more -->


<p><img class="center" src="http://imtiger.github.io/images/2013/01/30/test-class-file.png"></p>

<ol>
<li><p>魔数<br/>
从Class的文件结构我们知道，刚开始的4个字节是魔数，上图中从地址00000000h-00000003h的内容就是魔数，从上图可知Class的文件的魔数是0xCAFEBABE。</p></li>
<li><p>主次版本号 <br/>
接下来的4个字节是主次版本号，由上图可知从00000004h-00000005h对应的是0x0000,因此Class的minor_version为0x0000,从00000006h-00000007h对应的内容为0x0032,因此Class文件的major_version版本为0x0032,这正好就是jdk1.6.0不带target参数编译后的Class对应的主次版本。</p></li>
<li><p>常量池的数量 <br/>
接下来的2个字节从00000008h-00000009h表示常量池的数量，由上图可以知道其值为0x0018，十进制为24个,但是对于常量池的数量需要明确一点，常量池的数量是constant_pool_count-1，为什么减一，是因为索引0表示class中的数据项不引用任何常量池中的常量。</p></li>
<li><p>常量池
我们上面说了常量池中有不同类型的常量，下面就来看看TestClass.class的第一个常量，我们知道每个常量都有一个u1类型的tag标识来表示常量的类型，上图中0000000ah处的内容为0x0A，转换成二级制是10，由上面的关于常量类型的描述可知tag为10的常量是Constant_Methodref_info,而Constant_Methodref_info的结够如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/constant-methodref-info.png"> <br/>
<code>class_index</code>指向常量池中类型为CONSTANT_Class_info的常量，从TestClass的二进制文件结构中可以看出class_index的值为0x0004（地址为0000000bh-0000000ch)，也就是说指向第四个常量。 <br/>
<code>name_and_type_index</code>指向常量池中类型为CONSTANT_NameAndType_info常量。从上图可以看出name_and_type_index的值为0x0013，表示指向常量池中的第19个常量.接下来又可以通过同样的方法来找到常量池中的所有常量。不过JDK提供了一个方便的工具可以让我们查看常量池中所包含的常量。通过javap -verbose TestClass 即可得到所有常量池中的常量，截图如下：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/test-class-javap.png"> <br/>
从上图我们可以清楚的看到，TestClass中常量池有24个常量，不要忘记了第0个常量，因为第0个常量被用来表示 Class中的数据项不引用任何常量池中的常量。从上面的分析中我们得知TestClass的第一个常量表示方法，其中class_index指向的第四个常量为java/lang/Object，name_and_type_index指向的第19个常量值为<init>:()V,从这里可以看出第一个表示方法的常量表示的是java编译器生成的实例构造器方法。通过同样的方法可以分析常量池的其它常量。OK，分析完常量池，我们接下来再分析下access_flags。</p></li>
<li>u2 access_flags
表示类或者接口方面的访问信息，比如Class表示的是类还是接口，是否为public,static，final等。具体访问标示的含义之前已经说过了，下面我们就来看看TestClass的访问标示。Class的访问标示是从0000010dh-0000010e，其值为0x0021，根据前面说的各种访问标示的标志位，我们可以知道：0x0021=0x0001|0x0020 也即ACC_PUBLIC 和 ACC_SUPER为真，其中ACC_PUBLIC大家好理解，ACC_SUPER是jdk1.2之后编译的类都会带有的标志。</li>
<li><p>u2 this_class <br/>
表示类的索引值，用来表示类的全限定名称，类的索引值如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/class-index.png"><br/>
从上图可以清楚到看到，类索引值为0x0003，对应常量池的第三个常量，通过javap的结果，我们知道第三个常量为CONSTANT_Class_info类型的常量，通过它可以知道类的全限定名称为：com/ejushang/TestClass/TestClass</p></li>
<li><p>u2 super_class <br/>
表示当前类的父类的索引值，索引值指向常量池中类型为CONSTANT_Class_info的常量，父类的索引值如下图所示，其值为0x0004,查看常量池的第四个常量，可知TestClass的父类的全限定名称为：java/lang/Object.
<img class="center" src="http://imtiger.github.io/images/2013/01/30/super-class.png"></p></li>
<li><p>interfaces_count 、 interfaces[interfaces_count]<br/>
表示接口数量以及具体的每一个接口，TestClass的接口数量以及接口如下图所示，其中0x0001表示接口数量为1，而0x0005表示接口在常量池的索引值，找到常量池的第五个常量，其类型为CONSTANT_Class_info，其值为：com/ejushang/TestClass/Super
<img class="center" src="http://imtiger.github.io/images/2013/01/30/interface-count.png"></p></li>
<li><p>fields_count、field_info <br/>
fields_count表示类中field_info表的数量，而field_info表示类的实例变量和类变量，这里需要注意的是field_info不包含从父类继承过来的字段，field_info的结构如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/field-info.png"><br/>
<code>access_flags</code>表示字段的访问标识，比如public,private,protected，static,final等，access_flags的取值如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/access-flags.png"><br/>
<code>name_index</code> 和 <code>descriptor_index</code>都是常量池的索引值，分别表示字段的名称和字段的描述符，字段的名称容易理解，但是字段的描述符如何理解呢？其实在JVM 规范中，对于字段的描述符规定如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/field-descriptor.png"><br/>
其中大家需要关注一下上图最后一行，它表示的是对一维数组的描述符，对于String[][]的描述符将是[[ Ljava/lang/String,而对于int[][]的描述符为[[I。接下来的attributes_count以及attribute_info分别表示属性表的数量以及属性表。<br/>
下面我们还是以上面的TestClass为例，来看看TestClass的字段表吧。首先我们来看一下字段的数量，TestClass的字段的数量如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/testclass-field-count.png"><br/>
从上图中可以看出TestClass有两个字段，查看TestClass的源代码可知，确实也只有两个字段，接下来我们看看第一个字段，我们知道第一个字段应该为private int staticVar,它在Class文件中的二进制表示如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/field-one.png"><br/>
其中0x001A表示访问标示，通过查看access_flags表可知，其为ACC_PRIVATE,ACC_STATIC,ACC_FINAL,接下来0x0006和0x0007分别表示常量池中第6和第7个常量，通过查看常量池可知，其值分别为：staticVar和I，其中staticVar为字段名称，而I为字段的描述符，通过上面对描述符的解释，I所描述的是int类型的变量，接下来0x0001表示staticVar这个字段表中的属性表的数量，从上图可以staticVar字段对应的属性表有1个，0x0008表示常量池中的第8个常量，查看常量池可以得知此属性为ConstantValue属性，而ConstantValue属性的格式如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/constantvalue-attribute.png"><br/>
其中<code>attribute_name_index</code>表述属性名的常量池索引，本例中为ConstantValue，而ConstantValue的<code>attribute_length</code>固定长度为2，而<code>constantValue_index</code>表示常量池中的引用，本例中，其中为0x0009，查看第9个常量可以知道，它表示一个类型为CONSTANT_Integer_info的常量，其值为0。<br/>
上面说完了<code>private static final int staticVar=0</code>，下面我们接着说一下TestClass的<code>private int instanceVar=0</code>,在本例中对instanceVar的二进制表示如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/field-two.png"><br/>
其中0x0002表示访问标示为ACC_PRIVATE,0x000A表示字段的名称，它指向常量池中的第10个常量，查看常量池可以知道字段名称为instanceVar，而0x0007表示字段的描述符，它指向常量池中的第7个常量，查看常量池可以知道第7个常量为I，表示类型为instanceVar的类型为I，最后0x0000表示属性表的数量为0.</p></li>
<li>methods_count 、method_info <br/>
methods_count表示方法的数量，而method_info表示的方法表，其中方法表的结构如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-info.png">  <br/>
从上图可以看出method_info和field_info的结构是很类似的，方法表的access_flag的所有标志位以及取值如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/access-flags.png">  <br/>
其中<code>name_index</code>和<code>descriptor_index</code>表示的是方法的名称和描述符，他们分别是指向常量池的索引。这里需要结解释一下方法的描述符，方法的描述符的结构为：<code>（参数列表）返回值</code>，比如<code>public int instanceMethod(int param)</code>的描述符为：<code>（I）I</code>，表示带有一个int类型参数且返回值也为int类型的方法，接下来就是属性数量以及属性表了，方法表和字段表虽然都有属性数量和属性表，但是他们里面所包含的属性是不同。接下来我们就以TestClass来看一下方法表的二进制表示。首先来看一下方法表数量，截图如下：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-count.png"><br/>
从上图可以看出方法表的数量为0x0002表示有两个方法，接下来我们来分析第一个方法，我们首先来看一下TestClass的第一个方法的<code>access_flag</code>，<code>name_index</code>,<code>descriptor_index</code>，截图如下：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-one-info.png"><br/>
从上图可以知道access_flags为0x0001，从上面对access_flags标志位的描述，可知方法的access_flags的取值为ACC_PUBLIC,name_index为0x000B，查看常量池中的第11个常量，知道方法的名称为<init>，0x000C表示descriptor_index表示常量池中的第12常量，其值为()V,表示<init>方法没有参数和返回值，其实这是编译器自动生成的实例构造器方法。接下来的0x0001表示<init>方法的方法表有1个属性，属性截图如下：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/init-method-info.png"> <br/>
从上图可以看出0x000D对应的常量池中的常量为Code,表示的方法的Code属性，所以到这里大家应该明白方法的那些代码是存储在Class文件方法表中的属性表中的Code属性中。接下来我们在分析一下Code属性，Code属性的结构如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/code-attribute.png"><br/>
其中<code>attribute_name_index</code>指向常量池中值为Code的常量，<code>attribute_length</code>的长度表示Code属性表的长度（这里需要注意的时候长度不包括attribute_name_index和attribute_length的6个字节的长度）。<br/>
<code>max_stack</code>表示最大栈深度，虚拟机在运行时根据这个值来分配栈帧中操作数的深度.<br/>
<code>max_locals</code>代表了局部变量表的存储空间,它的单位为slot，slot是虚拟机为局部变量分配内存的最小单元，在运行时，对于不超过32位类型的数据类型，比如byte,char,int等占用1个slot，而double和Long这种64位的数据类型则需要分配2个slot，另外max_locals的值并不是所有局部变量所需要的内存数量之和，因为slot是可以重用的，当局部变量超过了它的作用域以后，局部变量所占用的slot就会被重用。 <br/>
<code>code_length</code>代表了字节码指令的数量，而code表示的时候字节码指令，从上图可以知道code的类型为u1,一个u1类型的取值为0x00-0xFF,对应的十进制为0-255，目前虚拟机规范已经定义了200多条指令。<br/>
<code>exception_table_length</code>以及<code>exception_table</code>分别代表方法对应的异常信息。<br/>
<code>attributes_count</code>和<code>attribute_info</code>分别表示了Code属性中的属性数量和属性表，从这里可以看出Class的文件结构中，属性表是很灵活的，它可以存在于Class文件，方法表，字段表以及Code属性中。
接下来我们继续以上面的例子来分析一下，从上面init方法的Code属性的截图中可以看出，属性表的长度为0x00000026,max_stack的值为0x0002,max_locals的取值为0x0001,code_length的长度为0x0000000A，那么00000149h-00000152h为字节码，接下来exception_table_length的长度为0x0000，而attribute_count的值为0x0001，00000157h-00000158h的值为0x000E,它表示常量池中属性的名称，查看常量池得知第14个常量的值为LineNumberTable，LineNumberTable用于描述java源代码的行号和字节码行号的对应关系，它不是运行时必需的属性,接下来我们再看一下LineNumberTable的结构如下图所示：</li>
</ol>


<blockquote><p>如果通过-g:none的编译器参数来取消生成LineNumberTable的话，最大的影响就是异常发生的时候，堆栈中不能显示出出错的行号，调试的时候也不能按照源代码来设置断点，</p></blockquote>

<p><img class="center" src="http://imtiger.github.io/images/2013/01/30/linenumbertable-attribute.png"><br/>
其中<code>attribute_name_index</code>上面已经提到过，表示常量池的索引，<code>attribute_length</code>表示属性长度，而<code>start_pc</code>和<code>line_number</code>分表表示字节码的行号和源代码的行号。本例中LineNumberTable属性的字节流如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/testclass-linenumbertable.png"><br/>
上面分析完了TestClass的第一个方法，通过同样的方式我们可以分析出TestClass的第二个方法，截图如下：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-two.png">
其中<code>access_flags</code>为0x0001,<code>name_index</code>为0x000F,<code>descriptor_index</code>为0x0010，通过查看常量池可以知道此方法为<code>public int instanceMethod(int param)</code>方法。通过和上面类似的方法我们可以知道instanceMethod的Code属性为下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-two-code-attribute.png"></p>

<p>最后我们来分析一下，Class文件的属性，从00000191h-00000199h为Class文件中的属性表，其中0x0011表示属性的名称，查看常量池可以知道属性名称为SourceFile，我们再来看看SourceFile的结构如下图所示：    <br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/sourcefile-attribute.png"><br/>
其中<code>attribute_length</code>为属性的长度，<code>sourcefile_index</code>指向常量池中值为源代码文件名称的常量，在本例中SourceFile属性截图如下：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/test-class-sourcefile.png"><br/>
其中<code>attribute_length</code>为0x00000002表示长度为2个字节，而<code>soucefile_index</code>的值为0x0012,查看常量池的第18个常量可以知道源代码文件的名称为TestClass.java</p>

<p>通过<a href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format/"><code>实例分析Java Class文件的结构-理论篇</code></a>和<a href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format-demo/"><code>实例分析Java Class文件的结构-实践篇</code></a>两篇文章，我们采用理论和实践结合方式来学习了Class 文件的格式。掌握它的格式以后，我们也可以试着写个Java Class类文件的反编译器了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[实例分析Java Class文件的结构-理论篇]]></title>
    <link href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format/"/>
    <updated>2013-01-30T10:33:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/01/30/java-class-file-format</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/01/30/java-logo.jpg" width="500" height="300">  <br/>
今天把之前在Evernote中的笔记重新整理了一下，发上来供对java class 文件结构的有兴趣的同学参考一下。</p>

<p>学习Java的朋友应该都知道Java从刚开始的时候就打着平台无关性的旗号，说“一次编写，到处运行”，其实说到无关性，Java平台还有另外一个无关性那就是语言无关性，要实现语言无关性，那么Java体系中的class的文件结构或者说是字节码就显得相当重要了，其实Java从刚开始的时候就有两套规范，一个是Java语言规范，另外一个是Java虚拟机规范，Java语言规范只是规定了Java语言相关的约束以及规则，而虚拟机规范则才是真正从跨平台的角度去设计的。今天我们就以一个实际的例子来看看，到底Java中一个Class文件对应的字节码应该是什么样子。 这篇文章将首先总体上阐述一下Class到底由哪些内容构成，然后再用一个实际的Java类入手去分析class的文件结构。</p>

<!-- more -->


<p></p>

<p>在继续之前，我们首先需要明确如下几点：<br/>
1. Class文件是有8位为基础的字节流构成的，这些字节流之间都严格按照规定的顺序排列，并且字节之间不存在任何空隙，对于超过8位的数据，将按照Big-Endian的顺序存储的，也就是说高位字节存储在低的地址上面，而低位字节存储到高地址上面，其实这也是class文件要跨平台的关键，因为PowerPC架构的处理采用Big-Endian的存储顺序，而x86系列的处理器则采用Little-Endian的存储顺序，因此为了Class文件在各中处理器架构下保持统一的存储顺序，虚拟机规范必须对起进行统一。    <br/>
2. Class文件结构采用类似C语言的结构体来存储数据的，主要有两类数据项，无符号数和表，无符号数用来表述数字，索引引用以及字符串等，比如u1,u2,u4,u8分别代表1个字节，2个字节，4个字节，8个字节的无符号数，而表是有多个无符号数以及其它的表组成的复合结构。可能大家看到这里对无符号数和表到底是上面也不是很清楚，不过不要紧，等下面实例的时候，我会再以实例来解释。</p>

<p>明确了上面的两点以后，我们接下来后来看看Class文件中按照严格的顺序排列的字节流都具体包含些什么数据：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/java-class-file-format.png"></p>

<p>  <center>（上图来自The Java Virtual Machine Specification Java SE 7 Edition) </center></p>

<p>在看上图的时候，有一点我们需要注意，比如cp_info，cp_info表示常量池，上图中用constant_pool[constant_pool_count-1]的方式来表示常量池有constant_pool_count-1个常量，它这里是采用数组的表现形式，但是大家不要误以为所有的常量池的常量长度都是一样的，其实这个地方只是为了方便描述采用了数组的方式，但是这里并不像编程语言那里，一个int型的数组，每个int长度都一样.明确了这一点以后，我们再回过头来看看上图中每一项都具体代表了什么含义。</p>

<ol>
<li>u4 magic 表示魔数，并且魔数占用了4个字节，魔数到底是做什么的呢？它其实就是表示一下这个文件的类型是一个Class文件，而不是一张JPG图片，或者AVI的电影。而Class文件对应的魔数是0xCAFEBABE.</li>
<li>u2 minor_version 表示Class文件的次版本号，并且此版本号是u2类型的无符号数表示。</li>
<li>u2 major_version 表示Class文件的主版本号，并且主版本号是u2类型的无符号数表示。major_version和minor_version主要用来表示当前的虚拟机是否接受当前这种版本的Class文件。不同版本的Java编译器编译的Class文件对应的版本是不一样的。高版本的虚拟机支持低版本的编译器编译的Class文件结构。比如Java SE 6.0对应的虚拟机支持Java SE 5.0的编译器编译的Class文件结构，反之则不行。</li>
<li>u2 constant_pool_count 表示常量池的数量。这里我们需要重点来说一下常量池是什么东西，请大家不要与Jvm内存模型中的运行时常量池混淆了，Class文件中常量池主要存储了字面量以及符号引用，其中字面量主要包括字符串，final常量的值或者某个属性的初始值等等，而符号引用主要存储类和接口的全限定名称，字段的名称以及描述符，方法的名称以及描述符，这里名称可能大家都容易理解，至于描述符的概念，放到下面说字段表以及方法表的时候再说。另外大家都知道Jvm的内存模型中有堆，栈，方法区，程序计数器构成，而方法区中又存在一块区域叫运行时常量池，运行时常量池中存放的东西其实也就是编译器产生的各种字面量以及符号引用，只不过运行时常量池具有动态性，它可以在运行的时候向其中增加其它的常量进去，最具代表性的就是String的intern方法。</li>
<li>cp_info 表示常量池，这里面就存储了上面说的各种各样的字面量和符号引用。放到常量池的中数据项在<code>The Java Virtual Machine Specification Java SE 7 Edition</code> 中一共有14个常量，每一种常量都是一个表，并且每种常量都用一个公共的部分tag来表示是哪种类型的常量。下面分别简单描述一下,具体细节等到后面的实例中我们再细化。 <br/>
CONSTANT_Utf8_info      tag标志位为1,   UTF-8编码的字符串  <br/>
CONSTANT_Integer_info  tag标志位为3， 整形字面量       <br/>
CONSTANT_Float_info     tag标志位为4， 浮点型字面量    <br/>
CONSTANT_Long_info     tag标志位为5， 长整形字面量 <br/>
CONSTANT_Double_info  tag标志位为6， 双精度字面量 <br/>
CONSTANT_Class_info    tag标志位为7， 类或接口的符号引用<br/>
CONSTANT_String_info    tag标志位为8，字符串类型的字面量<br/>
CONSTANT_Fieldref_info  tag标志位为9,  字段的符号引用 <br/>
CONSTANT_Methodref_info  tag标志位为10，类中方法的符号引用<br/>
CONSTANT_InterfaceMethodref_info tag标志位为11, 接口中方法的符号引用<br/>
CONSTANT_NameAndType_info tag 标志位为12，字段和方法的名称以及类型的符号引用</li>
<li>u2 access_flags 表示类或者接口的访问信息，具体如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/class-access-and-property-modifiers.png"></li>
<li>u2 this_class 表示类的常量池索引，指向常量池中CONSTANT_Class_info的常量</li>
<li>u2 super_class 表示超类的索引，指向常量池中CONSTANT_Class_info的常量</li>
<li>u2 interface_counts 表示接口的数量</li>
<li>u2 interface[interface_counts]表示接口表，它里面每一项都指向常量池中CONSTANT_Class_info常量</li>
<li>u2 fields_count 表示类的实例变量和类变量的数量</li>
<li>field_info fields[fields_count]表示字段表的信息，其中字段表的结构如下图所示：<br/>
<img class="center" src="http://imtiger.github.io/images/2013/01/30/field-info.png"><br/>
上图中access_flags表示字段的访问标示，比如字段是public,private，protect 等，name_index表示字段名 称，指向常量池中类型是CONSTANT_UTF8_info的常量，descriptor_index表示字段的描述符，它也指向常量池中类型为CONSTANT_UTF8_info的常量，attributes_count表示字段表中的属性表的数量，而属性表是则是一种用与描述字段，方法以及类的属性的可扩展的结构，不同版本的Java虚拟机所支持的属性表的数量是不同的。</li>
<li>u2 methods_count表示方法表的数量</li>
<li>method_info 表示方法表，方法表的具体结构如下图所示：
<img class="center" src="http://imtiger.github.io/images/2013/01/30/method-info.png"><br/>
其中access_flags表示方法的访问标示，name_index表示名称的索引，descriptor_index表示方法的描述符，attributes_count以及attribute_info类似字段表中的属性表，只不过字段表和方法表中属性表中的属性是不同的，比如方法表中就Code属性，表示方法的代码，而字段表中就没有Code属性。其中具体Class中到底有多少种属性，等到Class文件结构中的属性表的时候再说说。</li>
<li>attribute_count表示属性表的数量，说到属性表，我们需要明确以下几点：<br/>
1.属性表存在于Class文件结构的最后，字段表，方法表以及Code属性中，也就是说属性表中也可以存在属性表。<br/>
2.属性表的长度是不固定的，不同的属性，属性表的长度是不同的。</li>
</ol>


<p>本篇文章描述了Java Class文件方面的理论知识，下面一篇文章将通过一个实际的例子来详细解释一下Class文件内部到底长什么样。具体请参考本系列的第二篇文章：<br/>
<a href="http://imtiger.github.io/blog/2013/01/30/java-class-file-format-demo/">实例分析Java Class文件的结构-实践篇</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2012年创业回顾与总结]]></title>
    <link href="http://imtiger.github.io/blog/2013/01/22/2012-summary/"/>
    <updated>2013-01-22T11:44:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/01/22/2012-summary</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2013/01/22/2012-summary.jpg" width="450" height="350">
自从用了Evernote以后，发现自己写博客的频率变低了好多，很多时候都是自己直接在Evernote里面直接写笔记，很少来写博客了。不过今天还是把自己前几天在Evernote写的2012年度总结贴出来和大家分享以下，一起交流和进步。</p>

<p>从2012年3月底辞职创业到现在已经10个月了，在过去的10个月里面，我们取得了一些成果，另外一方面我们也犯过一些错误。下面我主要从公司以及个人两个方面对过去的10个月做一下回顾和总结。</p>

<!-- more -->


<p></p>

<h1>1.公司方面：</h1>

<p>公司方面我从业务团队和技术团队的去回顾一下我们前期所遇到的一些问题。</p>

<h2>1.1 业务团队：</h2>

<p>首先我来总结一下今年公司运营团队遇到的问题，主要列举如下：</p>

<ol>
<li>做事目标性不够强
做事之前没有明确的目标，每次遇到事情就是开始搞，也没有指定明确的目标，或者说目标指定的不合理，导致最终指定的目标和现实不符合，总体来说运营活动进展的有些盲目。</li>
<li>做事的结果没有沉淀
做完事情了最终的结果却没有去经常性的总结，有时候事情的结果好，也没有去分析结果为什么好，有时候事情结果不好也没有去想为什么结果不好，总之就是思考的还不够多。</li>
</ol>


<h2>1.2 技术团队：</h2>

<p>今年技术团队主要完成了自己<a href="http://www.ejushang.com">B2C网站</a>的开发,朋友可以去围观下哈，多提提提意见,在开发的过程中我们主要遇到了如下问题：</p>

<ol>
<li><p>网站视觉改版频繁<br/>
这是今年技术团队最严重的一个问题，先后改了3次页面视觉，导致这个主要有两个原因，第一个是因为视觉设计师的经验相对欠缺，另外一个就是我们思维还是不够精益，老是觉得自己要一个有品质，便捷，功能完善的网站，这样不仅延长了项目周期，更重要的发现有时候某些事情是矛盾的，不可能同时都实现的，不过基本上现在我们都改变了思路，采用精益创业的方式进行。</p>

<blockquote><p>这里强烈推荐创业者都看下<a href="http://book.douban.com/subject/11516567/">&lt;&lt;四步创业法>></a>和<a href="http://book.douban.com/subject/10945606/">&lt;&lt;精益创业>></a></p></blockquote></li>
<li><p>缺少总体设计
技术团队今年遇到的另外一个问题就是缺少了总体的设计，在写代码之前没有进行总体设计，都是讨论完了业务以后，我们就直接开始编码了，另外由于前期自己没想清楚业务需求经常改变，所以导致最终代码结构混乱，写完以后虽然功能是做完了，但是不得不花大量的力气去重构代码。</p></li>
<li><p>把问题想的过于复杂</p></li>
</ol>


<p>今年这个是技术团队遇到的另外一个问题，比如关于退换货的问题，前期考虑了订单的各种状态以及退单的各种状态，并且所有的状态都有系统自动审核和判断，并且设计到物流的一系列问题，最终发现自己想的太复杂了，最后还是采用某些状态让客服介入处理的折中处理方案，这样虽然增加了人力成本，但是总体上来说更加符合我们目前创业的现状。</p>

<p>其实做为一个创业公司，出现问题并不可怕，可怕的明明有问题自个却不知道，因此我宁愿清醒的痛着，也不愿意麻木的睡着，知道了公司的问题，2013年我们按照正确的方式去改变就好。</p>

<p>不过虽然我们遇到了很多问题，但是总体上我们还是取得了值得自己肯定的成绩，这主要体现在以下几个方面：</p>

<ol>
<li><p>我们的商品拍摄团队越来越专业
在经过了几个月的反复修改和讨论后，摄影团队对我们的主营类目的拍摄越来越到点子上了，思路也感觉越来越清晰了。</p></li>
<li><p>我们的设计师团队越来越来专业
2012年3月底的时候，我们设计师团队没有形成一个标准，也都是在摸索和尝试，经过几个月的努力，我们已经对我们主营的类目有了标准的详情页面的模板，这样无论是天猫旗舰店，京东旗舰店以及我们自己的网站都形成统一的设计风格，给我们的用户一个统一的体验，也更有利于E居尚渠道品牌的推广。</p></li>
<li><p>我们的开发团队做事情越来越规范
经过这几个月的努力，我们的网站终于在2012年11月19日完成了第一版的对外发布，在这个过程中开发团队做事情也越来越规范了，团队分工也越来越明确了并且越来越默契了哈哈，同时更让我开心的是开发团队的成员个人能力都觉得有了进一步的提升。（其实说到这里，我不得不吐槽下，一个不懂技术的管理者可能觉得付薪水给技术人员，就要让你每天8小时，每周5天都要非常饱和的做工作相关的事情，如果哪天发现你自己没事做，非要没事也要找点事情做，但是我做为一个技术人员，我觉得这样的思路是有问题的，一个技术人员如果每天都做着同样的事情，即使你每天工作24小时又能怎么样，同样的代码写个几百遍有能怎么样，所以在我们技术团队，我一般容许工程师每周话10%-20%的时间去学习也行，参加开源项目也行，让大家去总结去学习，我一直相信团队一方面要看执行力更重要的还是要看团队的成长。）</p></li>
</ol>


<h1>2 个人方面：</h1>

<p>个人方面我主要从我自己对创业的理解，以及对产品，技术，管理几个方面的一些体会，下面就分别对期进行一下总结。</p>

<h2>2.1.创业是什么？</h2>

<p>在说创业是什么的时候，我从以下两个方面来说说创业是什么？</p>

<ol>
<li><p>为什么创业？<br/>
说起为什么创业，这要从淘宝说起，我记得两年前第一次在淘宝百淘培训，我对所有培训的同事说我来淘宝的目的就是为了认识更多的人以后出去自己创业，我也非常庆幸，正是那个时候我认识我的创业搭档，他是一个有11年线下零售行业运营经验经验的人，之前在百安居，顺电等线下零售行业做过好多年，正好我们的能力可以互补。从那以后，我记得2010年7月份的某天凌晨3点，我的创业搭档给我打电话说兄弟你过来我家一下，我们讨论下创业的事情，也就是从那个时候，我和我的创业搭档确定了我们要创业的路，那个时候我们的梦想或者说理想是什么呢？我们认为我们要提升中国这一代人的生活品质，要给他们提供高品质的居家用品，那个时候我觉得创业就是实现理想。时间一晃2年多过去了，我们真正辞职创业都8个月了，随着公司的高速发展，我也越来越发现了公司存在的问题，同时我也越来越睡不着觉，越来越难受，我在重新思考着创业到底是为什么？创业真的是为了实现所谓的梦想和理想那么简单吗？</p></li>
<li><p>我现在理解的创业是什么？    <br/>
我是一个来自中国西北的80后纯爷们，在思考到底创业是什么的过程中，我想了挺多的，我想到了我家人，我亲身的奶奶去世了，那时候因为离家远，我没有回家看她最后一眼，我外婆外公去世了，我也没有回去看他们最后一眼，我妈妈去年做心脏手术，我也没有回去，那个手术是挺危险的一个手术，要心脏停跳建立血液体外循环，然后把心脏里面的瘤子切除，然后再恢复心跳，很多人就是恢复心跳的时候恢复不过来了，然后前段时间，我嫂子去世了，我也没有回家，想了这些事情以后我顿时觉得我他妈的就是特大的一混蛋，为了自己所谓的梦想，理想，忽视了很多应该对亲人负责的关怀，所以我问自己创业真的仅仅是为了实现理想和梦想吗？这是我抛出的来的问题，也希望创业者思考一下。 <br/>
接下来，我来说说，我现在所理解的创业是什么？我觉得实现理想仅仅是一种结果，但是创业是一种过程，一种负责的态度，创业就是一种负责任的生活态度，是一种对用户，员工，投资方，乃至家人，所有关心你信任你的人负责任的态度。我们80后已经到了应该对这个社会担负责任的时候了，我们扪心自问一下，我们每天在做的事情是否对得起我们的客户和用户，是否对得起我们远在故乡的亲人，是否对得起我们的投资方，是否对得起和我们共事的每位伙伴，是否对得起每一个关心你信任你的人，是否对得起2年或者3年以后的自己，更甚者是否对得起这个社会。黑客与画家上面说的好，创业是创造财富而不是掠夺财富，投资方信任创业者投钱给创业者，如果创业者不能创造出价值，那么创业者是不是就是在掠夺财富呢？所以兄弟们，在创业路上的朋友们，别把理想当做创业，理想那仅仅是一个虚无飘渺的，遥远的“幻觉”，创业要成功，还得靠团队抱着积极负责的态度去做好每个人应该做的本职工作，只有每个人都真正负责任了，创业才能成功。</p></li>
</ol>


<p>我之前记得看到李开复老师的一个微博，微博大意就是说结婚了以后的创业者比没有结婚的创业者更容易成功，我当时看到的时候确实没什么感觉，但是我现在真正是感觉产生了共鸣，其实这里面主要就是责任心，因此是否有有责任心是创业成功的必须条件。</p>

<h2>2.2 产品</h2>

<p>产品方面今年主要读了&lt;&lt;人人都是产品经理这本书>>以及阅读了网上一些产品方面的文章，因为之前在淘宝工作过，所以看人人都是产品经理感觉亲身经历一样，说到产品大家都会要以用户为中心，这句话谁都会说，但是要真正的做到却很难，因为我们自己本身也不能代表真实的用户，因此我觉得创业公司，对于产品方面一定要抱着试错的态度，以精益创业的思路来开发产品，通过快速的迭代去验证自己提出的对产品的假设，而不是花了很多的精力做出来的东西缺发现并不是用户真正所需要的。</p>

<h2>2.3 管理</h2>

<p>管理方面主要阅读了&lt;&lt;软件人才管理艺术>>这本书，这本书里面讲的一些思想其实和自己的很多想法是一致的，这可能与自己也是一个工程师有关系吧。工程师可能更容易理解工程师内心需要什么。在技术管理方面我觉得最主要的就是要让团队的每个人都能在技术方面有所成长，其次就是沟通，很多问题都是因为沟通不好引起的，不能因为太忙了就缺少沟通，因此我一般每半个月都会和团队成员沟通一下，看看他们对团队，公司的一些看法，并且从沟通当中我也了解了许多伙伴们的看到的但是自己可能没注意到的地方，因此沟通非常重要。</p>

<p>我也很认可&lt;&lt;软件人才管理艺术>>一书中的一个观点，就是作为技术管理者一定要融入团队和团队打成一片，不要以为和团队成员关系走的太近，会不会自己说话，团队成员执行力不够，通过我这接近一年的实践，我更加真实的感受到，做为一个技术管理者，一定要融入到技术团队的重要性了，只有管理者真正抱着服务的态度融入团队了才能管理好团队，我要特别强调下服务，技术管理者不是整天吆喝着让谁谁去做什么事情，更重要的是你要帮团队成员解决困难。（当然了这也只是我个人不成熟的总结，毕竟我也没管理过什么大团队，只不过分享下自己创业过程中的管理心得）</p>

<p>有时候伙伴事情没有做好，因素可能有很多，排除其它客观的因素，有两个主观的因素很重要：态度和能力，有时候事情结果不好，很多时候管理者都认为别人事情没做好是态度有问题，其实有时候还真的是能力有问题，人家确实也尽力了但是结果就是没有达到预期，因此我觉得要清楚的了解每个伙伴的能力，对他们的能力有比较全面的认识，这样才能更好的优化大家平时的工作，提高工作效率，获得满意的结果。</p>

<p>另外我在说一下关于流程的一些看法，对于一个创业公司，流程是用来遇到了问题解决问题的，而不是为了未来不发生某些事情而指定流程来预防问题的。因此总结下来，我把管理总结为以下几个词：沟通，融入，服务和成长。</p>

<h2>2.4 技术</h2>

<p>技术方面之前可能仅仅关注了自己擅长的一个面，而今年自己创业，从开发，数据库，运维，网络安全，服务器采购各个方面都要去学习，就连开设网站需要的各种备案证书也要亲自去考，比如icp备案，公安局备案等等，毕竟创业不像之前大公司工作，开发只负责开发，数据库有DBA负责，运维，SCM,网络安全等都有人负责，创业了以后各个方面都需要你自己亲自己去做，当然了这里亲自去做的的时候，不要什么东西都要自己从零开始，比如存储，监控，数据统计这些服务完全可以采用国内已经做的比较好的服务，对于存储方面，我推荐又拍云存储，也可以体验下阿里云的服务，对于监控我推荐监控宝，另外对于网站数据的统计功能，我推荐使用百度统计和cnzz，另外百度指数，Google Analytics，Google webmasters，Google trend等也都不错的服务。</p>

<p>技术方面，做为技术人员我想说创业的时候不要为了技术而技术，还要考虑一下性价比，其实做系统就是成本，时间以及质量的折中，比如大家都知道系统具有水平伸缩性比较好，但是现在服务器硬件的提升速度很快，创业初期完全利用垂直伸缩也没什么，不要为了水平伸缩做了太多技术性的活，还是要关注于业务和产品多一点比较好，这样下来也是在一个可控的时间和成本的前提的，做出了符合预期质量的系统，如果真有一天业务量上来了，再考虑对系统进行重构也是可以的。</p>

<p>最后，希望创业者朋友们，一起交流，一起进步.另外大家也可以去我们的<a href="http://www.ejushang.com">B2C网站</a>网站看看，多提提宝贵意见，我们的成长，离不开大家的指导和建议。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shell 脚本简化Java web开发中繁琐的打包、部署等重复劳动]]></title>
    <link href="http://imtiger.github.io/blog/2012/10/28/mutil-appservers-manage/"/>
    <updated>2012-10-28T18:20:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2012/10/28/mutil-appservers-manage</id>
    <content type="html"><![CDATA[<p>在平时的开发工作当中，经常会遇到如下一种场景：</p>

<p>本地需要启动多个tomcat实例，多个tomcat实例通过统一的一个apache web server来管理，并且项目是maven管理的，每次修改了文件要部署的时候，一般会重复做如下事情：</p>

<ol>
<li>maven 打包工程</li>
<li>删除日志文件</li>
<li>启动tomcat实例</li>
</ol>


<p>这样的工作做多了，真的既不高效，也不符合优秀的程序猿的习惯，所以我一般会将其写一个脚本，每次运行下脚本，让脚本帮我们来完成这件事情，岂不快哉！</p>

<p>Ok,I will show the code !</p>

<!-- more -->


<figure class='code'><figcaption><span>tomcatctl.sh </span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>
</span><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="nv">PROJECTS_NAME</span><span class="o">=</span><span class="s2">&quot;eboss,boss,buyersystem,open&quot;</span>
</span><span class='line'><span class="nv">DEV_PROJECT_HOME</span><span class="o">=</span><span class="s2">&quot;/Users/tiger/develop/project/kariqu&quot;</span>
</span><span class='line'><span class="nv">APPSERVER_HOME</span><span class="o">=</span><span class="s2">&quot;/Users/tiger/develop/appserver&quot;</span>
</span><span class='line'><span class="nv">APP_LOG_HOME</span><span class="o">=</span><span class="s2">&quot;/Users/tiger/develop/appserver/apache/logs&quot;</span>
</span><span class='line'><span class="c">##1.kill tomcat pid </span>
</span><span class='line'><span class="nv">appName</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="c">#input var is null</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$appName&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">   </span><span class="nb">echo</span> <span class="s2">&quot;stop appServer $appName&quot;</span>
</span><span class='line'>   <span class="c">#get app pid</span>
</span><span class='line'>   <span class="nv">pid</span><span class="o">=</span><span class="sb">`</span>ps aux  |grep <span class="k">${</span><span class="nv">appName</span><span class="k">}</span> |awk <span class="s1">&#39;{print $2 &quot; &quot; $11}&#39;</span> |grep java |awk <span class="s1">&#39;{print $1}&#39;</span><span class="sb">`</span>
</span><span class='line'>   <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$pid&quot;</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">      </span><span class="nb">kill</span> -9 <span class="nv">$pid</span>
</span><span class='line'>   <span class="k">else</span>
</span><span class='line'><span class="k">      </span><span class="nb">echo</span> -e <span class="s2">&quot;appServer $appName is not yet start !&quot;</span>
</span><span class='line'>   <span class="k">fi</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;please input appServer name !&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c">###2.complie and package war</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;comple project and packaging war ...&quot;</span>
</span><span class='line'><span class="nv">current_project_home</span><span class="o">=</span><span class="nv">$DEV_PROJECT_HOME</span>/<span class="sb">`</span><span class="nb">echo</span> <span class="nv">$PROJECTS_NAME</span> |awk -F<span class="s2">&quot;,&quot;</span> <span class="s1">&#39;{for(i=1;i&lt;=NF;i++) print  $i}&#39;</span> |grep <span class="nv">$appName</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$current_project_home</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;error,$current_project_home don&#39;t exist&quot;</span>
</span><span class='line'>  <span class="nb">exit</span>
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;current project home : $current_project_home&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$current_project_home</span>
</span><span class='line'>mvn clean package -Pdev -DskipTests
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c">###3.clean logs</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;cleaning logs ...&quot;</span>
</span><span class='line'><span class="nb">cd</span> <span class="nv">$APP_LOG_HOME</span>/<span class="nv">$appName</span>
</span><span class='line'>rm -rf  *
</span><span class='line'><span class="nb">cd</span> <span class="nv">$APPSERVER_HOME</span>/<span class="k">${</span><span class="nv">appName</span><span class="k">}</span>-tomcat-7.0.26/logs
</span><span class='line'>rm -rf *.log *.txt *.out
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;clean $logPath success !&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c">###4.start tomcat</span>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;starting tomcat ...&quot;</span>
</span><span class='line'><span class="nv">$APPSERVER_HOME</span>/<span class="k">${</span><span class="nv">appName</span><span class="k">}</span>-tomcat-7.0.26/bin/startup.sh
</span><span class='line'>sleep 3
</span><span class='line'>
</span><span class='line'><span class="c">###5. check tomcat service </span>
</span><span class='line'><span class="nv">newpid</span><span class="o">=</span><span class="sb">`</span>ps aux |grep <span class="k">${</span><span class="nv">appName</span><span class="k">}</span> |grep -v <span class="s2">&quot;grep&quot;</span> | awk <span class="s1">&#39;{print $2}&#39;</span><span class="sb">`</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -n <span class="s2">&quot;$newpid&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> -e <span class="s2">&quot;${appName} tomcat service  success !&quot;</span>
</span><span class='line'><span class="k">else</span>
</span><span class='line'><span class="k">    </span><span class="nb">echo</span> <span class="s2">&quot;start ${appName} tomcat service failed !&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>通过如上的脚本后，启动某个系统的命令如下:<code>  
./tomcatctl.sh systemname</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[QPS（req/sec 每秒请求数）、PV 、RT （响应时间） 之间的关系]]></title>
    <link href="http://imtiger.github.io/blog/2012/08/29/qps-pv-rt/"/>
    <updated>2012-08-29T10:32:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2012/08/29/qps-pv-rt</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2012/08/29/qps-pv-rt.png"></p>

<p>在进行系统性能压测和系统性能优化的时候，会涉及到QPS,PV,RT相关的概念， 本文总结一下QPS,PV,RT之间的关系，放在博客备忘，本文参考了之前在淘宝工作时候的一些资料。</p>

<h3>QPS是什么？</h3>

<p>QPS：单个进程每秒请求服务器的<code>成功次数</code><br/>
<code>QPS = req/sec = 请求数/秒</code></p>

<h3>QPS如何统计？</h3>

<p>QPS统计方式 [一般使用 http_load 进行统计]  <br/>
QPS = 总请求数 / ( 进程总数 *   请求时间 )</p>

<h3>根据QPS推算PV：</h3>

<p>单台服务器每天PV计算:<br/>
公式1：每天总PV = QPS * 3600 * 6<br/>
公式2：每天总PV = QPS * 3600 * 8</p>

<h3>根据QPS,PV推算服务器数量</h3>

<p>服务器数量 =   每天总PV / 单台服务器每天总PV</p>

<p>峰值QPS和机器计算公式：<br/>
原理：每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间  <br/>
峰值时间每秒请求数(QPS)：<code>( 总PV数 * 80% ) / ( 每天秒数 * 20% )</code><br/>
峰值机器数量：<code>峰值时间QPS / 单台机器的QPS</code></p>

<!-- more -->


<p>例子：<br/>
问：每天300w PV 的在单台机器上，这台机器需要多少QPS？<br/>
答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)<br/>
问：如果一台机器的QPS是58，需要几台机器来支持？
答：139 / 58 = 3</p>

<h3>最佳线程数:</h3>

<p>性能压测的情况下，起初随着用户数的增加，QPS会上升，当到了一定的阀值之后，用户数量增加QPS并不会增加，或者增加不明显，同时请求的响应时间却大幅增加。这个阀值我们认为是最佳线程数。</p>

<p>为什么要找最佳线程数</p>

<ol>
<li>过多的线程只会造成，更多的内存开销，更多的CPU开销，但是对提升QPS确毫无帮助</li>
<li>找到最佳线程数后通过简单的设置，可以让web系统更加稳定，得到最高，最稳定的QPS输出</li>
</ol>


<p>最佳线程数的获取：</p>

<ol>
<li>通过用户慢慢递增来进行性能压测，观察QPS，响应时间</li>
<li>根据公式计算:服务器端最佳线程数量=((线程等待时间+线程cpu时间)/线程cpu时间) * cpu数量</li>
<li>单用户压测，查看CPU的消耗，然后直接乘以百分比，再进行压测，一般这个值的附近应该就是最佳线程数量。</li>
</ol>


<p>影响最佳线程数的主要因素：</p>

<ol>
<li>IO</li>
</ol>


<p>IO开销较多的应用其CPU线程等待时间会比较长，所以线程数量可以开的多一些，相反则线程数量要少一些，其实有两种极端，纯IO的应用，比如proxy，则线程数量可以开到非常大（实在太大了则需要考虑线程切换的开销），这种应用基本上后端（比如这个proxy是代理搜索的）的QPS能有多少，proxy就有多少。</p>

<ol>
<li>CPU</li>
</ol>


<p>对于耗CPU的计算，这种情况一般来讲只能开到CPU个数的线程数量。但是并不是说这种应用的QPS就不高，往往这种应用的QPS可以很高，因为耗CPU计算的应用，往往处理单次请求的时间会很短。</p>

<h4>QPS和线程数的关系</h4>

<ol>
<li><p>在最佳线程数量之前，QPS和线程是互相递增的关系，线程数量到了最佳线程之后，QPS持平，不在上升，甚至略有下降，同时响应时间持续上升。</p></li>
<li><p>同一个系统而言，最佳线程数越多，QPS越高</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何构建Java web应用的session框架]]></title>
    <link href="http://imtiger.github.io/blog/2012/05/10/how-to-build-a-session-framework-for-java-web-application/"/>
    <updated>2012-05-10T09:31:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2012/05/10/how-to-build-a-session-framework-for-java-web-application</id>
    <content type="html"><![CDATA[<p>之前写过一个Java web的session框架，并且已经用于生产环境，运行良好。今天将我之前Evernote的笔记重新整理一下发布到博客上供有兴趣的同学参考下，也欢迎各位一起讨论。</p>

<p>做web开发的朋友都知道，一个网站在发展的过程中，随着流量的不断增加，必然会遇到伸缩性的问题，虽然目前硬件的价格已经在减低，有时候可以通过垂直伸缩的方式来达到应对访问量不断增加的麻烦，但是垂直伸缩总是会遇到瓶颈，那么此时就需要水平伸缩了。当水平伸缩的时候，最重要的一点就是状态管理，而web应用的状态通产采用httpsession的管理方式，不同的web server(比如tomcat,jboss,jetty等等)都提供了对httpsession的支持，但是webserver通常采用了集群节点之间互相复制session状态的方式来进行状态管理，这样随着集群节点的增加，集群之间的复制的开销会越来越大，这从某种程度上来说也限制了应用的伸缩性。本文就简单总结一下构建一个Java web 应用的session框架的思路是什么样子。</p>

<p>本文将会从session状态的存储，session信息的管理，安全性问题，以及如何与Servlet Container结合。</p>

<blockquote><p>在开始之前，我们首先需要明确一点这里所说的session的概念是广义的，不仅仅是指httpSession。</p></blockquote>

<!-- more -->


<h1>Session状态存储</h1>

<p>咋们首先来谈谈Session状态的存储。我们先来看看平常的日常工作当中，我们是怎么存储Session状态信息的。我们举个例子来说，比如用户的浏览历史，我们可能会将其保存在http cookie中，另外比如用户是否登陆的信息，我们可能选择保存在httpsession之中。上面说了存储到httpsession中会受限于web server的实现，伸缩性有限。那么我们在构建session框架的时候，可以考虑用一个分布式的缓存服务器来存储session状态，比如可以利用memecached服务器来进行存储。</p>

<p>另外这里面也涉及到另外一个问题，状态的跟踪问题，我们如何区分不同的用户的session信息？这里其实就需要通过cookie来实现了，我们会给每个用户产生的session分配一个唯一的Id，把这个id存放在cookie中，当用户请求服务器的时候会带上sessionId,服务器从cookie中获取sessionId后可以根据Id从缓存中获取到session状态信息。</p>

<p>说到这里，可能有同学会问？为什么我们不能把信息都放到cookie中，这样服务器端都不用存储任何的状态信息，这样对于服务器来说不也是无状态了吗？其实这里面主要涉及安全性以及浏览器的实现问题，因为存储到cookie中的信息是不安全的，黑客可以进行cookie劫持，这样你保存到cookie中的信息就会被非法用户获取了。另外我们知道不同的浏览器对cookie数量以及大小是有限制的，比如IE8限制cookie的大小为4095字节，每个域名cookie的数量为50个，这样以来就可能会遇到cookie丢失的问题。</p>

<p>综上，Session状态的存储，我们需要结合客户端存储和服务器端存储，在客户端存储中，我们借用http cookie来存储sessionId,而session的具体信息我们可以存放到服务器端，而具体实现的过程中，我们可以将起放入分布式缓存服务器中。</p>

<h1>Session信息的管理</h1>

<p>接下来我们再来说说Session信息管理，一些公司可能对这块没有什么重视，session状态的管理完全依赖于开发人员自己，开发人员可以随意将信息写入到cookie或者httpsession中，这样造成的问题就是session状态混乱，最后随着开发人员的离职，新来的人只能通过查看源代码的方式来了解session中都放入了什么信息，到后来可能公司没人知道在cookie或者httpsession中到底存放了哪些信息了？这对与系统的维护以及扩展都是不利的，那么怎么解决这个问题？</p>

<p>其实这个时候我们就可以通过session信息的统一配置话管理来解决了。具体来说就是Session框架通过一个配置文件对可放入的session信息进行统一的管理，要想往cookie或者服务器session中放入任何信息都要在配置文件中配置，这样才容许写入。这样要知道session中存放了哪些信息只需要查看配置文件即可知道了。</p>

<p>不过采用配置文件管理session信息了以后，可能又会遇到一个问题，配置文件如何管理？这个不同的公司可以有不同的做法，比如配置文件可以存放在数据库中，session框架启动的时候去数据库查询到最新的配置信息，或者也可以将其放入classpath文件中，session框架通过启动的时候去classpath中获取，另外一些公司都有统一的配置管理服务器，这样可以将session配置也纳入到配置管理服务器中，这样就更加规范了。</p>

<h1>信息安全性问题</h1>

<p>上面说了session信息的存储，我们的Session框架要支持两种存储方式，一种是cookie的客户端存储，一种是存储到服务端，当存储到客户端cookie中的，信息容易被非法意图的人窃取，如果什么信息都明文保存在cookie中，那么就存在用户信息泄露的风险。那么此时就需要对放入cookie的信息进行加密处理。关于加密和解密算法本人也没有深入研究过，不过这方面已经有很多人给出了解决方案。我在写Session框架的时候，采用了<a href="http://www.schneier.com/blowfish.html">Blowfish</a>，有兴趣的同学可以去看看。</p>

<h1>如何与Servlet Container结合</h1>

<p>本文的最后，咋们来看看在Java web 开发中，自己开发的Session框架如何与Servlet 容器结合起来。
Servlet规范中有过滤器的概念，过滤器是每个请求过来的时候，可以在请求进入Servlet之前和之后可以做一些通用的事情，那么我们的Session框架可以提供一个SessionFilter纳入到Servlet容器的管理。下面通过一个简单图来形象的描述一下Session框架中主要的角色。
<img class="center" src="http://imtiger.github.io/images/2012/05/10/sessionFramework.jpg">
上图中绿色的部分为Session框架的核心部分，我们下面分别来描述一下。</p>

<h2>SessionFilter</h2>

<p>SessionFilter的主要职责就是对web server生成的HttpServletRequest和HttpServletReponse进行封装，将其封装为<code>CustomHttpServletRequest</code>和<code>CustomHttpServletReponse</code>.
SessionFilter的核心代码如下：</p>

<figure class='code'><figcaption><span>SessionFilter.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">doFilter</span><span class="o">(</span><span class="n">ServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">ServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">chain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span><span class="o">,</span> <span class="n">ServletException</span> <span class="o">{</span>
</span><span class='line'>    <span class="c1">//对原生的HttpServletRequest和HttpServletReponse进行封装。</span>
</span><span class='line'>    <span class="n">CustomSessionServletRequest</span> <span class="n">customRequest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomSessionServletRequest</span><span class="o">((</span><span class="n">HttpServletRequest</span><span class="o">)</span> <span class="n">request</span><span class="o">);</span>
</span><span class='line'>    <span class="n">CustomSessionServletResponse</span> <span class="n">customResponse</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CustomSessionServletResponse</span><span class="o">((</span><span class="n">HttpServletResponse</span><span class="o">)</span> <span class="n">response</span><span class="o">);</span>
</span><span class='line'>    <span class="c1">//对于一些静态资源可以不经过session框架过滤</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">letitgo</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">chain</span><span class="o">,</span> <span class="n">customRequest</span><span class="o">))</span> <span class="k">return</span><span class="o">;</span>
</span><span class='line'>    <span class="c1">//reponseBuffer开关，控制服务器刷新响应流的方式，如果打开的话，会等整个请求处理完成后一次性刷到客户端</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">needResponseBuffered</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;session framework responseBuffered is on&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">customResponse</span><span class="o">.</span><span class="na">setWriterBuffered</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="n">CustomSession</span> <span class="n">customSession</span> <span class="o">=</span> <span class="n">createCustomSession</span><span class="o">(</span><span class="n">customRequest</span><span class="o">,</span> <span class="n">customResponse</span><span class="o">);</span>
</span><span class='line'>    <span class="k">try</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">chain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">customRequest</span><span class="o">,</span> <span class="n">customResponse</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="kc">null</span> <span class="o">!=</span> <span class="n">customSession</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>                <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;session framework start to commit session--&quot;</span> <span class="o">+</span> <span class="s">&quot;customSession.commit&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="o">}</span>
</span><span class='line'>            <span class="c1">//将后续业务写入session的信息进行存储，这里就涉及到了将信息写入cookie或者缓存</span>
</span><span class='line'>            <span class="n">customSession</span><span class="o">.</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">logger</span><span class="o">.</span><span class="na">error</span><span class="o">(</span><span class="s">&quot;session framework occur exception&quot;</span><span class="o">,</span> <span class="n">ex</span><span class="o">);</span>
</span><span class='line'>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">RuntimeException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;session framework start to commit buffer--&quot;</span> <span class="o">+</span> <span class="s">&quot;customResponse.commitBuffer&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//将响应流刷到客户端</span>
</span><span class='line'>        <span class="n">customResponse</span><span class="o">.</span><span class="na">commitBuffer</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>CustomHttpServletRequest</h2>

<p>CustomHttpServletRequest包转了原生的HttpServletRequest，它最核心的就是要覆盖getSession方法，主要的代码如下：</p>

<figure class='code'><figcaption><span>CustomHttpServletRequest.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">CustomSession</span> <span class="nf">getSession</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">session</span><span class="o">;</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">CustomSession</span> <span class="nf">getSession</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">create</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nf">getSession</span><span class="o">();</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>这样当应用通过getSession返回的则是经过封装以后的代码。</p>

<h2>CustomHttpServletReponse</h2>

<p>CustomHttpServletReponse封装了原生的HttpServletReponse,此类的实现的时候需要注意在Servlet3.0之前，不支持httponly的cookie，要写入Httponly的cookie需要手动通过addHeader的方法去加入，而Servlet3.0以后，可以直接通过addCookie方法实现，具体的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kt">void</span> <span class="nf">addCookie</span><span class="o">(</span><span class="n">CustomCookie</span> <span class="n">cookie</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">cookie</span><span class="o">.</span><span class="na">isHttpOnly</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">addHeader</span><span class="o">(</span><span class="n">SET_COOKIE</span><span class="o">,</span> <span class="n">buildHttpOnlyCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">));</span>
</span><span class='line'>        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="kd">super</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外我们知道标准的Servlet 输出流有一个缓存区，当应用向缓存区写入数据的时候，如果缓存区已经满了就会刷流到客户端了，这样的话就有可能造成一种情况：部分流已经刷到客户端了，但是后来服务器处理抛异常了，这样用户可能看到的状态可能和服务器不一致，为了解决这个问题，我们可以重写getOutputStream和getWriter方法，这两个方法在返回一个经过我们包装的输出流，这样Session框架就可以保留应用写入的数据到最后请求处理完了以后再由SessionFilter刷新流到客户端。具体的伪代码可以参考如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">ServletOutputStream</span> <span class="nf">getOutputStream</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isWriterBuffered</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;Created new byte buffer&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//这里返回一个ByteArrayOutputStream，方便Session框架控制输出流</span>
</span><span class='line'>        <span class="n">ByteArrayOutputStream</span> <span class="n">bytes</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ByteArrayOutputStream</span><span class="o">();</span>
</span><span class='line'>        <span class="n">stream</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedServletOutputStream</span><span class="o">(</span><span class="n">bytes</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">stream</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getOutputStream</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Override</span>
</span><span class='line'><span class="kd">public</span> <span class="n">PrintWriter</span> <span class="nf">getWriter</span><span class="o">()</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">isWriterBuffered</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">logger</span><span class="o">.</span><span class="na">isDebugEnabled</span><span class="o">())</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">&quot;response.getWriter(): Created new character buffer&quot;</span><span class="o">);</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//这里返回StringWriter 方便Session框架控制输出流</span>
</span><span class='line'>        <span class="n">StringWriter</span> <span class="n">chars</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringWriter</span><span class="o">();</span>
</span><span class='line'>        <span class="n">writer</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BufferedServletWriter</span><span class="o">(</span><span class="n">chars</span><span class="o">);</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">writer</span><span class="o">;</span>
</span><span class='line'>    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>        <span class="k">this</span><span class="o">.</span><span class="na">getSession</span><span class="o">().</span><span class="na">commit</span><span class="o">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getWriter</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>另外需要重写的一些方法比如sendError,sendRedirect也需要重写。</p>

<h2>CustomHttpSession</h2>

<p>CustomHttpSession主要负责管理Session中的状态信息，它是HttpSession的子类，它会根据Session框架的配置，将不同的信息保存到对应的SessionHolder中，对于CustomHttpSession，我们主要需要重写setAttribute和getAttribute方法。它的伪代码如下：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">,</span> <span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="c1">//1. 根据Session框架的配置文件，找到name的属性对应的session配置项</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SessionConfigItem</span> <span class="n">sessionConfigItem</span> <span class="o">=</span> <span class="n">sessionConfig</span><span class="o">.</span><span class="na">getSessionConfigItem</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sessionConfigItem</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span><span class="o">;</span><span class="c1">//如果配置项为空，说明此name的属性没有经过session框架配置，不能写入</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="c1">//2. 根据配置类型获取具体的SessionHolder</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SessionHolder</span> <span class="n">sessionHolder</span> <span class="o">=</span> <span class="n">sessionHolders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sessionConfigItem</span><span class="o">.</span><span class="na">getHolderType</span><span class="o">());</span>
</span><span class='line'>        <span class="c1">//2. 找到对应的SessionHolder将其存储</span>
</span><span class='line'>        <span class="n">sessionHolder</span><span class="o">.</span><span class="na">setAttribute</span><span class="o">(</span><span class="n">sessionConfigItem</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'>    <span class="nd">@Override</span>
</span><span class='line'>    <span class="kd">public</span> <span class="n">Object</span> <span class="nf">getAttribute</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SessionConfigItem</span> <span class="n">sessionConfigItem</span> <span class="o">=</span> <span class="n">sessionConfig</span><span class="o">.</span><span class="na">getSessionConfigItem</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sessionConfigItem</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="kd">final</span> <span class="n">SessionHolder</span> <span class="n">sessionHolder</span> <span class="o">=</span> <span class="n">sessionHolders</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">sessionConfigItem</span><span class="o">.</span><span class="na">getHolderType</span><span class="o">());</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">sessionHolder</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">sessionHolder</span><span class="o">.</span><span class="na">getAttribute</span><span class="o">(</span><span class="n">sessionConfigItem</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>SessionHolder</h2>

<p>SessionHolder抽象了Session保存的接口，具体实现可以有好多种，比如你可以选择把session信息保存到cookie中，也可以将其保存到缓存中，甚至你可以将其保存到文件系统中。我自己写的session框架，根据前面的讨论，提供了两种存储方式，CookieHolder和CacheHolder分别对应客户端存储和服务器端缓存存储。在CookieHolder中要涉及到对cookie的解析，保存以及加密等操作，而CacheHolder涉及到从分布式缓存中查询到Session的信息以及同步session信息到缓存等一系列操作，具体代码我就贴了。</p>

<p>上面就是写一个Session框架大体的思路，对此有兴趣的同学可以一起讨论一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript 作用域和作用域链解析]]></title>
    <link href="http://imtiger.github.io/blog/2011/10/17/javascript-scope-and-scope-chain-explain/"/>
    <updated>2011-10-17T18:26:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2011/10/17/javascript-scope-and-scope-chain-explain</id>
    <content type="html"><![CDATA[<p><img class="center" src="http://imtiger.github.io/images/2011/10/17/JavaScript-Logo.png">
最近看了下JavaScript方面的几本书，把里面的一些核心概念按照自己的理解做个总结。</p>

<p>JavaScript 中有 Scope( 作用域 ) ， Scope chain( 作用域链 ) ， Execute context( 执行上下文 ) ， Active Object ( 活动对象 ),Dynamic Scope( 动态作用域 ) ， Closure( 闭包 ) 这些概念，要理解这些概念，我们从静态和动态两个方面去分析一下。</p>

<p>首先我们写一个简单的 function 来做一个例子：</p>

<figure class='code'><figcaption><span>JavaScript code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span><span class="p">(</span><span class="nx">num1</span><span class="p">,</span> <span class="nx">num2</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">sum</span> <span class="o">=</span> <span class="nx">num1</span> <span class="o">+</span> <span class="nx">num2</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">sum</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<!-- more -->


<p>我们定义了一个具有两个形参的 add 函数。</p>

<p><strong>静态方面：</strong></p>

<p>当创建 add 函数的时候， Javascript 引擎会创建 add 函数的 <code>Scope chain</code>, 这个作用域链指向了 <code>Global Context( 全局上下文 )</code> 。如果用图形形象化的表述如下图所示：</p>

<p><img class="center" src="http://imtiger.github.io/images/2011/10/17/add-method.jpg"></p>

<p>从上图可以看出，当 add 函数创建的时候，作用域链就已经创建了，因此可以得出一个结论:</p>

<blockquote><p>函数的作用域链是创建函数的时候就已经创建了，而不是动态运行期。</p></blockquote>

<p>下面就来看看动态运行期的时候会发生什么事情。</p>

<p><strong>动态方面：</strong></p>

<p>当执行 add 函数的时候， JavaScript 会创建一个 <code>Execute context （执行上下文）</code>，执行上下文中就包含了 add 函数运行期所需要的所有信息。 Execute context 也有自己的 Scope chain, 当函数运行的时候， JavaScript 引擎会首先从用 add 函数的作用域链来初始化执行上下文的作用域链，然后 JavaScript 引擎又会创建一个 Active Object, 这个对象里面包含了函数运行期的所有局部变量，参数以及 this 等变量。</p>

<p>如果形象的描述 add 函数动态运行期会发生什么，可以用如下图来描述：
<img class="center" src="http://imtiger.github.io/images/2011/10/17/add-method-runtime.jpg"></p>

<p>从上图可以看出，执行上下文是一个动态的概念，它是当函数运行的时候创建的，同时 Active Object 对象也是一个动态的概念，它是被执行上下文的作用域链引用的。因此可以得出一个结论：</p>

<blockquote><p>执行上下文和活动对象都是动态概念，并且执行上下文的作用域链是由函数作用域链初始化的。</p></blockquote>

<p>上面说了函数作用域和执行上下文作用域，下面接着说一下动态作用域的问题.<br/>
当在 JavaScript 通过 with 语句， try-catch 的 catch 子句，以及 eval 方法的时候， JavaScript 引擎就会动态的改变执行上下文的作用域。下面还是通过一个例子来看看：</p>

<figure class='code'><figcaption><span>JavaScript Code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">initUI</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">with</span> <span class="p">(</span><span class="nb">document</span><span class="p">){</span> <span class="c1">//avoid!</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">bd</span> <span class="o">=</span> <span class="nx">body</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">links</span> <span class="o">=</span> <span class="nx">getElementsByTagName</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="nx">i</span><span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>      <span class="nx">len</span> <span class="o">=</span> <span class="nx">links</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
</span><span class='line'>      <span class="k">while</span><span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">update</span><span class="p">(</span><span class="nx">links</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;go-btn&quot;</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">start</span><span class="p">();</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">bd</span><span class="p">.</span><span class="nx">className</span> <span class="o">=</span> <span class="s2">&quot;active&quot;</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当执行上面的 initUI 函数的时候， JavaScript 会动态的创建一个 with 语句对应的作用域放到执行上下文作用域链的最前端，通过下图可以形象的描述上述过程，下图红色标注的区域就显示了 with 语句产生的作用域。
<img class="center" src="http://imtiger.github.io/images/2011/10/17/initui-method.jpg"></p>

<p>最后，我们来看看 JavaScript 最神秘的 Closure （闭包），闭包在 JavaScript 其实就是一个函数，闭包是在函数运行期被创建的，下面还是以一个实例来看看：</p>

<figure class='code'><figcaption><span>JavaScript Code</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">assignEvents</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="s2">&quot;xdi9592&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&quot;save-btn&quot;</span><span class="p">).</span><span class="nx">onclick</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">saveDocument</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>当上面的 assignEvents 函数被执行的时候，会创建一个闭包，而这个闭包会引用 assignEvents 作用域中的 id 变量，如果按照传统的编程语言的方式， id 是存储在堆栈上的一个变量，当函数执行完了以后 id 就消失，那么怎么可能再次引用呢？显然这里 JavaScript 采用了另外的方式。<br/>
下面就来看看 JavaScript 是如何来实现闭包的。当执行 assignEvents 函数的时候， JavaScript 引擎会创建assignEvents函数执行上下文的作用域链，这个作用域链包含了 assignEvents 执行时的活动对象，而同时 JavaScript 引擎也会创建一个闭包，而闭包的作用域链也会引用 assignEvent 执行时候的活动对象，这样当 assignEvents 执行完的时候，虽然它本身执行上下文的作用域链不再引用活动对象了，但是闭包还是引用着 assignEvents 运行期对应的活动对象，这就解释了 JavaScipt 内部的闭包机制。可以用下图形象的表述上面 assignEvents 函数运行期的情形：
<img class="center" src="http://imtiger.github.io/images/2011/10/17/assignevents-method.jpg"></p>

<p>从上面可以看出，当 assignEvents 函数执行完毕以后， document.getElementById(&ldquo;save-btn&rdquo;).onclick 引用了闭包，这样当用户点击 save-btn 的时候，就会触发闭包的执行，那么下面就来看看闭包执行时的情形。前面也说了 JavaScript 中闭包其实就是函数，因此闭包执行和函数执行时的情形是一致的，通过下图来形象的描述上述 onclick 事件所关联的闭包。
<img class="center" src="http://imtiger.github.io/images/2011/10/17/closure-runtime.jpg"></p>

<p>从上图可以看出 JavaScript 引擎首先创建了闭包的执行上下文，然后用闭包作用域链来初始化闭包的执行上下文作用域链，最后再将闭包执行时对应的活动对象放入到作用域的最前端，这也进一步验证了闭包就是函数的论断。</p>

<p>参考资料：</p>

<ol>
<li><a href="http://book.douban.com/subject/5362856/">High Performance JavaScript</a></li>
<li><a href="http://book.douban.com/subject/4886879/">JavaScript高级程序设计</a></li>
</ol>

]]></content>
  </entry>
  
</feed>
