<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | I'm Tiger,一个有理想爱折腾的程序员!]]></title>
  <link href="http://imtiger.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://imtiger.github.io/"/>
  <updated>2014-04-05T21:56:08+08:00</updated>
  <id>http://imtiger.github.io/</id>
  <author>
    <name><![CDATA[imtiger]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to install mod_jk on mac osx Mavericks(1.9)]]></title>
    <link href="http://imtiger.github.io/blog/2014/04/03/how-to-install-mod-jk-on-mac-osx-10-dot-9/"/>
    <updated>2014-04-03T16:53:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2014/04/03/how-to-install-mod-jk-on-mac-osx-10-dot-9</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2014/04/Mavericks.jpg"></p>

<p>最近要在mac osx 10.9上集成apache 和 Tomcat，采用mod_jk的方式进行集成，但是在过程中遇到了一些在10.8上面没有遇到的蛋疼的问题，本篇文章就做一下总结。</p>

<h1>第一步 下载mod_jk源代码</h1>

<p>首先去<a href="http://tomcat.apache.org/connectors-doc/">官方网站</a>下载mod_jk的代码,在笔者写本篇总结的时候，最新版本的是1.2.39，请根据对应的apache版本选择相应版本的mod_jk下载。</p>

<h1>第二步 安装mod_jk</h1>

<p>笔者将源代码放在~/Download目录下面。接下来我们就来看看如何安装mod_jk.</p>

<p>```bash
cd ~/Downloads/tomcat-connectors-1.2.39-src/native</p>

<p>./configure CFLAGS=&lsquo;-arch x86_64&rsquo; APXSLDFLAGS=&lsquo;-arch x86_64&rsquo; &mdash;with-apxs=/usr/sbin/apxs
```</p>

<p>执行上面的命令结果出现了一个错误:</p>

<p><code>bash
configure: error: could not detect a 32-bit integer type
</code></p>

<!-- more -->


<p>上面错误的描述是无法发现一个32位的整型。</p>

<p>通过查看configure，我们发现configure文件中有如下的语句：</p>

<p><code>bash
  #ifdef HAVE_INTTYPES_H
  # include &lt;inttypes.h&gt;
  #endif
  #ifdef HAVE_STDINT_H
  # include &lt;stdint.h&gt;
  #endif
</code></p>

<p>初步判断应该在这两个文件中定义了32位的整形。而在mac osx 中的头文件是放在/usr/include目录下的，我们查看此目录发现并没有此头文件，笔者google一下，发现了如下这篇文章：<a href="http://marchtea.com/?p=104">MAC OSX下include头文件缺失引起的问题及解决办法, command line tools 安装</a></p>

<p>上面的文章提到可以用如下的命令安装命令行工具，此命令会安装上文提到的stdint.h文件。</p>

<p><code>bash
xcode-select --install
</code>
运行上面命令以后，我们会发现/usr/include 目录中出现了stdint.h文件。再接着运行一下configure，发现没有任何错误。然后运行<code>make install</code>，安装完成后会在/usr/libexec/apache2/ 生成mod_jk.so文件。</p>

<h1>第三步 配置apache</h1>

<p>修改apache配置文件httpd.conf(在osx 10.9上面，httpd.conf位于/etc/apache2 目录)，增加如下语句：<br/>
<code>LoadModule jk_module libexec/apache2/mod_jk.so</code></p>

<p>Over.Have fun,guys!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java8指南[Java 8 Tutorial]]]></title>
    <link href="http://imtiger.github.io/blog/2014/03/23/java-8-tutorial/"/>
    <updated>2014-03-23T10:48:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2014/03/23/java-8-tutorial</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2014/03/java8.png"></p>

<p>本文翻译自<a href="http://winterbe.com/posts/2014/03/16/java-8-tutorial/">Java 8 Tutorial</a></p>

<blockquote><p><a href="https://twitter.com/mreinhold/status/429603588525281280">&ldquo;Java还没死-大家正在纷纷议论&rdquo;</a></p></blockquote>

<p>首先欢迎大家来看我对Java8的介绍。本文将引导你一步步的了解所有新的语言特性。利用简短的代码片段，你将学习如何去使用<code>缺省接口方法（default interface methods）</code>,<code>lambda 表达式</code>,<code>方法引用（method references）</code>和<code>可重复注解（repeatable annotations）</code>.当你看到本文结束的时候，你将非常熟悉像<code>Streams</code>,<code>函数式接口</code>,<code>map 扩展</code>和<code>新的Date API</code>API的变化。</p>

<p>这里没有整篇的文字-仅仅是一系列注释的代码片段。让我们开启本文的愉快之旅吧。</p>

<h1>接口缺省方法（Default Methods for Interfaces）</h1>

<p>Java8容许通过<code>default</code>关键字给接口增加非抽象的方法实现,这个特性也可以叫做<code>扩展方法(Extension Methods)</code>.这里是我们第一个例子： <br/>
```java</p>

<p>interface Formula {</p>

<pre><code>double calculate(int a);

default double sqrt(int a) {
    return Math.sqrt(a);
}
</code></pre>

<p>}
```</p>

<!-- more -->


<p>除了calculate抽象方法以外，Formula接口还定义了一个缺省方法<code>sqrt</code>，这样以来，实现类就只需要实现抽象方法即可，缺省方法<code>sqrt</code>可以不用重新实现拿来即用。</p>

<p>```java
Formula formula = new Formula() {</p>

<pre><code>@Override
public double calculate(int a) {
    return sqrt(a * 100);
}
</code></pre>

<p>};</p>

<p>formula.calculate(100);     // 100.0
formula.sqrt(16);           // 4.0
<code>``
</code>formula<code>通过匿名对象实现，上面的代码非常冗长：用了6行的代码实现了如此简单的</code>sqrt(a*100)`的计算。正如我们即将在接下来的部分所了解的，在Java8中，我们可以通过更加漂亮的方式来实现单一方法对象。</p>

<h1>Lambda表达式(Lambda expressions)</h1>

<p>让我们用一个之前版本Java中排序一个字符串列表的简单例子开始：
```java
List<String> names = Arrays.asList(&ldquo;peter&rdquo;, &ldquo;anna&rdquo;, &ldquo;mike&rdquo;, &ldquo;xenia&rdquo;);</p>

<p>Collections.sort(names, new Comparator<String>() {</p>

<pre><code>@Override
public int compare(String a, String b) {
    return b.compareTo(a);
}
</code></pre>

<p>});
<code>``
静态工具方法</code>Collections.sort`接受一个列表和比较器对象去排序一个指定列表的元素。你通常创建一个匿名的比较器并将其传递sort方法。</p>

<p>你不需要总是创建匿名对象，Java8中你可以用一种更加简洁的语法，lambda表达式：
```java
Collections.sort(names, (String a, String b) &ndash;> {</p>

<pre><code>return b.compareTo(a);
</code></pre>

<p>});
<code>
正如你看到上面的代码更加简短并且易读，但是它可以变得更加简短：
</code>java
Collections.sort(names, (String a, String b) &ndash;> b.compareTo(a));
<code>
对于只有一行代码的方法，你可以不用{}和return关键字，但是它还可以变得更简短：
</code>java
Collections.sort(names, (a, b) &ndash;> b.compareTo(a));
```
Java编译器清楚参数的类型，所以你也可以省略他们。接下来，让我们更加深入的来了解一下lambda表达式的使用。</p>

<p>&hellip;..未完待续&hellip;&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[月薪10k-20k招聘高级Java软件攻城狮]]></title>
    <link href="http://imtiger.github.io/blog/2013/12/04/java-engineer-recruitment/"/>
    <updated>2013-12-04T15:29:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/12/04/java-engineer-recruitment</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2013/09/27/2013-09-27-01.jpg" width="700" height="350"><br/>
创业快两年，感触颇多，也走过一些弯路，不过总体上还好。随着公司业务的不断扩大，现在需要招聘高级Java软件攻城狮数名，下面简单介绍下：</p>

<p>公司名称: 深圳易居尚网络科技有限公司<br/>
工作地点: 珠海清华科技园<br/>
职位名称: 高级Java软件攻城狮<br/>
月薪:    10k-20k</p>

<p>公司介绍: <br/>
我们公司<a href="http://www.ejushang.com">易居尚</a>秉承着<code>让品质走进生活的理念</code>，致力于打造一个品质、高效、便捷的居家用品网络销售平台.咋们公司不打卡，弹性工作制，每天下午有公司大厨做的下午茶，攻城狮童鞋每周可以自由支配20%的工作时间做自己想做的事情，我们技术团队内部有很强互助和知识分享意识（包括技术骚们喜欢的爱情动作片，嘘&hellip;，其他人我不告诉他）当然了还有很多美女和帅哥，想置身互联网和电子商务有理想的的技术骚们，请你加入我们 一起high，<strong>我们不求改变世界，但求超越自我</strong>。也请各位朋友帮忙推荐，推荐成功有神秘礼物相送哦，有意者请联系:<a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#116;&#x69;&#x67;&#101;&#x72;&#x2e;&#122;&#104;&#x6f;&#x75;&#64;&#x6b;&#97;&#x72;&#x69;&#x71;&#117;&#x2e;&#99;&#111;&#109;">&#116;&#x69;&#x67;&#x65;&#x72;&#46;&#x7a;&#104;&#x6f;&#x75;&#64;&#x6b;&#97;&#114;&#105;&#113;&#x75;&#46;&#x63;&#111;&#x6d;</a> 或者留言给我，另外也可以通过<a href="http://weibo.com/xmuzyq">@krq_tiger</a>新浪微博与我取的联系.</p>

<!-- more -->


<p>最后附上招聘要求：<br/>
<strong>岗位职责</strong>：<br/>
1. 业务需求分析；<br/>
2. 模块设计；<br/>
3. 代码编写，测试；<br/>
4. 技术文档编写；<br/>
5. 协调其他成员完成项目;</p>

<p><strong>岗位要求</strong>:<br/>
1. JAVA基础扎实，理解io、多线程、集合等基础框架，对JVM原理有一定的了解；<br/>
2. 3年及以上使用JAVA开发的经验，对于你用过的开源框架，能了解到它的原理和机制；对Spring,ibatis,struts等开源框架熟悉；<br/>
3. 熟悉常见的设计模式以及设计原则；<br/>
4. 熟悉Linux 操作系统以及mysql数据库，对sql优化有一定的经验；<br/>
5. 喜欢去看及尝试最新的技术，追求编写优雅的代码，从技术趋势和思路上能影响技术团队；<br/>
6. 学习能力强，适应能力好，具备耐心/细心的品质；<br/>
7. 3年及以上工作经验。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat 设计模式总结(Tomcat源代码阅读系列之八)]]></title>
    <link href="http://imtiger.github.io/blog/2013/11/08/tomcat-design-pattern/"/>
    <updated>2013-11-08T10:38:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/11/08/tomcat-design-pattern</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第八篇文章，本系列前七篇文章如下：<br/>
<a href="/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>     <br/>
<a href="/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>    <br/>
<a href="/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a> <br/>
<a href="/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a><br/>
<a href="/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a><br/>
<a href="/blog/2013/10/28/tomcat-class-loader/">Tomcat类加载器机制（Tomcat源代码阅读系列之六）</a> <br/>
<a href="/blog/2013/11/05/tomcat-session-manage/">Tomcat Session管理机制（Tomcat源代码阅读系列之七）</a></p>

<p>本篇我们将来分析一下Tomcat中所涉及到设计模式，本文我们将主要来分析<code>外观模式</code>，<code>观察者模式</code>，<code>责任链模式</code>，<code>模板方法模式</code>,<code>命令模式</code>。  <br/>
在开始本文之前，笔者先说明一下对于设计模式的一点看法。笔者曾经经常看到网上有人讨论设计模式，也偶尔会遇到有人非要严格按照GOF设计模式的类图以及其中的角色去套用别人的设计，只要类图不一样，或者角色多了或者少了就会觉得怎么和官方定义的模式不一样，其实这都是对设计模式的误解。设计模式其实不仅仅存在软件行业，各行各业其实都有模式，它是所在行业对一些通用问题解决方案的总结和抽象，是一种对常见问题的抽象的解决方案，不是一种具体的实现，所以我们在讨论设计模式的时候，千万别一个劲的套用GOF设计模式中的类图以及其中所涉及到的角色，而是要理解设计模式的思维，理解设计模式的使用场景，只有理解了设计模式中所蕴含的思维以及具体的使用场景以后，你才算是真正的掌握了它。ok,小扯了一下淡，接下来我们进入主题吧。</p>

<!-- more -->


<h1>外观模式</h1>

<h2>定义</h2>

<p>外观模式封装了子系统的具体实现，提供统一的外观类给外部系统，这样当子系统内部实现发生变化的时候，不会影响到外部系统。</p>

<h2>外观模式在Tomcat的应用</h2>

<p>在Tomcat中对于Request,Response,StandardSession,ApplicationContext,StandardWrapper都采用了外观模式，它的类图如下：
<img class="center" src="/images/2013/11/08/tomcat-facade.png"></p>

<p>通过上图，我们可以看到RequestFacade包装了Request，它们都实现了HttpServletRequest，当传递Request对象给应用的时候，其实是返回了RequestFacade对象，而RequestFacade内部可以根据是否自定义了安全管理器来进行相应的操作。</p>

<p>对于Response,StandardSession等处理是类似的，这里就不赘述了。</p>

<h1>观察者模式</h1>

<h2>定义</h2>

<p>观察者模式是一种非常常用的模式，比如大家熟悉的发布-订阅模式，客户端应用中的事件监听器，以及通知等其实都属于观察者模式。观察者模式主要是在当系统中发生某个状态变更或者事件的时候，有另外一些组件或者对象对此次变化有兴趣，这个时候那些对变化感兴趣的对象就可以做为观察者对象来监听变化，而被观察对象要负责发生变化的时候触发通知操作。</p>

<h2>观察者模式在Tomcat的应用</h2>

<p>Tomcat中需要对很多组件进行生命周期管理，为此Tomcat抽象了统一的生命周期管理骨架，通过这个骨架将所有需要进行生命周期管理的类都纳入进来管理，而这里的骨架的类图如下：
<img class="center" src="/images/2013/11/08/tomcat-observer.png"></p>

<p>通过上图我们可以看出Tomcat抽象了一个LifecycleSupport的类，而所有需要生命周期管理的组件通过LifecycleSupport类通知对某个生命周期事件感兴趣的观察者，而所有的观察者都需要实现LifecycleListener。<br/>
另外我们需要关注一下EventObject对象，它里面定义了一个事件源对象，所谓事件源就是事件发生的地方，而在Tomcat的设计中，事件源就是实现了LifeCycle接口的各个需要管理生命周期的组件，这里LifecycleSupport和LifeCycleBase之间是双向的关联，LifeCycleSupport关联LifeCycle对象就是为了实现事件源的传递，这样在LifeCycleSupport触发事件的时候，可以通过事件源构建EventObject.这样以来LifecycleListener就可以通过事件对象获取到事件源，从而做一些与事件源相关的操作。</p>

<h1>责任链模式</h1>

<h2>定义</h2>

<p>通过名称我们应该就能知道责任链模式是解决啥问题的？当我们系统在处理某个请求的时候，请求需要经过很多个节点进行处理，每个节点只关注自己的应该做的工作，做完自己的工作以后，将工作转给下一个节点进行处理，直到所有节点都处理完毕。责任链模式在日常生活中例子挺多，比如快递，当你发一个从深圳到北京的快递的时候，你的包裹会从一个分拨中心传递到下一个分拨中心，直到目的地，这里面每个分拨中心都是链路上的一个节点，它做完自己的工作，然后将工作传递到下一个节点，还比如路由器中传递某个数据包其实也是同样的思路。</p>

<h2>责任链模式在Tomcat的应用</h2>

<p>Tomcat中请求的处理流程其实就是采用了责任链模式，关于Tomcat请求处理，大家可以参考下<a href="/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a>,Tomcat中责任链模式的实现的类图如下图所示：
<img class="center" src="/images/2013/11/08/tomcat-chain-of-responsiblity.png"></p>

<p>从上图中，我们可以看到每一个容器都会有一个Pipeline，而一个Pipeline又会具有多个Valve阀门，其中StandardEngine对应的阀门是StandardEngineValve，StandardHost对应的阀门是StandardHostValve，StandardContext对应的阀门是StandardContextValve，StandardWrapper对应的阀门是StandardWrapperValve。这里每一Pipeline就好比一个管道，而每一Valve就相当于一个阀门，一个管道可以有多个阀门，而对于阀门来说有两种，一种阀门在处理完自己的事情以后，只需要将工作委托给下一个和自己在同一管道的阀门即可，第二种阀门是负责衔接各个管道的，它负责将请求传递给下个管道的第一个阀门处理，而这种阀门叫Basic阀门，它是每个管道中最后一个阀门，上面的Standard*Valve都属于第二种阀门。我们可以形象的通过下图来描述上面的过程:
<img class="center" src="/images/2013/11/08/tomcat-pipeline.png"></p>

<p>通过上图，我们可以很清楚的了解到Tomcat的请求处理流程。当用户请求服务器的时候，Connector会接受请求，从Socket连接中根据http协议解析出对应的数据，构造Request和Response对象，然后传递给后面的容器处理，顶层容器是StandardEngine，StandardEngine处理请求其实是通过容器的Pipeline进行的，而Pipeline其实最终是通过管道上的各个阀门进行的，当请求到达StandardEngineValve的时候，此阀门会将请求转发给对应StandardHost的Pipeline的第一个阀门处理，然后以此最终到达StandardHostValve阀门，它又会将请求转发给StandardContext的Pipeline的第一个阀门，这样以此类推，最后到达StandardWrapperValve，此阀门会根据Request来构建对应的Servelt，并将请求转发给对应的HttpServlet处理。从这里我们可以看出其实Tomcat核心处理流程就是通过责任链一步步的组装起来的。</p>

<h1>模板方法模式</h1>

<h2>定义</h2>

<p>模板方法模式抽象出某个业务操作公共的流程，将流程分为几个步骤，其中有一些步骤是固定不变的，有一些步骤是变化的，固定不变的步骤通过一个基类来实现，而变化的部分通过钩子方法让子类去实现，这样就实现了对系统中流程的统一化规范化管理。在日常生活中其实也有类似的例子，比如我们知道的连锁加盟店，他们都是有固定的加盟流程，只不过每一家店开的时候，店的选址，装修等不同的而已，但是总体的加盟流程已经是确定的。</p>

<h2>模板方法模式在Tomcat的应用</h2>

<p>Tomcat中关于生命周期管理的地方很好应用了模板方法模式，在一个组件的生命周期中都会涉及到init(初始化)，start（启动），stop(停止)，destory（销毁），而对于每一个生命周期阶段其实都有固定一些事情要做，比如判断前置状态，设置后置状态，以及通知状态变更事件的监听者等，而这些工作其实是可以固化的，所以Tomcat中就将每个生命周期阶段公共的部分固化，然后通过initInternal,startInternal,stopInternal,destoryInternal这几个钩子方法开放给子类去实现具体的逻辑。Tomcat中关于模板方法模式的实现如下图所示：
<img class="center" src="/images/2013/10/17/LifeCycleBase.png"></p>

<h1>命令模式</h1>

<h2>定义</h2>

<p>命令模式将请求封装为一个命令，将命令发送者和命令接受者解耦，并且所有命令对客户端来说都有统一的调用接口，使用命令模式还可以支持命令的撤销操作，在很多GUI程序中大量使用了此模式。<br/>
接下来我们来说一个场景大家感受下，我们有时候可能会遇到接口方法参数过多的问题，这样的接口不仅看起来丑陋而且不方便阅读，对客户端不友好。遇到这种情况我们可能选择将各种参数打包为一个参数对象，接口只需要一个参数对象即可，但是在具体的接口实现中，我们又要做条件判断根据参数值的不同做出不同的响应操作，这个时候其实就可以考虑将不同的逻辑实现和各种参数通过命令打包，然后提供一个命令工厂，客户端通过工厂生产出命令，然后直接调用即可。<br/>
其实在日常生活中，命令模式也很常见，比如公司老大给你分配了个任务，让你去做，他可能不关心你具体怎么做的，你做完了以后告诉他结果即可。</p>

<h2>命令模式在Tomcat的应用</h2>

<p>命令模式在Tomcat中主要是应用在对请求的处理过程中，Tomcat的实现中，根据它支持两种协议AJP和Http,而在具体的IO实现中，又分为Java同步阻赛IO,Java同步非祖塞IO，以及采用APR<a href="http://tomcat.apache.org/tomcat-7.0-doc/apr.html">Apache Portable Runtime </a>支持库,因此Tomcat统一了<code>org.apache.coyote.Processor</code>接口，根据协议和IO实现的不同通过不同的Process子类去实现，Connector作为客户端每次只需要根据具体的协议和IO实现创建对应的Process执行即可。下面我们来看一下命令模式在Tomcat中实现的相关类图:
<img class="center" src="/images/2013/11/08/tomcat-command-pattern.png"></p>

<p>通过上图我们可以清楚的看到，Tomcat首先根据协议的不同将Processor分为了Ajp和Http两组，然后又根据具体的IO实现方式的不同，将每一组都会实现同步祖塞IO,同步非祖塞IO，以及APR的Processor。
接下来我们再来看一个类图，我们就可以更加清楚的看到Tomcat中是如何利用命令模式来根据不同的协议以及IO实现方式来处理请求的。我们来看一下Tomcat中关于ProtocolHandler的类图。
<img class="center" src="/images/2013/11/08/tomcat-protocol.png"></p>

<p>通过上图我们可以看到针对每一种协议和IO实现方式的组合，都会有相应的协议处理类，而每个协议处理类都会有一个Handler，而每一个Handler在运行的时候就会创建出对应的Processor，比如AjpProtocol.AjpConnectionHandler创建AjpProcessor处理器，其它的类似。</p>

<p>通过上面的描述，我们可以看出Tomcat接受请求的处理流程如下：<br/>
Connector通过对应的Endpint监听Socket连接，当对应的端口有连接进来的时候，对应的Endpoint就会通过对应的Handler类处理，而Handler处理的时候，又会创建对应的Processor处理,而对应的Processor命令对象会解析Socket流的数据，然后生成Request和Response对象，最终通过上面说的责任链模式一步步的通过各个容器。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tomcat Session管理机制（Tomcat源代码阅读系列之七）]]></title>
    <link href="http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage/"/>
    <updated>2013-11-05T15:39:00+08:00</updated>
    <id>http://imtiger.github.io/blog/2013/11/05/tomcat-session-manage</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/2013/10/14/apache_tomcat_bag.jpg">
本文是<a href="/blog/2013/10/08/tomcat-source-code-study/">Tomcat源代码阅读系列</a>的第七篇文章，本系列前六篇文章如下：  <br/>
<a href="/blog/2013/10/14/run-tomcat-in-idea-or-eclipse/">在IntelliJ IDEA 和 Eclipse运行tomcat 7源代码（Tomcat源代码阅读系列之一）</a>   <br/>
<a href="/blog/2013/10/16/tomcat-architecture/">Tomcat总体结构                             （Tomcat源代码阅读系列之二）</a>  <br/>
<a href="/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a> <br/>
<a href="/blog/2013/10/21/tomcat-shutdown/">Tomcat关闭过程（Tomcat源代码阅读系列之四）</a><br/>
<a href="/blog/2013/10/24/tomcat-request-process/">Tomcat请求处理流程（Tomcat源代码阅读系列之五）</a><br/>
<a href="/blog/2013/10/28/tomcat-class-loader/">Tomcat类加载器机制（Tomcat源代码阅读系列之六）</a></p>

<p>前面几篇我们分析了Tomcat的启动，关闭，请求处理的流程，tomcat的classloader机制，本篇将接着分析Tomcat的session管理方面的内容。</p>

<!-- more -->


<p>在开始之前，我们先来看一下总体上的结构，熟悉了总体结构以后，我们在一步步的去分析源代码。Tomcat session相光的类图如下：
<img class="center" src="/images/2013/11/06/tomcat-session.jpg">
通过上图，我们可以看出每一个StandardContext会关联一个Manager,默认情况下Manager的实现类是StandardManager，而StandardManager内部会聚合多个Session，其中StandardSession是Session的默认实现类，当我们调用Request.getSession的时候，Tomcat通过StandardSessionFacade这个外观类将StandardSession包装以后返回。</p>

<p>上面清楚了总体的结构以后，我们来进一步的通过源代码来分析一下。咋们首先从Request的getSession方法看起。
```java org.apache.catalina.connector.Request#getSession
public HttpSession getSession() {</p>

<pre><code>Session session = doGetSession(true);
if (session == null) {
    return null;
}

return session.getSession();
</code></pre>

<p>}
<code>
从上面的代码，我们可以看出首先首先调用doGetSession方法获取Session，然后再调用Session的getSession方法返回HttpSession，那接下来我们再来看看doGetSession方法：
</code>java org.apache.catalina.connector.Request#doGetSession
protected Session doGetSession(boolean create) {</p>

<pre><code>// There cannot be a session if no context has been assigned yet
if (context == null) {
    return (null);
}

// Return the current session if it exists and is valid
if ((session != null) &amp;&amp; !session.isValid()) {
    session = null;
}
if (session != null) {
    return (session);
}

// Return the requested session if it exists and is valid
// 1 
Manager manager = null;
if (context != null) {
    manager = context.getManager();
}
if (manager == null)
 {
    return (null);      // Sessions are not supported
}
// 2
if (requestedSessionId != null) {
    try {
        session = manager.findSession(requestedSessionId);
    } catch (IOException e) {
        session = null;
    }
    if ((session != null) &amp;&amp; !session.isValid()) {
        session = null;
    }
    if (session != null) {
        session.access();
        return (session);
    }
}

// Create a new session if requested and the response is not committed
// 3
if (!create) {
    return (null);
}
if ((context != null) &amp;&amp; (response != null) &amp;&amp;
    context.getServletContext().getEffectiveSessionTrackingModes().
            contains(SessionTrackingMode.COOKIE) &amp;&amp;
    response.getResponse().isCommitted()) {
    throw new IllegalStateException
      (sm.getString("coyoteRequest.sessionCreateCommitted"));
}

// Attempt to reuse session id if one was submitted in a cookie
// Do not reuse the session id if it is from a URL, to prevent possible
// phishing attacks
// Use the SSL session ID if one is present.
// 4
if (("/".equals(context.getSessionCookiePath())
        &amp;&amp; isRequestedSessionIdFromCookie()) || requestedSessionSSL ) {
    session = manager.createSession(getRequestedSessionId());
} else {
    session = manager.createSession(null);
}

// Creating a new session cookie based on that session
if ((session != null) &amp;&amp; (getContext() != null)
       &amp;&amp; getContext().getServletContext().
               getEffectiveSessionTrackingModes().contains(
                       SessionTrackingMode.COOKIE)) {
    // 5 
    Cookie cookie =
        ApplicationSessionCookieConfig.createSessionCookie(
                context, session.getIdInternal(), isSecure());

    response.addSessionCookieInternal(cookie);
}

if (session == null) {
    return null;
}

session.access();
return session;
</code></pre>

<p>}</p>

<p>```
下面我们就来重点分析一下，上面代码中标注了数字的地方：</p>

<ol>
<li>标注1（第17行）首先从StandardContext中获取对应的Manager对象，缺省情况下，这个地方获取的其实就是StandardManager的实例。</li>
<li>标注2（第26行）从Manager中根据requestedSessionId获取session，如果session已经失效了，则将session置为null以便下面创建新的session,如果session不为空则通过调用session的access方法标注session的访问时间，然后返回。</li>
<li>标注3（第43行）判断传递的参数，如果为false，则直接返回空，这其实就是对应的Request.getSession(true/false)的情况，当传递false的时候，如果不存在session，则直接返回空，不会新建。</li>
<li>标注4 （第59行）调用Manager来创建一个新的session，这里默认会调用到StandardManager的方法，而StandardManager继承了ManagerBase，那么默认其实是调用了了ManagerBase的方法。</li>
<li>标注5 (第72行)创建了一个Cookie，而Cookie的名称就是大家熟悉的JSESSIONID，另外JSESSIONID其实也是可以配置的，这个可以通过context节点的sessionCookieName来修改。比如<Context sessionCookieName="yoursessionId">&hellip;</Context>.</li>
</ol>


<p>通过doGetSession获取到Session了以后，我们发现调用了session.getSession方法，而Session的实现类是StandardSession，那么我们再来看下StandardSession的getSession方法。
```java org.apache.catalina.session.StandardSession#getSession
public HttpSession getSession() {</p>

<pre><code>if (facade == null){
    if (SecurityUtil.isPackageProtectionEnabled()){
        final StandardSession fsession = this;
        facade = AccessController.doPrivileged(
                new PrivilegedAction&lt;StandardSessionFacade&gt;(){
            @Override
            public StandardSessionFacade run(){
                return new StandardSessionFacade(fsession);
            }
        });
    } else {
        facade = new StandardSessionFacade(this);
    }
}
return (facade);
</code></pre>

<p>}</p>

<p>```
通过上面的代码，我们可以看到通过StandardSessionFacade的包装类将StandardSession包装以后返回。到这里我想大家应该熟悉了Session创建的整个流程。</p>

<p>接着我们再来看看，Sesssion是如何被销毁的。我们在<a href="/blog/2013/10/17/tomcat-start-process/">Tomcat启动过程（Tomcat源代码阅读系列之三）</a>中之处，在容器启动以后会启动一个ContainerBackgroundProcessor线程，这个线程是在Container启动的时候启动的，这条线程就通过后台周期性的调用org.apache.catalina.core.ContainerBase#backgroundProcess，而backgroundProcess方法最终又会调用org.apache.catalina.session.ManagerBase#backgroundProcess，接下来我们就来看看Manger的backgroundProcess方法。</p>

<p>```java org.apache.catalina.session.ManagerBase#backgroundProcess
public void backgroundProcess() {</p>

<pre><code>count = (count + 1) % processExpiresFrequency;
if (count == 0)
    processExpires();
</code></pre>

<p>}
<code>
上面的代码里，需要注意一下，默认情况下backgroundProcess是每10秒运行一次（StandardEngine构造的时候，将backgroundProcessorDelay设置为了10），而这里我们通过processExpiresFrequency来控制频率，例如processExpiresFrequency的值默认为6，那么相当于没一分钟运行一次processExpires方法。接下来我们再来看看processExpires。
</code>java org.apache.catalina.session.ManagerBase#processExpires
public void processExpires() {</p>

<pre><code>long timeNow = System.currentTimeMillis();
Session sessions[] = findSessions();
int expireHere = 0 ;

if(log.isDebugEnabled())
    log.debug("Start expire sessions " + getName() + " at " + timeNow + " sessioncount " + sessions.length);
for (int i = 0; i &lt; sessions.length; i++) {
    if (sessions[i]!=null &amp;&amp; !sessions[i].isValid()) {
        expireHere++;
    }
}
long timeEnd = System.currentTimeMillis();
if(log.isDebugEnabled())
     log.debug("End expire sessions " + getName() + " processingTime " + (timeEnd - timeNow) + " expired sessions: " + expireHere);
processingTime += ( timeEnd - timeNow );
</code></pre>

<p>}
<code>
上面的代码比较简单，首先查找出当前context的所有的session，然后调用session的isValid方法，接下来我们在看看Session的isValid方法。
</code>java org.apache.catalina.session.StandardSession#isValid
public boolean isValid() {</p>

<pre><code>if (this.expiring) {
    return true;
}

if (!this.isValid) {
    return false;
}

if (ACTIVITY_CHECK &amp;&amp; accessCount.get() &gt; 0) {
    return true;
}

if (maxInactiveInterval &gt; 0) {
    long timeNow = System.currentTimeMillis();
    int timeIdle;
    if (LAST_ACCESS_AT_START) {
        timeIdle = (int) ((timeNow - lastAccessedTime) / 1000L);
    } else {
        timeIdle = (int) ((timeNow - thisAccessedTime) / 1000L);
    }
    if (timeIdle &gt;= maxInactiveInterval) {
        expire(true);
    }
}

return (this.isValid);
</code></pre>

<p>}</p>

<p>```
查看上面的代码，主要就是通过对比当前时间和上次访问的时间差是否大于了最大的非活动时间间隔，如果大于就会调用expire(true)方法对session进行超期处理。这里需要注意一点，默认情况下LAST_ACCESS_AT_START为false，读者也可以通过设置系统属性的方式进行修改，而如果采用LAST_ACCESS_AT_START的时候，那么请求本身的处理时间将不算在内。比如一个请求处理开始的时候是10:00,请求处理花了1分钟，那么如果LAST_ACCESS_AT_START为true，则算是否超期的时候，是从10:00算起，而不是10:01。</p>

<p>接下来我们再来看看expire方法，代码如下：
```java org.apache.catalina.session.StandardSession#expire
public void expire(boolean notify) {</p>

<pre><code>// Check to see if expire is in progress or has previously been called
if (expiring || !isValid)
    return;

synchronized (this) {
    // Check again, now we are inside the sync so this code only runs once
    // Double check locking - expiring and isValid need to be volatile
    if (expiring || !isValid)
        return;

    if (manager == null)
        return;

    // Mark this session as "being expired"
    // 1         
    expiring = true;

    // Notify interested application event listeners
    // FIXME - Assumes we call listeners in reverse order
    Context context = (Context) manager.getContainer();

    // The call to expire() may not have been triggered by the webapp.
    // Make sure the webapp's class loader is set when calling the
    // listeners
    ClassLoader oldTccl = null;
    if (context.getLoader() != null &amp;&amp;
            context.getLoader().getClassLoader() != null) {
        oldTccl = Thread.currentThread().getContextClassLoader();
        if (Globals.IS_SECURITY_ENABLED) {
            PrivilegedAction&lt;Void&gt; pa = new PrivilegedSetTccl(
                    context.getLoader().getClassLoader());
            AccessController.doPrivileged(pa);
        } else {
            Thread.currentThread().setContextClassLoader(
                    context.getLoader().getClassLoader());
        }
    }
    try {
        // 2
        Object listeners[] = context.getApplicationLifecycleListeners();
        if (notify &amp;&amp; (listeners != null)) {
            HttpSessionEvent event =
                new HttpSessionEvent(getSession());
            for (int i = 0; i &lt; listeners.length; i++) {
                int j = (listeners.length - 1) - i;
                if (!(listeners[j] instanceof HttpSessionListener))
                    continue;
                HttpSessionListener listener =
                    (HttpSessionListener) listeners[j];
                try {
                    context.fireContainerEvent("beforeSessionDestroyed",
                            listener);
                    listener.sessionDestroyed(event);
                    context.fireContainerEvent("afterSessionDestroyed",
                            listener);
                } catch (Throwable t) {
                    ExceptionUtils.handleThrowable(t);
                    try {
                        context.fireContainerEvent(
                                "afterSessionDestroyed", listener);
                    } catch (Exception e) {
                        // Ignore
                    }
                    manager.getContainer().getLogger().error
                        (sm.getString("standardSession.sessionEvent"), t);
                }
            }
        }
    } finally {
        if (oldTccl != null) {
            if (Globals.IS_SECURITY_ENABLED) {
                PrivilegedAction&lt;Void&gt; pa =
                    new PrivilegedSetTccl(oldTccl);
                AccessController.doPrivileged(pa);
            } else {
                Thread.currentThread().setContextClassLoader(oldTccl);
            }
        }
    }

    if (ACTIVITY_CHECK) {
        accessCount.set(0);
    }
    setValid(false);

    // Remove this session from our manager's active sessions
    // 3 
    manager.remove(this, true);

    // Notify interested session event listeners
    if (notify) {
        fireSessionEvent(Session.SESSION_DESTROYED_EVENT, null);
    }

    // Call the logout method
    if (principal instanceof GenericPrincipal) {
        GenericPrincipal gp = (GenericPrincipal) principal;
        try {
            gp.logout();
        } catch (Exception e) {
            manager.getContainer().getLogger().error(
                    sm.getString("standardSession.logoutfail"),
                    e);
        }
    }

    // We have completed expire of this session
    expiring = false;

    // Unbind any objects associated with this session
    // 4
    String keys[] = keys();
    for (int i = 0; i &lt; keys.length; i++)
        removeAttributeInternal(keys[i], notify);

}
</code></pre>

<p>}</p>

<p>```
上面代码的主流程我已经标注了数字，我们来逐一分析一下：</p>

<ol>
<li>标注1（第18行）标记当前的session为超期</li>
<li>标注2（第41行）出发HttpSessionListener监听器的方法。</li>
<li>标注3（第89行）从Manager里面移除当前的session</li>
<li>标注4（第113行）将session中保存的属性移除。</li>
</ol>


<p>到这里我们已经清楚了Tomcat中对与StandardSession的创建以及销毁的过程，其实StandardSession仅仅是实现了内存中Session的存储，而Tomcat还支持将Session持久化，以及Session集群节点间的同步。这些内容我们以后再来分析。</p>
]]></content>
  </entry>
  
</feed>
