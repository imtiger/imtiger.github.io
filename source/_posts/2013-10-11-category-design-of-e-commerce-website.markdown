---
layout: post
title: "电子商务网站的类目设计"
date: 2013-10-11 11:07
comments: true
keywords: 类目，电子商务，类目属性，类目属性值，导航类目
categories: 
- 技术
---
{% img center /images/2013/10/11/ejushang.png %}

电子商务网站中都会涉及到类目，而类目的设计也是一个电商网站设计的核心之一。本文总结一下总体的设计思路。
  
首先我们从一个简单的例子说起，假如你要打算买一双`耐克40码黑色运动鞋`，我们来看看这里面涉及到了哪些关键的信息，其中`耐克`,`40码`,`黑色`,`运动鞋`是关键的信息，我们再来进一步的分析，耐克是鞋的品牌，40码是鞋的尺寸，黑色是鞋子的颜色，运动鞋是鞋子的分类，对于分类我想大家应该都比较好理解，但是对于品牌（耐克），尺寸（40码），颜色（黑色）我们应该怎么来理解呢？接下来我们就来分析一下如何通过这个具体的例子来抽象出一个公共的模型出来。 

在上面的例子中，品牌，尺寸，颜色我们可以抽象出来`类目属性`的模型，而耐克，40码，黑色我们可以抽象出`类目属性值`的模型，这样以来我们就知道运动鞋这个类目，它有品牌，尺寸，以及颜色这几个类目属性，而品牌这个类目属性有耐克，阿迪达斯等属性值，尺寸类目属性有38码，39码，40码等类目属性值，而颜色类目属性有黑色，黄色等类目属性值。
<!-- more -->

明白了上面的类目属性和类目属性值的概念以后，咋们再来进一步的分析，我们再来举一个例子，张三买了一双`耐克40码黑色的运动鞋`，李四买了一双`耐克39码蓝色的运动鞋`,张三和李四购买的鞋子是同样一款耐克的鞋，只是尺码和颜色不同，从这里我们又可以引入另外两个概念`销售属性`,`关键属性`，上面的例子中，尺寸，颜色这些属于销售属性，而品牌就属于关键属性，可能说到这里大家又糊涂了，到底什么样子的属性才算销售属性，什么样子的属性是关键属性呢？要给出这个问题的答案，咋们还得进一步的进行分析，上面说的`耐克39码蓝色的运动鞋`,`耐克40码黑色的运动鞋`到底应该怎么抽象，这里需要引入一个线下标准的概念叫`SKU（StockKeepintUint）`,从字面上面来看sku表示最小存放的单元，怎么理解？当确定了这款运动鞋以后，张三和李四还需要进行进一步的选择，比如要选择尺寸，颜色，才可以确定到底要买哪一款，这里面通过不同的类目属性和类目属性值的组合就可以确定一个SKU，因此构成SKU的属性（比如上例中的尺寸，颜色），我们就将其称之为`销售属性`,而不影响SKU的属性（比如上例中的品牌），我们可以称之为关键属性（至于关键属性有什么用，我们下面再来讨论。）

接下来，我们来总结一下上面的分析结果，通过上面的分析，我们得到了如下几个模型，每个模型我都会通过简单的代码来标示出最核心的一些属性。

###1. 商品  
商品表示某个可以销售的物品，比如上面所说的耐克的运动鞋就是一个商品。
```java Product.java
public class Product {

    private int id;

    /**
     * 所在的行业标准类目
     */
    private int categoryId;

    private String name;
    
    //其它省略
}
```
###2. 类目  
类目也好理解，它是商品的一个分类。
```java ProductCategory.java
public class ProductCategory{

    private int id;

    private String name;

    //父亲类目
    private ProductCategory parent;

    //子类目
    private List<ProductCategory> children = new LinkedList<ProductCategory>();

    private String description = "";
    
    //其它省略
}
```
###3. 属性  
属性模型可以被多个类目共用，比如品牌，尺寸，颜色，很多类目都要用到这个属性，我们抽象出来以后，类目属性仅仅是引用属性即可。
```java Property.java
public class Property {

    private int id;
    //属性名称，比如品牌，尺寸，颜色等等
    private String name;
}
```
###4. 属性值  
属性值顾名思义就是上面品牌，尺寸等属性的属性值，例如耐克，38码，黑色，蓝色等等。
```java Value.java
public class Value {

    private int id;
    
    //属性值名称，比如耐克，38码，39码，黑色，蓝色等等 
    private String valueName;
}
```

###5. 类目属性  
类目属性反应了某个类目公共的特征，比如对于鞋子来说就有品牌，尺寸，颜色，对于一个杯子来说可能有容量，颜色等属性。
```java CategoryProperty.java
public class CategoryProperty {

    private int id; 
 
    //类目id 
    private int categoryId;
 
    //属性id,引用Property类的id.
    private int propertyId;
    
    //表示属性类型，分为销售属性和关键属性
    private PropertyType propertyType;
}

public enum PropertyType {

    /* 销售属性 */
    SELL_PROPERTY {
        @Override
        public String getDescription() {
            return "销售属性";
        }
    },

    /* 关键属性 */
    KEY_PROPERTY {
        @Override
        public String getDescription() {
            return "关键属性";
        }
    };

    public abstract String getDescription();

}
```
###6. 类目属性值  
类目属性值就是类目属性对应的不同的值，比如尺寸这个鞋子的类目属性就具有38码，39码等，颜色有黄色，黑色等。
```java CategoryPropertyValue.java
public class CategoryPropertyValue {

    //没有业务意义，只是数据库主键
    private int id;

    //类目id
    private int categoryId;

    //属性id,引用Property类的id.
    private int propertyId;

    //属性值id,引用Value类的id.
    private int valueId;

}
```
###7. SKU  
SKU是可以确定一个商品的最小的单元，只有确定了SKU，我们才能最终确定某个商品。
```java StockKeepingUnit.java
public class StockKeepingUnit {

    /**
     * SKU  ID
     */
    private int id;

    /**
     * 商品ID，一个商品可以有多个sku
     */
    private int productId;

    /**
     * 库存数量，查询sku的时候如果提供仓库则可读出库存数量
     */
    private int stockQuantity;

    /**
     * 价格
     */
    private long price;

    
    /**
     * SKU 属性列表
     */
    private List<SkuProperty> skuProperties;
}
/**
 * sku 属性
 * 比如颜色红色或者尺存38码等
 * @author Tiger
 * @version 1.0.0 
 */
public class SkuProperty {

    private long skuId;

    private int propertyId;

    private int valueId;

}
```

通过上面的描述，我们清楚了电子商务网站关于商品和类目设计中涉及的主要的模型。接下来我们来看看，这样的设计如何与电子商务网站的搜索相结合。一般电子商务网站都会类似下图所示的搜索界面：  
{% img center /images/2013/10/11/e-commerce-category.png %}


在上图中所列的其实就是我们上面所说的类目属性以及类目属性值，那么当我们点击其中一个类目属性和类目属性值的时候，怎么去通过搜索检索商品呢？根据上面的描述，我们知道一个商品有多个SKU，而每个SKU又有可能会有多个属性和属性值组合而成，这样的话，我们就可以根据属性和值的Id来对商品进行索引，查询的时候传递属性的id以及属性值的id即可搜索了。我们还是通过上图的例子来简要描述一下。假如我们要买`品牌为戴德适用人数为1-2人价格为500-999的汤锅`假设品牌的这个属性的id为100，戴德这个属性值的id为200，那么`品牌:戴德` 这一组属性和属性值就可以表示为`100:200`,适用人数这个属性的Id为101，而1-2人这个属性值的id为201，那么`适用人数:1-2人`我们就可以表示为`101:201`，价格这个属性的id为102，而500-999这个属性值的id为202，那么`价格:500-990`我们就可以表示为`102:202`,那么我们的搜索引擎就可以通过100:200,101:201,102:202这3个字符串来建立索引，查询的时候就可以根据同样的字符串来进行查询。

上面我们所说的类目都是指相对稳定的行业标准类目，这种类目结构线下也已经运营了好多年，基本上稳定，不会经常发生变化，标准类目也是面对行业的类目管理人员来说，但是对于电子商务网站的普通用户或者消费者来说，行业的类目可能太过于专业不能理解，这个时候就要引入一个导航类目的概念，导航类目主要目的就是站在消费者的角度来对类目进行划分，那么划分了以后，电商系统中就会存在两套类目：`导航类目`和`行业标准类目`，这样做其实也算是体现了软件设计中很重要的一个原则`开闭原则`，我们通过行业标准类目将商品进行规范话的管理，然后再用导航类目来适应消费者不断变化的需求。说到这里大家可能会想导航类目和行业标准类目又是如何进行关联的呢？接下来我们就来具体分析一下。  

假如锅这个类目下面有个炒锅一个子类目，如果随着运营的不断深化，我们发现消费者非常关注炒锅是铁的还是不锈钢的，从行业标准类目的角度来说，铁，不锈钢是炒锅类目材质这个类目属性的两个不同的类目属性值，但是消费者认为铁炒锅是一个类，不锈钢炒锅是另外一个类，那么我们其实就可以做一个导航类目叫`铁质炒锅`，另外一个导航类目叫`不锈钢炒锅`，这样用户就可以直接通过类目导航到最终的搜索结果，而不用首先选择炒锅，然后在列表页面选择铁或者不锈钢再来检索了。这个时候不锈钢炒锅对于我们的系统来说，其实是`炒锅+材质:不锈钢`这个搜索条件的组合，假如炒锅类目id为100，材质属性id为200，不锈钢属性值id为300，那么上面的查询请求，我们就可以转化为`100+200:300`查询条件，说到这里大家可能已经猜到了我们导航类目应该如何和行业标准类目关联了，其实最简单的方式就是在导航类目中用一个属性保存它关联的后台标准类目id，用另外一个属性保存对应的属性和属性值组合就可以了，当然了你也可以指定一个数据结构来对`[类目]* + [属性:属性值]*`这中结构进行抽象，然后在导航类目中用一个属性来保存以上的数据结构即可。说到这里我们会发现`导航类目`其实就是一种对`行业标准类目`，`类目属性`和`类目属性值`的组合。


本文通过一个简单的例子来总结了一下电子商务网站类目设计中相关的一些问题，也欢迎有这方面经验的朋友一起讨论一下。



